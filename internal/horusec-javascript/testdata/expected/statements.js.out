     0  *ast.File {
     1  .  Position: ast.Position {}
     2  .  Name: *ast.Ident {
     3  .  .  Name: "statements.js"
     4  .  .  Position: ast.Position {}
     5  .  }
     6  .  Decls: []ast.Decl (len = 5) {
     7  .  .  0: *ast.FuncDecl {
     8  .  .  .  Position: ast.Position {}
     9  .  .  .  Name: *ast.Ident {
    10  .  .  .  .  Name: "TryStatement"
    11  .  .  .  .  Position: ast.Position {}
    12  .  .  .  }
    13  .  .  .  Type: *ast.FuncType {
    14  .  .  .  .  Position: ast.Position {}
    15  .  .  .  .  Params: *ast.FieldList {
    16  .  .  .  .  .  Position: ast.Position {}
    17  .  .  .  .  }
    18  .  .  .  }
    19  .  .  .  Body: *ast.BlockStmt {
    20  .  .  .  .  Position: ast.Position {}
    21  .  .  .  .  List: []ast.Stmt (len = 1) {
    22  .  .  .  .  .  0: *ast.TryStmt {
    23  .  .  .  .  .  .  Position: ast.Position {}
    24  .  .  .  .  .  .  Body: *ast.BlockStmt {
    25  .  .  .  .  .  .  .  Position: ast.Position {}
    26  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
    27  .  .  .  .  .  .  .  .  0: *ast.AssignStmt {
    28  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    29  .  .  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
    30  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
    31  .  .  .  .  .  .  .  .  .  .  .  Name: "value"
    32  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    33  .  .  .  .  .  .  .  .  .  .  }
    34  .  .  .  .  .  .  .  .  .  }
    35  .  .  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
    36  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
    37  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    38  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
    39  .  .  .  .  .  .  .  .  .  .  .  Value: "test"
    40  .  .  .  .  .  .  .  .  .  .  }
    41  .  .  .  .  .  .  .  .  .  }
    42  .  .  .  .  .  .  .  .  }
    43  .  .  .  .  .  .  .  .  1: *ast.ExprStmt {
    44  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    45  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
    46  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    47  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
    48  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    49  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
    50  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
    51  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    52  .  .  .  .  .  .  .  .  .  .  .  }
    53  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
    54  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
    55  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    56  .  .  .  .  .  .  .  .  .  .  .  }
    57  .  .  .  .  .  .  .  .  .  .  }
    58  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
    59  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
    60  .  .  .  .  .  .  .  .  .  .  .  .  Name: "value"
    61  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    62  .  .  .  .  .  .  .  .  .  .  .  }
    63  .  .  .  .  .  .  .  .  .  .  }
    64  .  .  .  .  .  .  .  .  .  }
    65  .  .  .  .  .  .  .  .  }
    66  .  .  .  .  .  .  .  }
    67  .  .  .  .  .  .  }
    68  .  .  .  .  .  .  CatchClause: []*ast.CatchClause (len = 1) {
    69  .  .  .  .  .  .  .  0: *ast.CatchClause {
    70  .  .  .  .  .  .  .  .  Position: ast.Position {}
    71  .  .  .  .  .  .  .  .  Parameter: *ast.Ident {
    72  .  .  .  .  .  .  .  .  .  Name: "err"
    73  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    74  .  .  .  .  .  .  .  .  }
    75  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
    76  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    77  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
    78  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
    79  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    80  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
    81  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    82  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
    83  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    84  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
    85  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
    86  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    87  .  .  .  .  .  .  .  .  .  .  .  .  .  }
    88  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
    89  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "error"
    90  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    91  .  .  .  .  .  .  .  .  .  .  .  .  .  }
    92  .  .  .  .  .  .  .  .  .  .  .  .  }
    93  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
    94  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
    95  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "err"
    96  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    97  .  .  .  .  .  .  .  .  .  .  .  .  .  }
    98  .  .  .  .  .  .  .  .  .  .  .  .  }
    99  .  .  .  .  .  .  .  .  .  .  .  }
   100  .  .  .  .  .  .  .  .  .  .  }
   101  .  .  .  .  .  .  .  .  .  }
   102  .  .  .  .  .  .  .  .  }
   103  .  .  .  .  .  .  .  }
   104  .  .  .  .  .  .  }
   105  .  .  .  .  .  .  Finalizer: *ast.BlockStmt {
   106  .  .  .  .  .  .  .  Position: ast.Position {}
   107  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
   108  .  .  .  .  .  .  .  .  0: *ast.AssignStmt {
   109  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   110  .  .  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
   111  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   112  .  .  .  .  .  .  .  .  .  .  .  Name: "sum"
   113  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   114  .  .  .  .  .  .  .  .  .  .  }
   115  .  .  .  .  .  .  .  .  .  }
   116  .  .  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
   117  .  .  .  .  .  .  .  .  .  .  0: *ast.BinaryExpr {
   118  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   119  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.BasicLit {
   120  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   121  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
   122  .  .  .  .  .  .  .  .  .  .  .  .  Value: "1"
   123  .  .  .  .  .  .  .  .  .  .  .  }
   124  .  .  .  .  .  .  .  .  .  .  .  Op: ""
   125  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   126  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   127  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
   128  .  .  .  .  .  .  .  .  .  .  .  .  Value: "1"
   129  .  .  .  .  .  .  .  .  .  .  .  }
   130  .  .  .  .  .  .  .  .  .  .  }
   131  .  .  .  .  .  .  .  .  .  }
   132  .  .  .  .  .  .  .  .  }
   133  .  .  .  .  .  .  .  .  1: *ast.ExprStmt {
   134  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   135  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   136  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   137  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   138  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   139  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   140  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   141  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   142  .  .  .  .  .  .  .  .  .  .  .  }
   143  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   144  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   145  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   146  .  .  .  .  .  .  .  .  .  .  .  }
   147  .  .  .  .  .  .  .  .  .  .  }
   148  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   149  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   150  .  .  .  .  .  .  .  .  .  .  .  .  Name: "sum"
   151  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   152  .  .  .  .  .  .  .  .  .  .  .  }
   153  .  .  .  .  .  .  .  .  .  .  }
   154  .  .  .  .  .  .  .  .  .  }
   155  .  .  .  .  .  .  .  .  }
   156  .  .  .  .  .  .  .  }
   157  .  .  .  .  .  .  }
   158  .  .  .  .  .  }
   159  .  .  .  .  }
   160  .  .  .  }
   161  .  .  }
   162  .  .  1: *ast.FuncDecl {
   163  .  .  .  Position: ast.Position {}
   164  .  .  .  Name: *ast.Ident {
   165  .  .  .  .  Name: "WhileStatement"
   166  .  .  .  .  Position: ast.Position {}
   167  .  .  .  }
   168  .  .  .  Type: *ast.FuncType {
   169  .  .  .  .  Position: ast.Position {}
   170  .  .  .  .  Params: *ast.FieldList {
   171  .  .  .  .  .  Position: ast.Position {}
   172  .  .  .  .  }
   173  .  .  .  }
   174  .  .  .  Body: *ast.BlockStmt {
   175  .  .  .  .  Position: ast.Position {}
   176  .  .  .  .  List: []ast.Stmt (len = 1) {
   177  .  .  .  .  .  0: *ast.WhileStmt {
   178  .  .  .  .  .  .  Position: ast.Position {}
   179  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
   180  .  .  .  .  .  .  .  Position: ast.Position {}
   181  .  .  .  .  .  .  .  Left: *ast.Ident {
   182  .  .  .  .  .  .  .  .  Name: "i"
   183  .  .  .  .  .  .  .  .  Position: ast.Position {}
   184  .  .  .  .  .  .  .  }
   185  .  .  .  .  .  .  .  Op: ""
   186  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   187  .  .  .  .  .  .  .  .  Position: ast.Position {}
   188  .  .  .  .  .  .  .  .  Kind: "number"
   189  .  .  .  .  .  .  .  .  Value: "5"
   190  .  .  .  .  .  .  .  }
   191  .  .  .  .  .  .  }
   192  .  .  .  .  .  .  Body: *ast.BlockStmt {
   193  .  .  .  .  .  .  .  Position: ast.Position {}
   194  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
   195  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   196  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   197  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   198  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   199  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   200  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   201  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   202  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   203  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   204  .  .  .  .  .  .  .  .  .  .  .  }
   205  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   206  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   207  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   208  .  .  .  .  .  .  .  .  .  .  .  }
   209  .  .  .  .  .  .  .  .  .  .  }
   210  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   211  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   212  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   213  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   214  .  .  .  .  .  .  .  .  .  .  .  .  Value: "test"
   215  .  .  .  .  .  .  .  .  .  .  .  }
   216  .  .  .  .  .  .  .  .  .  .  }
   217  .  .  .  .  .  .  .  .  .  }
   218  .  .  .  .  .  .  .  .  }
   219  .  .  .  .  .  .  .  }
   220  .  .  .  .  .  .  }
   221  .  .  .  .  .  }
   222  .  .  .  .  }
   223  .  .  .  }
   224  .  .  }
   225  .  .  2: *ast.FuncDecl {
   226  .  .  .  Position: ast.Position {}
   227  .  .  .  Name: *ast.Ident {
   228  .  .  .  .  Name: "SwitchStatement"
   229  .  .  .  .  Position: ast.Position {}
   230  .  .  .  }
   231  .  .  .  Type: *ast.FuncType {
   232  .  .  .  .  Position: ast.Position {}
   233  .  .  .  .  Params: *ast.FieldList {
   234  .  .  .  .  .  Position: ast.Position {}
   235  .  .  .  .  }
   236  .  .  .  }
   237  .  .  .  Body: *ast.BlockStmt {
   238  .  .  .  .  Position: ast.Position {}
   239  .  .  .  .  List: []ast.Stmt (len = 2) {
   240  .  .  .  .  .  0: *ast.AssignStmt {
   241  .  .  .  .  .  .  Position: ast.Position {}
   242  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
   243  .  .  .  .  .  .  .  0: *ast.Ident {
   244  .  .  .  .  .  .  .  .  Name: "fruits"
   245  .  .  .  .  .  .  .  .  Position: ast.Position {}
   246  .  .  .  .  .  .  .  }
   247  .  .  .  .  .  .  }
   248  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
   249  .  .  .  .  .  .  .  0: *ast.BasicLit {
   250  .  .  .  .  .  .  .  .  Position: ast.Position {}
   251  .  .  .  .  .  .  .  .  Kind: "string"
   252  .  .  .  .  .  .  .  .  Value: "Oranges"
   253  .  .  .  .  .  .  .  }
   254  .  .  .  .  .  .  }
   255  .  .  .  .  .  }
   256  .  .  .  .  .  1: *ast.SwitchStatement {
   257  .  .  .  .  .  .  Position: ast.Position {}
   258  .  .  .  .  .  .  Value: *ast.Ident {
   259  .  .  .  .  .  .  .  Name: "fruits"
   260  .  .  .  .  .  .  .  Position: ast.Position {}
   261  .  .  .  .  .  .  }
   262  .  .  .  .  .  .  Body: *ast.BlockStmt {
   263  .  .  .  .  .  .  .  Position: ast.Position {}
   264  .  .  .  .  .  .  .  List: []ast.Stmt (len = 4) {
   265  .  .  .  .  .  .  .  .  0: *ast.SwitchCase {
   266  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   267  .  .  .  .  .  .  .  .  .  Cond: *ast.BasicLit {
   268  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   269  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   270  .  .  .  .  .  .  .  .  .  .  Value: "Oranges"
   271  .  .  .  .  .  .  .  .  .  }
   272  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 2) {
   273  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   274  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   275  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   276  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   277  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   278  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   279  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   280  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   281  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   282  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   283  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   284  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   285  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   286  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   287  .  .  .  .  .  .  .  .  .  .  .  .  }
   288  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   289  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   290  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   291  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   292  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "Oranges"
   293  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   294  .  .  .  .  .  .  .  .  .  .  .  .  }
   295  .  .  .  .  .  .  .  .  .  .  .  }
   296  .  .  .  .  .  .  .  .  .  .  }
   297  .  .  .  .  .  .  .  .  .  .  1: *ast.BreakStatement {
   298  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   299  .  .  .  .  .  .  .  .  .  .  }
   300  .  .  .  .  .  .  .  .  .  }
   301  .  .  .  .  .  .  .  .  }
   302  .  .  .  .  .  .  .  .  1: *ast.SwitchCase {
   303  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   304  .  .  .  .  .  .  .  .  .  Cond: *ast.BasicLit {
   305  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   306  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   307  .  .  .  .  .  .  .  .  .  .  Value: "Mangoes"
   308  .  .  .  .  .  .  .  .  .  }
   309  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 2) {
   310  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   311  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   312  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   313  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   314  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   315  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   316  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   317  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   318  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   319  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   320  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   321  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   322  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   323  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   324  .  .  .  .  .  .  .  .  .  .  .  .  }
   325  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   326  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   327  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   328  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   329  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "Mangoes"
   330  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   331  .  .  .  .  .  .  .  .  .  .  .  .  }
   332  .  .  .  .  .  .  .  .  .  .  .  }
   333  .  .  .  .  .  .  .  .  .  .  }
   334  .  .  .  .  .  .  .  .  .  .  1: *ast.BreakStatement {
   335  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   336  .  .  .  .  .  .  .  .  .  .  }
   337  .  .  .  .  .  .  .  .  .  }
   338  .  .  .  .  .  .  .  .  }
   339  .  .  .  .  .  .  .  .  2: *ast.SwitchCase {
   340  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   341  .  .  .  .  .  .  .  .  .  Cond: *ast.BasicLit {
   342  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   343  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   344  .  .  .  .  .  .  .  .  .  .  Value: "Papayas"
   345  .  .  .  .  .  .  .  .  .  }
   346  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 2) {
   347  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   348  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   349  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   350  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   351  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   352  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   353  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   354  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   355  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   356  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   357  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   358  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   359  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   360  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   361  .  .  .  .  .  .  .  .  .  .  .  .  }
   362  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   363  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   364  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   365  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   366  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "Papayas"
   367  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   368  .  .  .  .  .  .  .  .  .  .  .  .  }
   369  .  .  .  .  .  .  .  .  .  .  .  }
   370  .  .  .  .  .  .  .  .  .  .  }
   371  .  .  .  .  .  .  .  .  .  .  1: *ast.BreakStatement {
   372  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   373  .  .  .  .  .  .  .  .  .  .  }
   374  .  .  .  .  .  .  .  .  .  }
   375  .  .  .  .  .  .  .  .  }
   376  .  .  .  .  .  .  .  .  3: *ast.SwitchDefault {
   377  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   378  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 1) {
   379  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   380  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   381  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   382  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   383  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   384  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   385  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   386  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   387  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   388  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   389  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   390  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   391  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   392  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   393  .  .  .  .  .  .  .  .  .  .  .  .  }
   394  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   395  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   396  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   397  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   398  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "No fruits"
   399  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   400  .  .  .  .  .  .  .  .  .  .  .  .  }
   401  .  .  .  .  .  .  .  .  .  .  .  }
   402  .  .  .  .  .  .  .  .  .  .  }
   403  .  .  .  .  .  .  .  .  .  }
   404  .  .  .  .  .  .  .  .  }
   405  .  .  .  .  .  .  .  }
   406  .  .  .  .  .  .  }
   407  .  .  .  .  .  }
   408  .  .  .  .  }
   409  .  .  .  }
   410  .  .  }
   411  .  .  3: *ast.FuncDecl {
   412  .  .  .  Position: ast.Position {}
   413  .  .  .  Name: *ast.Ident {
   414  .  .  .  .  Name: "ForStatement"
   415  .  .  .  .  Position: ast.Position {}
   416  .  .  .  }
   417  .  .  .  Type: *ast.FuncType {
   418  .  .  .  .  Position: ast.Position {}
   419  .  .  .  .  Params: *ast.FieldList {
   420  .  .  .  .  .  Position: ast.Position {}
   421  .  .  .  .  }
   422  .  .  .  }
   423  .  .  .  Body: *ast.BlockStmt {
   424  .  .  .  .  Position: ast.Position {}
   425  .  .  .  .  List: []ast.Stmt (len = 1) {
   426  .  .  .  .  .  0: *ast.ForStatement {
   427  .  .  .  .  .  .  Position: ast.Position {}
   428  .  .  .  .  .  .  VarDecl: *ast.AssignStmt {
   429  .  .  .  .  .  .  .  Position: ast.Position {}
   430  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
   431  .  .  .  .  .  .  .  .  0: *ast.Ident {
   432  .  .  .  .  .  .  .  .  .  Name: "i"
   433  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   434  .  .  .  .  .  .  .  .  }
   435  .  .  .  .  .  .  .  }
   436  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
   437  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   438  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   439  .  .  .  .  .  .  .  .  .  Kind: "number"
   440  .  .  .  .  .  .  .  .  .  Value: "0"
   441  .  .  .  .  .  .  .  .  }
   442  .  .  .  .  .  .  .  }
   443  .  .  .  .  .  .  }
   444  .  .  .  .  .  .  Cond: *ast.ExprStmt {
   445  .  .  .  .  .  .  .  Position: ast.Position {}
   446  .  .  .  .  .  .  .  Expr: *ast.BinaryExpr {
   447  .  .  .  .  .  .  .  .  Position: ast.Position {}
   448  .  .  .  .  .  .  .  .  Left: *ast.Ident {
   449  .  .  .  .  .  .  .  .  .  Name: "i"
   450  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   451  .  .  .  .  .  .  .  .  }
   452  .  .  .  .  .  .  .  .  Op: ""
   453  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   454  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   455  .  .  .  .  .  .  .  .  .  Kind: "number"
   456  .  .  .  .  .  .  .  .  .  Value: "9"
   457  .  .  .  .  .  .  .  .  }
   458  .  .  .  .  .  .  .  }
   459  .  .  .  .  .  .  }
   460  .  .  .  .  .  .  Increment: *ast.IncExpr {
   461  .  .  .  .  .  .  .  Position: ast.Position {}
   462  .  .  .  .  .  .  .  Arg: *ast.Ident {
   463  .  .  .  .  .  .  .  .  Name: "i"
   464  .  .  .  .  .  .  .  .  Position: ast.Position {}
   465  .  .  .  .  .  .  .  }
   466  .  .  .  .  .  .  }
   467  .  .  .  .  .  .  Body: *ast.BlockStmt {
   468  .  .  .  .  .  .  .  Position: ast.Position {}
   469  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
   470  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   471  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   472  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   473  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   474  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   475  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   476  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   477  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   478  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   479  .  .  .  .  .  .  .  .  .  .  .  }
   480  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   481  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   482  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   483  .  .  .  .  .  .  .  .  .  .  .  }
   484  .  .  .  .  .  .  .  .  .  .  }
   485  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   486  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   487  .  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
   488  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   489  .  .  .  .  .  .  .  .  .  .  .  }
   490  .  .  .  .  .  .  .  .  .  .  }
   491  .  .  .  .  .  .  .  .  .  }
   492  .  .  .  .  .  .  .  .  }
   493  .  .  .  .  .  .  .  }
   494  .  .  .  .  .  .  }
   495  .  .  .  .  .  }
   496  .  .  .  .  }
   497  .  .  .  }
   498  .  .  }
   499  .  .  4: *ast.FuncDecl {
   500  .  .  .  Position: ast.Position {}
   501  .  .  .  Name: *ast.Ident {
   502  .  .  .  .  Name: "ForInStatement"
   503  .  .  .  .  Position: ast.Position {}
   504  .  .  .  }
   505  .  .  .  Type: *ast.FuncType {
   506  .  .  .  .  Position: ast.Position {}
   507  .  .  .  .  Params: *ast.FieldList {
   508  .  .  .  .  .  Position: ast.Position {}
   509  .  .  .  .  }
   510  .  .  .  }
   511  .  .  .  Body: *ast.BlockStmt {
   512  .  .  .  .  Position: ast.Position {}
   513  .  .  .  .  List: []ast.Stmt (len = 2) {
   514  .  .  .  .  .  0: *ast.AssignStmt {
   515  .  .  .  .  .  .  Position: ast.Position {}
   516  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
   517  .  .  .  .  .  .  .  0: *ast.Ident {
   518  .  .  .  .  .  .  .  .  Name: "values"
   519  .  .  .  .  .  .  .  .  Position: ast.Position {}
   520  .  .  .  .  .  .  .  }
   521  .  .  .  .  .  .  }
   522  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
   523  .  .  .  .  .  .  .  0: *ast.ObjectExpr {
   524  .  .  .  .  .  .  .  .  Position: ast.Position {}
   525  .  .  .  .  .  .  .  .  Elts: []ast.Expr (len = 3) {
   526  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   527  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   528  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   529  .  .  .  .  .  .  .  .  .  .  Value: "a"
   530  .  .  .  .  .  .  .  .  .  }
   531  .  .  .  .  .  .  .  .  .  1: *ast.BasicLit {
   532  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   533  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   534  .  .  .  .  .  .  .  .  .  .  Value: "b"
   535  .  .  .  .  .  .  .  .  .  }
   536  .  .  .  .  .  .  .  .  .  2: *ast.BasicLit {
   537  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   538  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   539  .  .  .  .  .  .  .  .  .  .  Value: "c"
   540  .  .  .  .  .  .  .  .  .  }
   541  .  .  .  .  .  .  .  .  }
   542  .  .  .  .  .  .  .  }
   543  .  .  .  .  .  .  }
   544  .  .  .  .  .  }
   545  .  .  .  .  .  1: *ast.ForInStatement {
   546  .  .  .  .  .  .  Position: ast.Position {}
   547  .  .  .  .  .  .  Left: *ast.Ident {
   548  .  .  .  .  .  .  .  Name: "value"
   549  .  .  .  .  .  .  .  Position: ast.Position {}
   550  .  .  .  .  .  .  }
   551  .  .  .  .  .  .  Right: *ast.Ident {
   552  .  .  .  .  .  .  .  Name: "values"
   553  .  .  .  .  .  .  .  Position: ast.Position {}
   554  .  .  .  .  .  .  }
   555  .  .  .  .  .  .  Body: *ast.BlockStmt {
   556  .  .  .  .  .  .  .  Position: ast.Position {}
   557  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
   558  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   559  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   560  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   561  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   562  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   563  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   564  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   565  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   566  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   567  .  .  .  .  .  .  .  .  .  .  .  }
   568  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   569  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   570  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   571  .  .  .  .  .  .  .  .  .  .  .  }
   572  .  .  .  .  .  .  .  .  .  .  }
   573  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   574  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   575  .  .  .  .  .  .  .  .  .  .  .  .  Name: "value"
   576  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   577  .  .  .  .  .  .  .  .  .  .  .  }
   578  .  .  .  .  .  .  .  .  .  .  }
   579  .  .  .  .  .  .  .  .  .  }
   580  .  .  .  .  .  .  .  .  }
   581  .  .  .  .  .  .  .  }
   582  .  .  .  .  .  .  }
   583  .  .  .  .  .  }
   584  .  .  .  .  }
   585  .  .  .  }
   586  .  .  }
   587  .  }
   588  }
