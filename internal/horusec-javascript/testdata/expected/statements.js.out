     0  *ast.File {
     1  .  Position: ast.Position {}
     2  .  Name: *ast.Ident {
     3  .  .  Name: "statements.js"
     4  .  .  Position: ast.Position {}
     5  .  }
     6  .  Decls: []ast.Decl (len = 6) {
     7  .  .  0: *ast.FuncDecl {
     8  .  .  .  Position: ast.Position {}
     9  .  .  .  Name: *ast.Ident {
    10  .  .  .  .  Name: "TryStatement"
    11  .  .  .  .  Position: ast.Position {}
    12  .  .  .  }
    13  .  .  .  Type: *ast.FuncType {
    14  .  .  .  .  Position: ast.Position {}
    15  .  .  .  .  Params: *ast.FieldList {
    16  .  .  .  .  .  Position: ast.Position {}
    17  .  .  .  .  }
    18  .  .  .  }
    19  .  .  .  Body: *ast.BlockStmt {
    20  .  .  .  .  Position: ast.Position {}
    21  .  .  .  .  List: []ast.Stmt (len = 1) {
    22  .  .  .  .  .  0: *ast.TryStmt {
    23  .  .  .  .  .  .  Position: ast.Position {}
    24  .  .  .  .  .  .  Body: *ast.BlockStmt {
    25  .  .  .  .  .  .  .  Position: ast.Position {}
    26  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
    27  .  .  .  .  .  .  .  .  0: *ast.AssignStmt {
    28  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    29  .  .  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
    30  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
    31  .  .  .  .  .  .  .  .  .  .  .  Name: "value"
    32  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    33  .  .  .  .  .  .  .  .  .  .  }
    34  .  .  .  .  .  .  .  .  .  }
    35  .  .  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
    36  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
    37  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    38  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
    39  .  .  .  .  .  .  .  .  .  .  .  Value: "test"
    40  .  .  .  .  .  .  .  .  .  .  }
    41  .  .  .  .  .  .  .  .  .  }
    42  .  .  .  .  .  .  .  .  }
    43  .  .  .  .  .  .  .  .  1: *ast.ExprStmt {
    44  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    45  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
    46  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    47  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
    48  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    49  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
    50  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
    51  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    52  .  .  .  .  .  .  .  .  .  .  .  }
    53  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
    54  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
    55  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    56  .  .  .  .  .  .  .  .  .  .  .  }
    57  .  .  .  .  .  .  .  .  .  .  }
    58  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
    59  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
    60  .  .  .  .  .  .  .  .  .  .  .  .  Name: "value"
    61  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    62  .  .  .  .  .  .  .  .  .  .  .  }
    63  .  .  .  .  .  .  .  .  .  .  }
    64  .  .  .  .  .  .  .  .  .  }
    65  .  .  .  .  .  .  .  .  }
    66  .  .  .  .  .  .  .  }
    67  .  .  .  .  .  .  }
    68  .  .  .  .  .  .  CatchClause: []*ast.CatchClause (len = 1) {
    69  .  .  .  .  .  .  .  0: *ast.CatchClause {
    70  .  .  .  .  .  .  .  .  Position: ast.Position {}
    71  .  .  .  .  .  .  .  .  Parameter: *ast.Ident {
    72  .  .  .  .  .  .  .  .  .  Name: "err"
    73  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    74  .  .  .  .  .  .  .  .  }
    75  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
    76  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    77  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
    78  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
    79  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    80  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
    81  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    82  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
    83  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    84  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
    85  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
    86  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    87  .  .  .  .  .  .  .  .  .  .  .  .  .  }
    88  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
    89  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "error"
    90  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    91  .  .  .  .  .  .  .  .  .  .  .  .  .  }
    92  .  .  .  .  .  .  .  .  .  .  .  .  }
    93  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
    94  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
    95  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "err"
    96  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    97  .  .  .  .  .  .  .  .  .  .  .  .  .  }
    98  .  .  .  .  .  .  .  .  .  .  .  .  }
    99  .  .  .  .  .  .  .  .  .  .  .  }
   100  .  .  .  .  .  .  .  .  .  .  }
   101  .  .  .  .  .  .  .  .  .  }
   102  .  .  .  .  .  .  .  .  }
   103  .  .  .  .  .  .  .  }
   104  .  .  .  .  .  .  }
   105  .  .  .  .  .  .  Finalizer: *ast.BlockStmt {
   106  .  .  .  .  .  .  .  Position: ast.Position {}
   107  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
   108  .  .  .  .  .  .  .  .  0: *ast.AssignStmt {
   109  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   110  .  .  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
   111  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   112  .  .  .  .  .  .  .  .  .  .  .  Name: "sum"
   113  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   114  .  .  .  .  .  .  .  .  .  .  }
   115  .  .  .  .  .  .  .  .  .  }
   116  .  .  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
   117  .  .  .  .  .  .  .  .  .  .  0: *ast.BinaryExpr {
   118  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   119  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.BasicLit {
   120  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   121  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
   122  .  .  .  .  .  .  .  .  .  .  .  .  Value: "1"
   123  .  .  .  .  .  .  .  .  .  .  .  }
   124  .  .  .  .  .  .  .  .  .  .  .  Op: ""
   125  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   126  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   127  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
   128  .  .  .  .  .  .  .  .  .  .  .  .  Value: "1"
   129  .  .  .  .  .  .  .  .  .  .  .  }
   130  .  .  .  .  .  .  .  .  .  .  }
   131  .  .  .  .  .  .  .  .  .  }
   132  .  .  .  .  .  .  .  .  }
   133  .  .  .  .  .  .  .  .  1: *ast.ExprStmt {
   134  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   135  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   136  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   137  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   138  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   139  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   140  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   141  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   142  .  .  .  .  .  .  .  .  .  .  .  }
   143  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   144  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   145  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   146  .  .  .  .  .  .  .  .  .  .  .  }
   147  .  .  .  .  .  .  .  .  .  .  }
   148  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   149  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   150  .  .  .  .  .  .  .  .  .  .  .  .  Name: "sum"
   151  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   152  .  .  .  .  .  .  .  .  .  .  .  }
   153  .  .  .  .  .  .  .  .  .  .  }
   154  .  .  .  .  .  .  .  .  .  }
   155  .  .  .  .  .  .  .  .  }
   156  .  .  .  .  .  .  .  }
   157  .  .  .  .  .  .  }
   158  .  .  .  .  .  }
   159  .  .  .  .  }
   160  .  .  .  }
   161  .  .  }
   162  .  .  1: *ast.FuncDecl {
   163  .  .  .  Position: ast.Position {}
   164  .  .  .  Name: *ast.Ident {
   165  .  .  .  .  Name: "WhileStatement"
   166  .  .  .  .  Position: ast.Position {}
   167  .  .  .  }
   168  .  .  .  Type: *ast.FuncType {
   169  .  .  .  .  Position: ast.Position {}
   170  .  .  .  .  Params: *ast.FieldList {
   171  .  .  .  .  .  Position: ast.Position {}
   172  .  .  .  .  }
   173  .  .  .  }
   174  .  .  .  Body: *ast.BlockStmt {
   175  .  .  .  .  Position: ast.Position {}
   176  .  .  .  .  List: []ast.Stmt (len = 2) {
   177  .  .  .  .  .  0: *ast.LabeledStatement {
   178  .  .  .  .  .  .  Position: ast.Position {}
   179  .  .  .  .  .  .  Label: *ast.Ident {
   180  .  .  .  .  .  .  .  Name: "whileStmt"
   181  .  .  .  .  .  .  .  Position: ast.Position {}
   182  .  .  .  .  .  .  }
   183  .  .  .  .  .  .  Body: []ast.Stmt (len = 1) {
   184  .  .  .  .  .  .  .  0: *ast.WhileStmt {
   185  .  .  .  .  .  .  .  .  Position: ast.Position {}
   186  .  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
   187  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   188  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
   189  .  .  .  .  .  .  .  .  .  .  Name: "i"
   190  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   191  .  .  .  .  .  .  .  .  .  }
   192  .  .  .  .  .  .  .  .  .  Op: ""
   193  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   194  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   195  .  .  .  .  .  .  .  .  .  .  Kind: "number"
   196  .  .  .  .  .  .  .  .  .  .  Value: "5"
   197  .  .  .  .  .  .  .  .  .  }
   198  .  .  .  .  .  .  .  .  }
   199  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
   200  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   201  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 3) {
   202  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   203  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   204  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   205  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   206  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   207  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   208  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   209  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   210  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   211  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   212  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   213  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   214  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   215  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   216  .  .  .  .  .  .  .  .  .  .  .  .  }
   217  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   218  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   219  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   220  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   221  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "test"
   222  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   223  .  .  .  .  .  .  .  .  .  .  .  .  }
   224  .  .  .  .  .  .  .  .  .  .  .  }
   225  .  .  .  .  .  .  .  .  .  .  }
   226  .  .  .  .  .  .  .  .  .  .  1: *ast.IfStmt {
   227  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   228  .  .  .  .  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
   229  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   230  .  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
   231  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
   232  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   233  .  .  .  .  .  .  .  .  .  .  .  .  }
   234  .  .  .  .  .  .  .  .  .  .  .  .  Op: ""
   235  .  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   236  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   237  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
   238  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "4"
   239  .  .  .  .  .  .  .  .  .  .  .  .  }
   240  .  .  .  .  .  .  .  .  .  .  .  }
   241  .  .  .  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
   242  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   243  .  .  .  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
   244  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   245  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   246  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   247  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   248  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   249  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   250  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   251  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   252  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   253  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   254  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   255  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   256  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   257  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   258  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   259  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   260  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   261  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   262  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   263  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "finish"
   264  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   265  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   266  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   267  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   268  .  .  .  .  .  .  .  .  .  .  .  .  .  1: *ast.BreakStatement {
   269  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   270  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Label: *ast.Ident {
   271  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "whileStmt"
   272  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   273  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   274  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   275  .  .  .  .  .  .  .  .  .  .  .  .  }
   276  .  .  .  .  .  .  .  .  .  .  .  }
   277  .  .  .  .  .  .  .  .  .  .  }
   278  .  .  .  .  .  .  .  .  .  .  2: *ast.IfStmt {
   279  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   280  .  .  .  .  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
   281  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   282  .  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
   283  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
   284  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   285  .  .  .  .  .  .  .  .  .  .  .  .  }
   286  .  .  .  .  .  .  .  .  .  .  .  .  Op: ""
   287  .  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   288  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   289  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
   290  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "2"
   291  .  .  .  .  .  .  .  .  .  .  .  .  }
   292  .  .  .  .  .  .  .  .  .  .  .  }
   293  .  .  .  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
   294  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   295  .  .  .  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
   296  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   297  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   298  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   299  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   300  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   301  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   302  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   303  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   304  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   305  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   306  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   307  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   308  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   309  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   310  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   311  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   312  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   313  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   314  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   315  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "two"
   316  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   317  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   318  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   319  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   320  .  .  .  .  .  .  .  .  .  .  .  .  .  1: *ast.ContinueStatement {
   321  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   322  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Label: *ast.Ident {
   323  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "whileStmt"
   324  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   325  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   326  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   327  .  .  .  .  .  .  .  .  .  .  .  .  }
   328  .  .  .  .  .  .  .  .  .  .  .  }
   329  .  .  .  .  .  .  .  .  .  .  }
   330  .  .  .  .  .  .  .  .  .  }
   331  .  .  .  .  .  .  .  .  }
   332  .  .  .  .  .  .  .  }
   333  .  .  .  .  .  .  }
   334  .  .  .  .  .  }
   335  .  .  .  .  .  1: *ast.WhileStmt {
   336  .  .  .  .  .  .  Position: ast.Position {}
   337  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
   338  .  .  .  .  .  .  .  Position: ast.Position {}
   339  .  .  .  .  .  .  .  Left: *ast.Ident {
   340  .  .  .  .  .  .  .  .  Name: "i"
   341  .  .  .  .  .  .  .  .  Position: ast.Position {}
   342  .  .  .  .  .  .  .  }
   343  .  .  .  .  .  .  .  Op: ""
   344  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   345  .  .  .  .  .  .  .  .  Position: ast.Position {}
   346  .  .  .  .  .  .  .  .  Kind: "number"
   347  .  .  .  .  .  .  .  .  Value: "5"
   348  .  .  .  .  .  .  .  }
   349  .  .  .  .  .  .  }
   350  .  .  .  .  .  .  Body: *ast.BlockStmt {
   351  .  .  .  .  .  .  .  Position: ast.Position {}
   352  .  .  .  .  .  .  .  List: []ast.Stmt (len = 3) {
   353  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   354  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   355  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   356  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   357  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   358  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   359  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   360  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   361  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   362  .  .  .  .  .  .  .  .  .  .  .  }
   363  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   364  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   365  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   366  .  .  .  .  .  .  .  .  .  .  .  }
   367  .  .  .  .  .  .  .  .  .  .  }
   368  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   369  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   370  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   371  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   372  .  .  .  .  .  .  .  .  .  .  .  .  Value: "test"
   373  .  .  .  .  .  .  .  .  .  .  .  }
   374  .  .  .  .  .  .  .  .  .  .  }
   375  .  .  .  .  .  .  .  .  .  }
   376  .  .  .  .  .  .  .  .  }
   377  .  .  .  .  .  .  .  .  1: *ast.IfStmt {
   378  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   379  .  .  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
   380  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   381  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
   382  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
   383  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   384  .  .  .  .  .  .  .  .  .  .  }
   385  .  .  .  .  .  .  .  .  .  .  Op: ""
   386  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   387  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   388  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
   389  .  .  .  .  .  .  .  .  .  .  .  Value: "2"
   390  .  .  .  .  .  .  .  .  .  .  }
   391  .  .  .  .  .  .  .  .  .  }
   392  .  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
   393  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   394  .  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
   395  .  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   396  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   397  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   398  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   399  .  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   400  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   401  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   402  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   403  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   404  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   405  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   406  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   407  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   408  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   409  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   410  .  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   411  .  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   412  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   413  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   414  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "two"
   415  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   416  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   417  .  .  .  .  .  .  .  .  .  .  .  .  }
   418  .  .  .  .  .  .  .  .  .  .  .  }
   419  .  .  .  .  .  .  .  .  .  .  .  1: *ast.ContinueStatement {
   420  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   421  .  .  .  .  .  .  .  .  .  .  .  }
   422  .  .  .  .  .  .  .  .  .  .  }
   423  .  .  .  .  .  .  .  .  .  }
   424  .  .  .  .  .  .  .  .  }
   425  .  .  .  .  .  .  .  .  2: *ast.IfStmt {
   426  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   427  .  .  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
   428  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   429  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
   430  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
   431  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   432  .  .  .  .  .  .  .  .  .  .  }
   433  .  .  .  .  .  .  .  .  .  .  Op: ""
   434  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   435  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   436  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
   437  .  .  .  .  .  .  .  .  .  .  .  Value: "4"
   438  .  .  .  .  .  .  .  .  .  .  }
   439  .  .  .  .  .  .  .  .  .  }
   440  .  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
   441  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   442  .  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
   443  .  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   444  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   445  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   446  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   447  .  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   448  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   449  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   450  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   451  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   452  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   453  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   454  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   455  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   456  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   457  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   458  .  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   459  .  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   460  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   461  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   462  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "finish"
   463  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   464  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   465  .  .  .  .  .  .  .  .  .  .  .  .  }
   466  .  .  .  .  .  .  .  .  .  .  .  }
   467  .  .  .  .  .  .  .  .  .  .  .  1: *ast.BreakStatement {
   468  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   469  .  .  .  .  .  .  .  .  .  .  .  }
   470  .  .  .  .  .  .  .  .  .  .  }
   471  .  .  .  .  .  .  .  .  .  }
   472  .  .  .  .  .  .  .  .  }
   473  .  .  .  .  .  .  .  }
   474  .  .  .  .  .  .  }
   475  .  .  .  .  .  }
   476  .  .  .  .  }
   477  .  .  .  }
   478  .  .  }
   479  .  .  2: *ast.FuncDecl {
   480  .  .  .  Position: ast.Position {}
   481  .  .  .  Name: *ast.Ident {
   482  .  .  .  .  Name: "SwitchStatement"
   483  .  .  .  .  Position: ast.Position {}
   484  .  .  .  }
   485  .  .  .  Type: *ast.FuncType {
   486  .  .  .  .  Position: ast.Position {}
   487  .  .  .  .  Params: *ast.FieldList {
   488  .  .  .  .  .  Position: ast.Position {}
   489  .  .  .  .  }
   490  .  .  .  }
   491  .  .  .  Body: *ast.BlockStmt {
   492  .  .  .  .  Position: ast.Position {}
   493  .  .  .  .  List: []ast.Stmt (len = 2) {
   494  .  .  .  .  .  0: *ast.AssignStmt {
   495  .  .  .  .  .  .  Position: ast.Position {}
   496  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
   497  .  .  .  .  .  .  .  0: *ast.Ident {
   498  .  .  .  .  .  .  .  .  Name: "fruits"
   499  .  .  .  .  .  .  .  .  Position: ast.Position {}
   500  .  .  .  .  .  .  .  }
   501  .  .  .  .  .  .  }
   502  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
   503  .  .  .  .  .  .  .  0: *ast.BasicLit {
   504  .  .  .  .  .  .  .  .  Position: ast.Position {}
   505  .  .  .  .  .  .  .  .  Kind: "string"
   506  .  .  .  .  .  .  .  .  Value: "Oranges"
   507  .  .  .  .  .  .  .  }
   508  .  .  .  .  .  .  }
   509  .  .  .  .  .  }
   510  .  .  .  .  .  1: *ast.SwitchStatement {
   511  .  .  .  .  .  .  Position: ast.Position {}
   512  .  .  .  .  .  .  Value: *ast.Ident {
   513  .  .  .  .  .  .  .  Name: "fruits"
   514  .  .  .  .  .  .  .  Position: ast.Position {}
   515  .  .  .  .  .  .  }
   516  .  .  .  .  .  .  Body: *ast.BlockStmt {
   517  .  .  .  .  .  .  .  Position: ast.Position {}
   518  .  .  .  .  .  .  .  List: []ast.Stmt (len = 4) {
   519  .  .  .  .  .  .  .  .  0: *ast.SwitchCase {
   520  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   521  .  .  .  .  .  .  .  .  .  Cond: *ast.BasicLit {
   522  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   523  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   524  .  .  .  .  .  .  .  .  .  .  Value: "Oranges"
   525  .  .  .  .  .  .  .  .  .  }
   526  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 2) {
   527  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   528  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   529  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   530  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   531  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   532  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   533  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   534  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   535  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   536  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   537  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   538  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   539  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   540  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   541  .  .  .  .  .  .  .  .  .  .  .  .  }
   542  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   543  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   544  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   545  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   546  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "Oranges"
   547  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   548  .  .  .  .  .  .  .  .  .  .  .  .  }
   549  .  .  .  .  .  .  .  .  .  .  .  }
   550  .  .  .  .  .  .  .  .  .  .  }
   551  .  .  .  .  .  .  .  .  .  .  1: *ast.BreakStatement {
   552  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   553  .  .  .  .  .  .  .  .  .  .  }
   554  .  .  .  .  .  .  .  .  .  }
   555  .  .  .  .  .  .  .  .  }
   556  .  .  .  .  .  .  .  .  1: *ast.SwitchCase {
   557  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   558  .  .  .  .  .  .  .  .  .  Cond: *ast.BasicLit {
   559  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   560  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   561  .  .  .  .  .  .  .  .  .  .  Value: "Mangoes"
   562  .  .  .  .  .  .  .  .  .  }
   563  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 2) {
   564  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   565  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   566  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   567  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   568  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   569  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   570  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   571  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   572  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   573  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   574  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   575  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   576  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   577  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   578  .  .  .  .  .  .  .  .  .  .  .  .  }
   579  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   580  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   581  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   582  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   583  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "Mangoes"
   584  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   585  .  .  .  .  .  .  .  .  .  .  .  .  }
   586  .  .  .  .  .  .  .  .  .  .  .  }
   587  .  .  .  .  .  .  .  .  .  .  }
   588  .  .  .  .  .  .  .  .  .  .  1: *ast.BreakStatement {
   589  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   590  .  .  .  .  .  .  .  .  .  .  }
   591  .  .  .  .  .  .  .  .  .  }
   592  .  .  .  .  .  .  .  .  }
   593  .  .  .  .  .  .  .  .  2: *ast.SwitchCase {
   594  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   595  .  .  .  .  .  .  .  .  .  Cond: *ast.BasicLit {
   596  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   597  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   598  .  .  .  .  .  .  .  .  .  .  Value: "Papayas"
   599  .  .  .  .  .  .  .  .  .  }
   600  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 2) {
   601  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   602  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   603  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   604  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   605  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   606  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   607  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   608  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   609  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   610  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   611  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   612  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   613  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   614  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   615  .  .  .  .  .  .  .  .  .  .  .  .  }
   616  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   617  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   618  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   619  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   620  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "Papayas"
   621  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   622  .  .  .  .  .  .  .  .  .  .  .  .  }
   623  .  .  .  .  .  .  .  .  .  .  .  }
   624  .  .  .  .  .  .  .  .  .  .  }
   625  .  .  .  .  .  .  .  .  .  .  1: *ast.BreakStatement {
   626  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   627  .  .  .  .  .  .  .  .  .  .  }
   628  .  .  .  .  .  .  .  .  .  }
   629  .  .  .  .  .  .  .  .  }
   630  .  .  .  .  .  .  .  .  3: *ast.SwitchDefault {
   631  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   632  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 1) {
   633  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   634  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   635  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   636  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   637  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   638  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   639  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   640  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   641  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   642  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   643  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   644  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   645  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   646  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   647  .  .  .  .  .  .  .  .  .  .  .  .  }
   648  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   649  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   650  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   651  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   652  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "No fruits"
   653  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   654  .  .  .  .  .  .  .  .  .  .  .  .  }
   655  .  .  .  .  .  .  .  .  .  .  .  }
   656  .  .  .  .  .  .  .  .  .  .  }
   657  .  .  .  .  .  .  .  .  .  }
   658  .  .  .  .  .  .  .  .  }
   659  .  .  .  .  .  .  .  }
   660  .  .  .  .  .  .  }
   661  .  .  .  .  .  }
   662  .  .  .  .  }
   663  .  .  .  }
   664  .  .  }
   665  .  .  3: *ast.FuncDecl {
   666  .  .  .  Position: ast.Position {}
   667  .  .  .  Name: *ast.Ident {
   668  .  .  .  .  Name: "ForStatement"
   669  .  .  .  .  Position: ast.Position {}
   670  .  .  .  }
   671  .  .  .  Type: *ast.FuncType {
   672  .  .  .  .  Position: ast.Position {}
   673  .  .  .  .  Params: *ast.FieldList {
   674  .  .  .  .  .  Position: ast.Position {}
   675  .  .  .  .  }
   676  .  .  .  }
   677  .  .  .  Body: *ast.BlockStmt {
   678  .  .  .  .  Position: ast.Position {}
   679  .  .  .  .  List: []ast.Stmt (len = 1) {
   680  .  .  .  .  .  0: *ast.ForStatement {
   681  .  .  .  .  .  .  Position: ast.Position {}
   682  .  .  .  .  .  .  VarDecl: *ast.AssignStmt {
   683  .  .  .  .  .  .  .  Position: ast.Position {}
   684  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
   685  .  .  .  .  .  .  .  .  0: *ast.Ident {
   686  .  .  .  .  .  .  .  .  .  Name: "i"
   687  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   688  .  .  .  .  .  .  .  .  }
   689  .  .  .  .  .  .  .  }
   690  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
   691  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   692  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   693  .  .  .  .  .  .  .  .  .  Kind: "number"
   694  .  .  .  .  .  .  .  .  .  Value: "0"
   695  .  .  .  .  .  .  .  .  }
   696  .  .  .  .  .  .  .  }
   697  .  .  .  .  .  .  }
   698  .  .  .  .  .  .  Cond: *ast.ExprStmt {
   699  .  .  .  .  .  .  .  Position: ast.Position {}
   700  .  .  .  .  .  .  .  Expr: *ast.BinaryExpr {
   701  .  .  .  .  .  .  .  .  Position: ast.Position {}
   702  .  .  .  .  .  .  .  .  Left: *ast.Ident {
   703  .  .  .  .  .  .  .  .  .  Name: "i"
   704  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   705  .  .  .  .  .  .  .  .  }
   706  .  .  .  .  .  .  .  .  Op: ""
   707  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   708  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   709  .  .  .  .  .  .  .  .  .  Kind: "number"
   710  .  .  .  .  .  .  .  .  .  Value: "9"
   711  .  .  .  .  .  .  .  .  }
   712  .  .  .  .  .  .  .  }
   713  .  .  .  .  .  .  }
   714  .  .  .  .  .  .  Increment: *ast.IncExpr {
   715  .  .  .  .  .  .  .  Position: ast.Position {}
   716  .  .  .  .  .  .  .  Arg: *ast.Ident {
   717  .  .  .  .  .  .  .  .  Name: "i"
   718  .  .  .  .  .  .  .  .  Position: ast.Position {}
   719  .  .  .  .  .  .  .  }
   720  .  .  .  .  .  .  }
   721  .  .  .  .  .  .  Body: *ast.BlockStmt {
   722  .  .  .  .  .  .  .  Position: ast.Position {}
   723  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
   724  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   725  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   726  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   727  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   728  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   729  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   730  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   731  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   732  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   733  .  .  .  .  .  .  .  .  .  .  .  }
   734  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   735  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   736  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   737  .  .  .  .  .  .  .  .  .  .  .  }
   738  .  .  .  .  .  .  .  .  .  .  }
   739  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   740  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   741  .  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
   742  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   743  .  .  .  .  .  .  .  .  .  .  .  }
   744  .  .  .  .  .  .  .  .  .  .  }
   745  .  .  .  .  .  .  .  .  .  }
   746  .  .  .  .  .  .  .  .  }
   747  .  .  .  .  .  .  .  }
   748  .  .  .  .  .  .  }
   749  .  .  .  .  .  }
   750  .  .  .  .  }
   751  .  .  .  }
   752  .  .  }
   753  .  .  4: *ast.FuncDecl {
   754  .  .  .  Position: ast.Position {}
   755  .  .  .  Name: *ast.Ident {
   756  .  .  .  .  Name: "ForInStatement"
   757  .  .  .  .  Position: ast.Position {}
   758  .  .  .  }
   759  .  .  .  Type: *ast.FuncType {
   760  .  .  .  .  Position: ast.Position {}
   761  .  .  .  .  Params: *ast.FieldList {
   762  .  .  .  .  .  Position: ast.Position {}
   763  .  .  .  .  }
   764  .  .  .  }
   765  .  .  .  Body: *ast.BlockStmt {
   766  .  .  .  .  Position: ast.Position {}
   767  .  .  .  .  List: []ast.Stmt (len = 2) {
   768  .  .  .  .  .  0: *ast.AssignStmt {
   769  .  .  .  .  .  .  Position: ast.Position {}
   770  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
   771  .  .  .  .  .  .  .  0: *ast.Ident {
   772  .  .  .  .  .  .  .  .  Name: "values"
   773  .  .  .  .  .  .  .  .  Position: ast.Position {}
   774  .  .  .  .  .  .  .  }
   775  .  .  .  .  .  .  }
   776  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
   777  .  .  .  .  .  .  .  0: *ast.ObjectExpr {
   778  .  .  .  .  .  .  .  .  Position: ast.Position {}
   779  .  .  .  .  .  .  .  .  Elts: []ast.Expr (len = 3) {
   780  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   781  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   782  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   783  .  .  .  .  .  .  .  .  .  .  Value: "a"
   784  .  .  .  .  .  .  .  .  .  }
   785  .  .  .  .  .  .  .  .  .  1: *ast.BasicLit {
   786  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   787  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   788  .  .  .  .  .  .  .  .  .  .  Value: "b"
   789  .  .  .  .  .  .  .  .  .  }
   790  .  .  .  .  .  .  .  .  .  2: *ast.BasicLit {
   791  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   792  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   793  .  .  .  .  .  .  .  .  .  .  Value: "c"
   794  .  .  .  .  .  .  .  .  .  }
   795  .  .  .  .  .  .  .  .  }
   796  .  .  .  .  .  .  .  }
   797  .  .  .  .  .  .  }
   798  .  .  .  .  .  }
   799  .  .  .  .  .  1: *ast.ForInStatement {
   800  .  .  .  .  .  .  Position: ast.Position {}
   801  .  .  .  .  .  .  Left: *ast.Ident {
   802  .  .  .  .  .  .  .  Name: "value"
   803  .  .  .  .  .  .  .  Position: ast.Position {}
   804  .  .  .  .  .  .  }
   805  .  .  .  .  .  .  Right: *ast.Ident {
   806  .  .  .  .  .  .  .  Name: "values"
   807  .  .  .  .  .  .  .  Position: ast.Position {}
   808  .  .  .  .  .  .  }
   809  .  .  .  .  .  .  Body: *ast.BlockStmt {
   810  .  .  .  .  .  .  .  Position: ast.Position {}
   811  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
   812  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   813  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   814  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   815  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   816  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   817  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   818  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   819  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   820  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   821  .  .  .  .  .  .  .  .  .  .  .  }
   822  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   823  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   824  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   825  .  .  .  .  .  .  .  .  .  .  .  }
   826  .  .  .  .  .  .  .  .  .  .  }
   827  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   828  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   829  .  .  .  .  .  .  .  .  .  .  .  .  Name: "value"
   830  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   831  .  .  .  .  .  .  .  .  .  .  .  }
   832  .  .  .  .  .  .  .  .  .  .  }
   833  .  .  .  .  .  .  .  .  .  }
   834  .  .  .  .  .  .  .  .  }
   835  .  .  .  .  .  .  .  }
   836  .  .  .  .  .  .  }
   837  .  .  .  .  .  }
   838  .  .  .  .  }
   839  .  .  .  }
   840  .  .  }
   841  .  .  5: *ast.FuncDecl {
   842  .  .  .  Position: ast.Position {}
   843  .  .  .  Name: *ast.Ident {
   844  .  .  .  .  Name: "ExportStatement"
   845  .  .  .  .  Position: ast.Position {}
   846  .  .  .  }
   847  .  .  .  Type: *ast.FuncType {
   848  .  .  .  .  Position: ast.Position {}
   849  .  .  .  .  Params: *ast.FieldList {
   850  .  .  .  .  .  Position: ast.Position {}
   851  .  .  .  .  }
   852  .  .  .  }
   853  .  .  .  Body: *ast.BlockStmt {
   854  .  .  .  .  Position: ast.Position {}
   855  .  .  .  .  List: []ast.Stmt (len = 15) {
   856  .  .  .  .  .  0: *ast.ExportStatement {
   857  .  .  .  .  .  .  Position: ast.Position {}
   858  .  .  .  .  .  .  Decl: *ast.ValueDecl {
   859  .  .  .  .  .  .  .  Position: ast.Position {}
   860  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 3) {
   861  .  .  .  .  .  .  .  .  0: *ast.Ident {
   862  .  .  .  .  .  .  .  .  .  Name: "test1"
   863  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   864  .  .  .  .  .  .  .  .  }
   865  .  .  .  .  .  .  .  .  1: *ast.Ident {
   866  .  .  .  .  .  .  .  .  .  Name: "test2"
   867  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   868  .  .  .  .  .  .  .  .  }
   869  .  .  .  .  .  .  .  .  2: *ast.Ident {
   870  .  .  .  .  .  .  .  .  .  Name: "test3"
   871  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   872  .  .  .  .  .  .  .  .  }
   873  .  .  .  .  .  .  .  }
   874  .  .  .  .  .  .  }
   875  .  .  .  .  .  }
   876  .  .  .  .  .  1: *ast.ExportStatement {
   877  .  .  .  .  .  .  Position: ast.Position {}
   878  .  .  .  .  .  .  Decl: *ast.ValueDecl {
   879  .  .  .  .  .  .  .  Position: ast.Position {}
   880  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 3) {
   881  .  .  .  .  .  .  .  .  0: *ast.Ident {
   882  .  .  .  .  .  .  .  .  .  Name: "test4"
   883  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   884  .  .  .  .  .  .  .  .  }
   885  .  .  .  .  .  .  .  .  1: *ast.Ident {
   886  .  .  .  .  .  .  .  .  .  Name: "test5"
   887  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   888  .  .  .  .  .  .  .  .  }
   889  .  .  .  .  .  .  .  .  2: *ast.Ident {
   890  .  .  .  .  .  .  .  .  .  Name: "test6"
   891  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   892  .  .  .  .  .  .  .  .  }
   893  .  .  .  .  .  .  .  }
   894  .  .  .  .  .  .  .  Values: []ast.Expr (len = 2) {
   895  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   896  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   897  .  .  .  .  .  .  .  .  .  Kind: "string"
   898  .  .  .  .  .  .  .  .  .  Value: "test4"
   899  .  .  .  .  .  .  .  .  }
   900  .  .  .  .  .  .  .  .  1: *ast.BasicLit {
   901  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   902  .  .  .  .  .  .  .  .  .  Kind: "string"
   903  .  .  .  .  .  .  .  .  .  Value: "test5"
   904  .  .  .  .  .  .  .  .  }
   905  .  .  .  .  .  .  .  }
   906  .  .  .  .  .  .  }
   907  .  .  .  .  .  }
   908  .  .  .  .  .  2: *ast.ExportStatement {
   909  .  .  .  .  .  .  Position: ast.Position {}
   910  .  .  .  .  .  .  Decl: *ast.FuncDecl {
   911  .  .  .  .  .  .  .  Position: ast.Position {}
   912  .  .  .  .  .  .  .  Name: *ast.Ident {
   913  .  .  .  .  .  .  .  .  Name: "testFunc1"
   914  .  .  .  .  .  .  .  .  Position: ast.Position {}
   915  .  .  .  .  .  .  .  }
   916  .  .  .  .  .  .  .  Type: *ast.FuncType {
   917  .  .  .  .  .  .  .  .  Position: ast.Position {}
   918  .  .  .  .  .  .  .  .  Params: *ast.FieldList {
   919  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   920  .  .  .  .  .  .  .  .  }
   921  .  .  .  .  .  .  .  }
   922  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
   923  .  .  .  .  .  .  .  .  Position: ast.Position {}
   924  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
   925  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   926  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   927  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   928  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   929  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   930  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   931  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   932  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   933  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   934  .  .  .  .  .  .  .  .  .  .  .  .  }
   935  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   936  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   937  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   938  .  .  .  .  .  .  .  .  .  .  .  .  }
   939  .  .  .  .  .  .  .  .  .  .  .  }
   940  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   941  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   942  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   943  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   944  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "test"
   945  .  .  .  .  .  .  .  .  .  .  .  .  }
   946  .  .  .  .  .  .  .  .  .  .  .  }
   947  .  .  .  .  .  .  .  .  .  .  }
   948  .  .  .  .  .  .  .  .  .  }
   949  .  .  .  .  .  .  .  .  }
   950  .  .  .  .  .  .  .  }
   951  .  .  .  .  .  .  }
   952  .  .  .  .  .  }
   953  .  .  .  .  .  3: *ast.ExportStatement {
   954  .  .  .  .  .  .  Position: ast.Position {}
   955  .  .  .  .  .  .  Decl: *ast.ClassDecl {
   956  .  .  .  .  .  .  .  Position: ast.Position {}
   957  .  .  .  .  .  .  .  Name: *ast.Ident {
   958  .  .  .  .  .  .  .  .  Name: "TestExportClass"
   959  .  .  .  .  .  .  .  .  Position: ast.Position {}
   960  .  .  .  .  .  .  .  }
   961  .  .  .  .  .  .  .  Body: *ast.BodyDecl {
   962  .  .  .  .  .  .  .  .  Position: ast.Position {}
   963  .  .  .  .  .  .  .  .  List: []ast.Decl (len = 1) {
   964  .  .  .  .  .  .  .  .  .  0: *ast.FuncDecl {
   965  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   966  .  .  .  .  .  .  .  .  .  .  Name: *ast.Ident {
   967  .  .  .  .  .  .  .  .  .  .  .  Name: "constructor"
   968  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   969  .  .  .  .  .  .  .  .  .  .  }
   970  .  .  .  .  .  .  .  .  .  .  Type: *ast.FuncType {
   971  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   972  .  .  .  .  .  .  .  .  .  .  .  Params: *ast.FieldList {
   973  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   974  .  .  .  .  .  .  .  .  .  .  .  }
   975  .  .  .  .  .  .  .  .  .  .  }
   976  .  .  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
   977  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   978  .  .  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
   979  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   980  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   981  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   982  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   983  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   984  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   985  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   986  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   987  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   988  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   989  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   990  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   991  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   992  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   993  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   994  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   995  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   996  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   997  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   998  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "test"
   999  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1000  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1001  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1002  .  .  .  .  .  .  .  .  .  .  .  .  }
  1003  .  .  .  .  .  .  .  .  .  .  .  }
  1004  .  .  .  .  .  .  .  .  .  .  }
  1005  .  .  .  .  .  .  .  .  .  }
  1006  .  .  .  .  .  .  .  .  }
  1007  .  .  .  .  .  .  .  }
  1008  .  .  .  .  .  .  }
  1009  .  .  .  .  .  }
  1010  .  .  .  .  .  4: *ast.ExportStatement {
  1011  .  .  .  .  .  .  Position: ast.Position {}
  1012  .  .  .  .  .  .  ExportClause: *ast.ExportClause {
  1013  .  .  .  .  .  .  .  Position: ast.Position {}
  1014  .  .  .  .  .  .  .  Specifiers: []ast.Stmt (len = 3) {
  1015  .  .  .  .  .  .  .  .  0: *ast.ExportSpecifier {
  1016  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1017  .  .  .  .  .  .  .  .  .  Name: *ast.Ident {
  1018  .  .  .  .  .  .  .  .  .  .  Name: "test7"
  1019  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1020  .  .  .  .  .  .  .  .  .  }
  1021  .  .  .  .  .  .  .  .  }
  1022  .  .  .  .  .  .  .  .  1: *ast.ExportSpecifier {
  1023  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1024  .  .  .  .  .  .  .  .  .  Name: *ast.Ident {
  1025  .  .  .  .  .  .  .  .  .  .  Name: "test8"
  1026  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1027  .  .  .  .  .  .  .  .  .  }
  1028  .  .  .  .  .  .  .  .  }
  1029  .  .  .  .  .  .  .  .  2: *ast.ExportSpecifier {
  1030  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1031  .  .  .  .  .  .  .  .  .  Name: *ast.Ident {
  1032  .  .  .  .  .  .  .  .  .  .  Name: "test9"
  1033  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1034  .  .  .  .  .  .  .  .  .  }
  1035  .  .  .  .  .  .  .  .  }
  1036  .  .  .  .  .  .  .  }
  1037  .  .  .  .  .  .  }
  1038  .  .  .  .  .  }
  1039  .  .  .  .  .  5: *ast.ExportStatement {
  1040  .  .  .  .  .  .  Position: ast.Position {}
  1041  .  .  .  .  .  .  ExportClause: *ast.ExportClause {
  1042  .  .  .  .  .  .  .  Position: ast.Position {}
  1043  .  .  .  .  .  .  .  Specifiers: []ast.Stmt (len = 3) {
  1044  .  .  .  .  .  .  .  .  0: *ast.ExportSpecifier {
  1045  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1046  .  .  .  .  .  .  .  .  .  Name: *ast.Ident {
  1047  .  .  .  .  .  .  .  .  .  .  Name: "test10"
  1048  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1049  .  .  .  .  .  .  .  .  .  }
  1050  .  .  .  .  .  .  .  .  .  Alias: *ast.Ident {
  1051  .  .  .  .  .  .  .  .  .  .  Name: "alias10"
  1052  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1053  .  .  .  .  .  .  .  .  .  }
  1054  .  .  .  .  .  .  .  .  }
  1055  .  .  .  .  .  .  .  .  1: *ast.ExportSpecifier {
  1056  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1057  .  .  .  .  .  .  .  .  .  Name: *ast.Ident {
  1058  .  .  .  .  .  .  .  .  .  .  Name: "test11"
  1059  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1060  .  .  .  .  .  .  .  .  .  }
  1061  .  .  .  .  .  .  .  .  .  Alias: *ast.Ident {
  1062  .  .  .  .  .  .  .  .  .  .  Name: "alias11"
  1063  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1064  .  .  .  .  .  .  .  .  .  }
  1065  .  .  .  .  .  .  .  .  }
  1066  .  .  .  .  .  .  .  .  2: *ast.ExportSpecifier {
  1067  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1068  .  .  .  .  .  .  .  .  .  Name: *ast.Ident {
  1069  .  .  .  .  .  .  .  .  .  .  Name: "test12"
  1070  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1071  .  .  .  .  .  .  .  .  .  }
  1072  .  .  .  .  .  .  .  .  }
  1073  .  .  .  .  .  .  .  }
  1074  .  .  .  .  .  .  }
  1075  .  .  .  .  .  }
  1076  .  .  .  .  .  6: *ast.ExportStatement {
  1077  .  .  .  .  .  .  Position: ast.Position {}
  1078  .  .  .  .  .  .  Ident: *ast.Ident {
  1079  .  .  .  .  .  .  .  Name: "test13"
  1080  .  .  .  .  .  .  .  Position: ast.Position {}
  1081  .  .  .  .  .  .  }
  1082  .  .  .  .  .  }
  1083  .  .  .  .  .  7: *ast.ExportStatement {
  1084  .  .  .  .  .  .  Position: ast.Position {}
  1085  .  .  .  .  .  .  Ident: *ast.FuncLit {
  1086  .  .  .  .  .  .  .  Position: ast.Position {}
  1087  .  .  .  .  .  .  .  Type: *ast.FuncType {
  1088  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1089  .  .  .  .  .  .  .  .  Params: *ast.FieldList {
  1090  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1091  .  .  .  .  .  .  .  .  }
  1092  .  .  .  .  .  .  .  }
  1093  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
  1094  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1095  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
  1096  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
  1097  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1098  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
  1099  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1100  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1101  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1102  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  1103  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
  1104  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1105  .  .  .  .  .  .  .  .  .  .  .  .  }
  1106  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1107  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
  1108  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1109  .  .  .  .  .  .  .  .  .  .  .  .  }
  1110  .  .  .  .  .  .  .  .  .  .  .  }
  1111  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  1112  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1113  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1114  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  1115  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "test"
  1116  .  .  .  .  .  .  .  .  .  .  .  .  }
  1117  .  .  .  .  .  .  .  .  .  .  .  }
  1118  .  .  .  .  .  .  .  .  .  .  }
  1119  .  .  .  .  .  .  .  .  .  }
  1120  .  .  .  .  .  .  .  .  }
  1121  .  .  .  .  .  .  .  }
  1122  .  .  .  .  .  .  }
  1123  .  .  .  .  .  }
  1124  .  .  .  .  .  8: *ast.ExportStatement {
  1125  .  .  .  .  .  .  Position: ast.Position {}
  1126  .  .  .  .  .  .  Ident: *ast.FuncLit {
  1127  .  .  .  .  .  .  .  Position: ast.Position {}
  1128  .  .  .  .  .  .  .  Type: *ast.FuncType {
  1129  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1130  .  .  .  .  .  .  .  .  Params: *ast.FieldList {
  1131  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1132  .  .  .  .  .  .  .  .  }
  1133  .  .  .  .  .  .  .  }
  1134  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
  1135  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1136  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
  1137  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
  1138  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1139  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
  1140  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1141  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1142  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1143  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  1144  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
  1145  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1146  .  .  .  .  .  .  .  .  .  .  .  .  }
  1147  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1148  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
  1149  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1150  .  .  .  .  .  .  .  .  .  .  .  .  }
  1151  .  .  .  .  .  .  .  .  .  .  .  }
  1152  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  1153  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1154  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1155  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  1156  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "test"
  1157  .  .  .  .  .  .  .  .  .  .  .  .  }
  1158  .  .  .  .  .  .  .  .  .  .  .  }
  1159  .  .  .  .  .  .  .  .  .  .  }
  1160  .  .  .  .  .  .  .  .  .  }
  1161  .  .  .  .  .  .  .  .  }
  1162  .  .  .  .  .  .  .  }
  1163  .  .  .  .  .  .  }
  1164  .  .  .  .  .  }
  1165  .  .  .  .  .  9: *ast.ExportStatement {
  1166  .  .  .  .  .  .  Position: ast.Position {}
  1167  .  .  .  .  .  .  ExportClause: *ast.ExportClause {
  1168  .  .  .  .  .  .  .  Position: ast.Position {}
  1169  .  .  .  .  .  .  .  Specifiers: []ast.Stmt (len = 2) {
  1170  .  .  .  .  .  .  .  .  0: *ast.ExportSpecifier {
  1171  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1172  .  .  .  .  .  .  .  .  .  Name: *ast.Ident {
  1173  .  .  .  .  .  .  .  .  .  .  Name: "name14"
  1174  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1175  .  .  .  .  .  .  .  .  .  }
  1176  .  .  .  .  .  .  .  .  .  Alias: *ast.Ident {
  1177  .  .  .  .  .  .  .  .  .  .  Name: "default"
  1178  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1179  .  .  .  .  .  .  .  .  .  }
  1180  .  .  .  .  .  .  .  .  }
  1181  .  .  .  .  .  .  .  .  1: *ast.ExportSpecifier {
  1182  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1183  .  .  .  .  .  .  .  .  .  Name: *ast.Ident {
  1184  .  .  .  .  .  .  .  .  .  .  Name: "nome15"
  1185  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1186  .  .  .  .  .  .  .  .  .  }
  1187  .  .  .  .  .  .  .  .  }
  1188  .  .  .  .  .  .  .  }
  1189  .  .  .  .  .  .  }
  1190  .  .  .  .  .  }
  1191  .  .  .  .  .  10: *ast.ExportStatement {
  1192  .  .  .  .  .  .  Position: ast.Position {}
  1193  .  .  .  .  .  .  Source: *ast.BasicLit {
  1194  .  .  .  .  .  .  .  Position: ast.Position {}
  1195  .  .  .  .  .  .  .  Kind: "string"
  1196  .  .  .  .  .  .  .  Value: "test1.js"
  1197  .  .  .  .  .  .  }
  1198  .  .  .  .  .  }
  1199  .  .  .  .  .  11: *ast.ExportStatement {
  1200  .  .  .  .  .  .  Position: ast.Position {}
  1201  .  .  .  .  .  .  Source: *ast.BasicLit {
  1202  .  .  .  .  .  .  .  Position: ast.Position {}
  1203  .  .  .  .  .  .  .  Kind: "string"
  1204  .  .  .  .  .  .  .  Value: "test2.js"
  1205  .  .  .  .  .  .  }
  1206  .  .  .  .  .  }
  1207  .  .  .  .  .  12: *ast.ExportStatement {
  1208  .  .  .  .  .  .  Position: ast.Position {}
  1209  .  .  .  .  .  .  ExportClause: *ast.ExportClause {
  1210  .  .  .  .  .  .  .  Position: ast.Position {}
  1211  .  .  .  .  .  .  .  Specifiers: []ast.Stmt (len = 3) {
  1212  .  .  .  .  .  .  .  .  0: *ast.ExportSpecifier {
  1213  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1214  .  .  .  .  .  .  .  .  .  Name: *ast.Ident {
  1215  .  .  .  .  .  .  .  .  .  .  Name: "name17"
  1216  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1217  .  .  .  .  .  .  .  .  .  }
  1218  .  .  .  .  .  .  .  .  }
  1219  .  .  .  .  .  .  .  .  1: *ast.ExportSpecifier {
  1220  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1221  .  .  .  .  .  .  .  .  .  Name: *ast.Ident {
  1222  .  .  .  .  .  .  .  .  .  .  Name: "name18"
  1223  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1224  .  .  .  .  .  .  .  .  .  }
  1225  .  .  .  .  .  .  .  .  }
  1226  .  .  .  .  .  .  .  .  2: *ast.ExportSpecifier {
  1227  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1228  .  .  .  .  .  .  .  .  .  Name: *ast.Ident {
  1229  .  .  .  .  .  .  .  .  .  .  Name: "name19"
  1230  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1231  .  .  .  .  .  .  .  .  .  }
  1232  .  .  .  .  .  .  .  .  }
  1233  .  .  .  .  .  .  .  }
  1234  .  .  .  .  .  .  }
  1235  .  .  .  .  .  .  Source: *ast.BasicLit {
  1236  .  .  .  .  .  .  .  Position: ast.Position {}
  1237  .  .  .  .  .  .  .  Kind: "string"
  1238  .  .  .  .  .  .  .  Value: "test3.js"
  1239  .  .  .  .  .  .  }
  1240  .  .  .  .  .  }
  1241  .  .  .  .  .  13: *ast.ExportStatement {
  1242  .  .  .  .  .  .  Position: ast.Position {}
  1243  .  .  .  .  .  .  ExportClause: *ast.ExportClause {
  1244  .  .  .  .  .  .  .  Position: ast.Position {}
  1245  .  .  .  .  .  .  .  Specifiers: []ast.Stmt (len = 3) {
  1246  .  .  .  .  .  .  .  .  0: *ast.ExportSpecifier {
  1247  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1248  .  .  .  .  .  .  .  .  .  Name: *ast.Ident {
  1249  .  .  .  .  .  .  .  .  .  .  Name: "name20"
  1250  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1251  .  .  .  .  .  .  .  .  .  }
  1252  .  .  .  .  .  .  .  .  .  Alias: *ast.Ident {
  1253  .  .  .  .  .  .  .  .  .  .  Name: "alias20"
  1254  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1255  .  .  .  .  .  .  .  .  .  }
  1256  .  .  .  .  .  .  .  .  }
  1257  .  .  .  .  .  .  .  .  1: *ast.ExportSpecifier {
  1258  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1259  .  .  .  .  .  .  .  .  .  Name: *ast.Ident {
  1260  .  .  .  .  .  .  .  .  .  .  Name: "name21"
  1261  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1262  .  .  .  .  .  .  .  .  .  }
  1263  .  .  .  .  .  .  .  .  .  Alias: *ast.Ident {
  1264  .  .  .  .  .  .  .  .  .  .  Name: "alias21"
  1265  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1266  .  .  .  .  .  .  .  .  .  }
  1267  .  .  .  .  .  .  .  .  }
  1268  .  .  .  .  .  .  .  .  2: *ast.ExportSpecifier {
  1269  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1270  .  .  .  .  .  .  .  .  .  Name: *ast.Ident {
  1271  .  .  .  .  .  .  .  .  .  .  Name: "name22"
  1272  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1273  .  .  .  .  .  .  .  .  .  }
  1274  .  .  .  .  .  .  .  .  }
  1275  .  .  .  .  .  .  .  }
  1276  .  .  .  .  .  .  }
  1277  .  .  .  .  .  .  Source: *ast.BasicLit {
  1278  .  .  .  .  .  .  .  Position: ast.Position {}
  1279  .  .  .  .  .  .  .  Kind: "string"
  1280  .  .  .  .  .  .  .  Value: "test4.js"
  1281  .  .  .  .  .  .  }
  1282  .  .  .  .  .  }
  1283  .  .  .  .  .  14: *ast.ExportStatement {
  1284  .  .  .  .  .  .  Position: ast.Position {}
  1285  .  .  .  .  .  .  ExportClause: *ast.ExportClause {
  1286  .  .  .  .  .  .  .  Position: ast.Position {}
  1287  .  .  .  .  .  .  .  Specifiers: []ast.Stmt (len = 2) {
  1288  .  .  .  .  .  .  .  .  0: *ast.ExportSpecifier {
  1289  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1290  .  .  .  .  .  .  .  .  .  Name: *ast.Ident {
  1291  .  .  .  .  .  .  .  .  .  .  Name: "default"
  1292  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1293  .  .  .  .  .  .  .  .  .  }
  1294  .  .  .  .  .  .  .  .  }
  1295  .  .  .  .  .  .  .  .  1: *ast.ExportSpecifier {
  1296  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1297  .  .  .  .  .  .  .  .  .  Name: *ast.Ident {
  1298  .  .  .  .  .  .  .  .  .  .  Name: "name23"
  1299  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1300  .  .  .  .  .  .  .  .  .  }
  1301  .  .  .  .  .  .  .  .  }
  1302  .  .  .  .  .  .  .  }
  1303  .  .  .  .  .  .  }
  1304  .  .  .  .  .  .  Source: *ast.BasicLit {
  1305  .  .  .  .  .  .  .  Position: ast.Position {}
  1306  .  .  .  .  .  .  .  Kind: "string"
  1307  .  .  .  .  .  .  .  Value: "test5.js"
  1308  .  .  .  .  .  .  }
  1309  .  .  .  .  .  }
  1310  .  .  .  .  }
  1311  .  .  .  }
  1312  .  .  }
  1313  .  }
  1314  }
