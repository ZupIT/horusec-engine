     0  *ast.File {
     1  .  Position: ast.Position {}
     2  .  Name: *ast.Ident {
     3  .  .  Name: "statements.js"
     4  .  .  Position: ast.Position {}
     5  .  }
     6  .  Decls: []ast.Decl (len = 13) {
     7  .  .  0: *ast.FuncDecl {
     8  .  .  .  Position: ast.Position {}
     9  .  .  .  Name: *ast.Ident {
    10  .  .  .  .  Name: "IfStatement"
    11  .  .  .  .  Position: ast.Position {}
    12  .  .  .  }
    13  .  .  .  Type: *ast.FuncType {
    14  .  .  .  .  Position: ast.Position {}
    15  .  .  .  .  Params: *ast.FieldList {
    16  .  .  .  .  .  Position: ast.Position {}
    17  .  .  .  .  .  List: []*ast.Field (len = 2) {
    18  .  .  .  .  .  .  0: *ast.Field {
    19  .  .  .  .  .  .  .  Position: ast.Position {}
    20  .  .  .  .  .  .  .  Name: *ast.Ident {
    21  .  .  .  .  .  .  .  .  Name: "a"
    22  .  .  .  .  .  .  .  .  Position: ast.Position {}
    23  .  .  .  .  .  .  .  }
    24  .  .  .  .  .  .  }
    25  .  .  .  .  .  .  1: *ast.Field {
    26  .  .  .  .  .  .  .  Position: ast.Position {}
    27  .  .  .  .  .  .  .  Name: *ast.Ident {
    28  .  .  .  .  .  .  .  .  Name: "b"
    29  .  .  .  .  .  .  .  .  Position: ast.Position {}
    30  .  .  .  .  .  .  .  }
    31  .  .  .  .  .  .  }
    32  .  .  .  .  .  }
    33  .  .  .  .  }
    34  .  .  .  }
    35  .  .  .  Body: *ast.BlockStmt {
    36  .  .  .  .  Position: ast.Position {}
    37  .  .  .  .  List: []ast.Stmt (len = 2) {
    38  .  .  .  .  .  0: *ast.IfStmt {
    39  .  .  .  .  .  .  Position: ast.Position {}
    40  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
    41  .  .  .  .  .  .  .  Position: ast.Position {}
    42  .  .  .  .  .  .  .  Left: *ast.Ident {
    43  .  .  .  .  .  .  .  .  Name: "a"
    44  .  .  .  .  .  .  .  .  Position: ast.Position {}
    45  .  .  .  .  .  .  .  }
    46  .  .  .  .  .  .  .  Op: ">="
    47  .  .  .  .  .  .  .  Right: *ast.BasicLit {
    48  .  .  .  .  .  .  .  .  Position: ast.Position {}
    49  .  .  .  .  .  .  .  .  Kind: "number"
    50  .  .  .  .  .  .  .  .  Value: "10"
    51  .  .  .  .  .  .  .  }
    52  .  .  .  .  .  .  }
    53  .  .  .  .  .  .  Body: *ast.BlockStmt {
    54  .  .  .  .  .  .  .  Position: ast.Position {}
    55  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
    56  .  .  .  .  .  .  .  .  0: *ast.AssignStmt {
    57  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    58  .  .  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
    59  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
    60  .  .  .  .  .  .  .  .  .  .  .  Name: "a"
    61  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    62  .  .  .  .  .  .  .  .  .  .  }
    63  .  .  .  .  .  .  .  .  .  }
    64  .  .  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
    65  .  .  .  .  .  .  .  .  .  .  0: *ast.BinaryExpr {
    66  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    67  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
    68  .  .  .  .  .  .  .  .  .  .  .  .  Name: "b"
    69  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    70  .  .  .  .  .  .  .  .  .  .  .  }
    71  .  .  .  .  .  .  .  .  .  .  .  Op: "*"
    72  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
    73  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    74  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
    75  .  .  .  .  .  .  .  .  .  .  .  .  Value: "2"
    76  .  .  .  .  .  .  .  .  .  .  .  }
    77  .  .  .  .  .  .  .  .  .  .  }
    78  .  .  .  .  .  .  .  .  .  }
    79  .  .  .  .  .  .  .  .  }
    80  .  .  .  .  .  .  .  }
    81  .  .  .  .  .  .  }
    82  .  .  .  .  .  .  Else: *ast.IfStmt {
    83  .  .  .  .  .  .  .  Position: ast.Position {}
    84  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
    85  .  .  .  .  .  .  .  .  Position: ast.Position {}
    86  .  .  .  .  .  .  .  .  Left: *ast.Ident {
    87  .  .  .  .  .  .  .  .  .  Name: "a"
    88  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    89  .  .  .  .  .  .  .  .  }
    90  .  .  .  .  .  .  .  .  Op: "<="
    91  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
    92  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    93  .  .  .  .  .  .  .  .  .  Kind: "number"
    94  .  .  .  .  .  .  .  .  .  Value: "5"
    95  .  .  .  .  .  .  .  .  }
    96  .  .  .  .  .  .  .  }
    97  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
    98  .  .  .  .  .  .  .  .  Position: ast.Position {}
    99  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
   100  .  .  .  .  .  .  .  .  .  0: *ast.AssignStmt {
   101  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   102  .  .  .  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
   103  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   104  .  .  .  .  .  .  .  .  .  .  .  .  Name: "a"
   105  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   106  .  .  .  .  .  .  .  .  .  .  .  }
   107  .  .  .  .  .  .  .  .  .  .  }
   108  .  .  .  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
   109  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BinaryExpr {
   110  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   111  .  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
   112  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "b"
   113  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   114  .  .  .  .  .  .  .  .  .  .  .  .  }
   115  .  .  .  .  .  .  .  .  .  .  .  .  Op: "+"
   116  .  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.Ident {
   117  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "a"
   118  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   119  .  .  .  .  .  .  .  .  .  .  .  .  }
   120  .  .  .  .  .  .  .  .  .  .  .  }
   121  .  .  .  .  .  .  .  .  .  .  }
   122  .  .  .  .  .  .  .  .  .  }
   123  .  .  .  .  .  .  .  .  }
   124  .  .  .  .  .  .  .  }
   125  .  .  .  .  .  .  .  Else: *ast.BlockStmt {
   126  .  .  .  .  .  .  .  .  Position: ast.Position {}
   127  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 3) {
   128  .  .  .  .  .  .  .  .  .  0: *ast.AssignStmt {
   129  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   130  .  .  .  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
   131  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   132  .  .  .  .  .  .  .  .  .  .  .  .  Name: "a"
   133  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   134  .  .  .  .  .  .  .  .  .  .  .  }
   135  .  .  .  .  .  .  .  .  .  .  }
   136  .  .  .  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
   137  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BinaryExpr {
   138  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   139  .  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
   140  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "a"
   141  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   142  .  .  .  .  .  .  .  .  .  .  .  .  }
   143  .  .  .  .  .  .  .  .  .  .  .  .  Op: "+"
   144  .  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.Ident {
   145  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "b"
   146  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   147  .  .  .  .  .  .  .  .  .  .  .  .  }
   148  .  .  .  .  .  .  .  .  .  .  .  }
   149  .  .  .  .  .  .  .  .  .  .  }
   150  .  .  .  .  .  .  .  .  .  }
   151  .  .  .  .  .  .  .  .  .  1: *ast.AssignStmt {
   152  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   153  .  .  .  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
   154  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   155  .  .  .  .  .  .  .  .  .  .  .  .  Name: "c"
   156  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   157  .  .  .  .  .  .  .  .  .  .  .  }
   158  .  .  .  .  .  .  .  .  .  .  }
   159  .  .  .  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
   160  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BinaryExpr {
   161  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   162  .  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
   163  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "a"
   164  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   165  .  .  .  .  .  .  .  .  .  .  .  .  }
   166  .  .  .  .  .  .  .  .  .  .  .  .  Op: "*"
   167  .  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   168  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   169  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
   170  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "10"
   171  .  .  .  .  .  .  .  .  .  .  .  .  }
   172  .  .  .  .  .  .  .  .  .  .  .  }
   173  .  .  .  .  .  .  .  .  .  .  }
   174  .  .  .  .  .  .  .  .  .  }
   175  .  .  .  .  .  .  .  .  .  2: *ast.ExprStmt {
   176  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   177  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   178  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   179  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   180  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   181  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   182  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   183  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   184  .  .  .  .  .  .  .  .  .  .  .  .  }
   185  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   186  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   187  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   188  .  .  .  .  .  .  .  .  .  .  .  .  }
   189  .  .  .  .  .  .  .  .  .  .  .  }
   190  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   191  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   192  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "c"
   193  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   194  .  .  .  .  .  .  .  .  .  .  .  .  }
   195  .  .  .  .  .  .  .  .  .  .  .  }
   196  .  .  .  .  .  .  .  .  .  .  }
   197  .  .  .  .  .  .  .  .  .  }
   198  .  .  .  .  .  .  .  .  }
   199  .  .  .  .  .  .  .  }
   200  .  .  .  .  .  .  }
   201  .  .  .  .  .  }
   202  .  .  .  .  .  1: *ast.ReturnStmt {
   203  .  .  .  .  .  .  Position: ast.Position {}
   204  .  .  .  .  .  .  Results: []ast.Expr (len = 1) {
   205  .  .  .  .  .  .  .  0: *ast.Ident {
   206  .  .  .  .  .  .  .  .  Name: "a"
   207  .  .  .  .  .  .  .  .  Position: ast.Position {}
   208  .  .  .  .  .  .  .  }
   209  .  .  .  .  .  .  }
   210  .  .  .  .  .  }
   211  .  .  .  .  }
   212  .  .  .  }
   213  .  .  }
   214  .  .  1: *ast.FuncDecl {
   215  .  .  .  Position: ast.Position {}
   216  .  .  .  Name: *ast.Ident {
   217  .  .  .  .  Name: "TryStatement"
   218  .  .  .  .  Position: ast.Position {}
   219  .  .  .  }
   220  .  .  .  Type: *ast.FuncType {
   221  .  .  .  .  Position: ast.Position {}
   222  .  .  .  .  Params: *ast.FieldList {
   223  .  .  .  .  .  Position: ast.Position {}
   224  .  .  .  .  }
   225  .  .  .  }
   226  .  .  .  Body: *ast.BlockStmt {
   227  .  .  .  .  Position: ast.Position {}
   228  .  .  .  .  List: []ast.Stmt (len = 3) {
   229  .  .  .  .  .  0: *ast.ExprStmt {
   230  .  .  .  .  .  .  Position: ast.Position {}
   231  .  .  .  .  .  .  Expr: *ast.CallExpr {
   232  .  .  .  .  .  .  .  Position: ast.Position {}
   233  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   234  .  .  .  .  .  .  .  .  Position: ast.Position {}
   235  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   236  .  .  .  .  .  .  .  .  .  Name: "console"
   237  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   238  .  .  .  .  .  .  .  .  }
   239  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   240  .  .  .  .  .  .  .  .  .  Name: "log"
   241  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   242  .  .  .  .  .  .  .  .  }
   243  .  .  .  .  .  .  .  }
   244  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   245  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   246  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   247  .  .  .  .  .  .  .  .  .  Kind: "string"
   248  .  .  .  .  .  .  .  .  .  Value: "try entry"
   249  .  .  .  .  .  .  .  .  }
   250  .  .  .  .  .  .  .  }
   251  .  .  .  .  .  .  }
   252  .  .  .  .  .  }
   253  .  .  .  .  .  1: *ast.TryStmt {
   254  .  .  .  .  .  .  Position: ast.Position {}
   255  .  .  .  .  .  .  Body: *ast.BlockStmt {
   256  .  .  .  .  .  .  .  Position: ast.Position {}
   257  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
   258  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   259  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   260  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   261  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   262  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   263  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   264  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   265  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   266  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   267  .  .  .  .  .  .  .  .  .  .  .  }
   268  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   269  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   270  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   271  .  .  .  .  .  .  .  .  .  .  .  }
   272  .  .  .  .  .  .  .  .  .  .  }
   273  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   274  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   275  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   276  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   277  .  .  .  .  .  .  .  .  .  .  .  .  Value: "try body"
   278  .  .  .  .  .  .  .  .  .  .  .  }
   279  .  .  .  .  .  .  .  .  .  .  }
   280  .  .  .  .  .  .  .  .  .  }
   281  .  .  .  .  .  .  .  .  }
   282  .  .  .  .  .  .  .  }
   283  .  .  .  .  .  .  }
   284  .  .  .  .  .  .  CatchClause: []*ast.CatchClause (len = 1) {
   285  .  .  .  .  .  .  .  0: *ast.CatchClause {
   286  .  .  .  .  .  .  .  .  Position: ast.Position {}
   287  .  .  .  .  .  .  .  .  Parameter: *ast.Ident {
   288  .  .  .  .  .  .  .  .  .  Name: "e"
   289  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   290  .  .  .  .  .  .  .  .  }
   291  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
   292  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   293  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
   294  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   295  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   296  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   297  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   298  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   299  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   300  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   301  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   302  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   303  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   304  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   305  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   306  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   307  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   308  .  .  .  .  .  .  .  .  .  .  .  .  }
   309  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   310  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   311  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "e"
   312  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   313  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   314  .  .  .  .  .  .  .  .  .  .  .  .  }
   315  .  .  .  .  .  .  .  .  .  .  .  }
   316  .  .  .  .  .  .  .  .  .  .  }
   317  .  .  .  .  .  .  .  .  .  .  1: *ast.ExprStmt {
   318  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   319  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   320  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   321  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   322  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   323  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   324  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   325  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   326  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   327  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   328  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   329  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   330  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   331  .  .  .  .  .  .  .  .  .  .  .  .  }
   332  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   333  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   334  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   335  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   336  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "try catch"
   337  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   338  .  .  .  .  .  .  .  .  .  .  .  .  }
   339  .  .  .  .  .  .  .  .  .  .  .  }
   340  .  .  .  .  .  .  .  .  .  .  }
   341  .  .  .  .  .  .  .  .  .  }
   342  .  .  .  .  .  .  .  .  }
   343  .  .  .  .  .  .  .  }
   344  .  .  .  .  .  .  }
   345  .  .  .  .  .  .  Finalizer: *ast.BlockStmt {
   346  .  .  .  .  .  .  .  Position: ast.Position {}
   347  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
   348  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   349  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   350  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   351  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   352  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   353  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   354  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   355  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   356  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   357  .  .  .  .  .  .  .  .  .  .  .  }
   358  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   359  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   360  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   361  .  .  .  .  .  .  .  .  .  .  .  }
   362  .  .  .  .  .  .  .  .  .  .  }
   363  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   364  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   365  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   366  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   367  .  .  .  .  .  .  .  .  .  .  .  .  Value: "try finally"
   368  .  .  .  .  .  .  .  .  .  .  .  }
   369  .  .  .  .  .  .  .  .  .  .  }
   370  .  .  .  .  .  .  .  .  .  }
   371  .  .  .  .  .  .  .  .  }
   372  .  .  .  .  .  .  .  }
   373  .  .  .  .  .  .  }
   374  .  .  .  .  .  }
   375  .  .  .  .  .  2: *ast.ExprStmt {
   376  .  .  .  .  .  .  Position: ast.Position {}
   377  .  .  .  .  .  .  Expr: *ast.CallExpr {
   378  .  .  .  .  .  .  .  Position: ast.Position {}
   379  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   380  .  .  .  .  .  .  .  .  Position: ast.Position {}
   381  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   382  .  .  .  .  .  .  .  .  .  Name: "console"
   383  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   384  .  .  .  .  .  .  .  .  }
   385  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   386  .  .  .  .  .  .  .  .  .  Name: "log"
   387  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   388  .  .  .  .  .  .  .  .  }
   389  .  .  .  .  .  .  .  }
   390  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   391  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   392  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   393  .  .  .  .  .  .  .  .  .  Kind: "string"
   394  .  .  .  .  .  .  .  .  .  Value: "try done"
   395  .  .  .  .  .  .  .  .  }
   396  .  .  .  .  .  .  .  }
   397  .  .  .  .  .  .  }
   398  .  .  .  .  .  }
   399  .  .  .  .  }
   400  .  .  .  }
   401  .  .  }
   402  .  .  2: *ast.FuncDecl {
   403  .  .  .  Position: ast.Position {}
   404  .  .  .  Name: *ast.Ident {
   405  .  .  .  .  Name: "TryStatementWithoutFinally"
   406  .  .  .  .  Position: ast.Position {}
   407  .  .  .  }
   408  .  .  .  Type: *ast.FuncType {
   409  .  .  .  .  Position: ast.Position {}
   410  .  .  .  .  Params: *ast.FieldList {
   411  .  .  .  .  .  Position: ast.Position {}
   412  .  .  .  .  }
   413  .  .  .  }
   414  .  .  .  Body: *ast.BlockStmt {
   415  .  .  .  .  Position: ast.Position {}
   416  .  .  .  .  List: []ast.Stmt (len = 3) {
   417  .  .  .  .  .  0: *ast.ExprStmt {
   418  .  .  .  .  .  .  Position: ast.Position {}
   419  .  .  .  .  .  .  Expr: *ast.CallExpr {
   420  .  .  .  .  .  .  .  Position: ast.Position {}
   421  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   422  .  .  .  .  .  .  .  .  Position: ast.Position {}
   423  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   424  .  .  .  .  .  .  .  .  .  Name: "console"
   425  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   426  .  .  .  .  .  .  .  .  }
   427  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   428  .  .  .  .  .  .  .  .  .  Name: "log"
   429  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   430  .  .  .  .  .  .  .  .  }
   431  .  .  .  .  .  .  .  }
   432  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   433  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   434  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   435  .  .  .  .  .  .  .  .  .  Kind: "string"
   436  .  .  .  .  .  .  .  .  .  Value: "try entry"
   437  .  .  .  .  .  .  .  .  }
   438  .  .  .  .  .  .  .  }
   439  .  .  .  .  .  .  }
   440  .  .  .  .  .  }
   441  .  .  .  .  .  1: *ast.TryStmt {
   442  .  .  .  .  .  .  Position: ast.Position {}
   443  .  .  .  .  .  .  Body: *ast.BlockStmt {
   444  .  .  .  .  .  .  .  Position: ast.Position {}
   445  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
   446  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   447  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   448  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   449  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   450  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   451  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   452  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   453  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   454  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   455  .  .  .  .  .  .  .  .  .  .  .  }
   456  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   457  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   458  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   459  .  .  .  .  .  .  .  .  .  .  .  }
   460  .  .  .  .  .  .  .  .  .  .  }
   461  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   462  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   463  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   464  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   465  .  .  .  .  .  .  .  .  .  .  .  .  Value: "try body"
   466  .  .  .  .  .  .  .  .  .  .  .  }
   467  .  .  .  .  .  .  .  .  .  .  }
   468  .  .  .  .  .  .  .  .  .  }
   469  .  .  .  .  .  .  .  .  }
   470  .  .  .  .  .  .  .  }
   471  .  .  .  .  .  .  }
   472  .  .  .  .  .  .  CatchClause: []*ast.CatchClause (len = 1) {
   473  .  .  .  .  .  .  .  0: *ast.CatchClause {
   474  .  .  .  .  .  .  .  .  Position: ast.Position {}
   475  .  .  .  .  .  .  .  .  Parameter: *ast.Ident {
   476  .  .  .  .  .  .  .  .  .  Name: "e"
   477  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   478  .  .  .  .  .  .  .  .  }
   479  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
   480  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   481  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
   482  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   483  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   484  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   485  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   486  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   487  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   488  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   489  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   490  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   491  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   492  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   493  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   494  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   495  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   496  .  .  .  .  .  .  .  .  .  .  .  .  }
   497  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   498  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   499  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "e"
   500  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   501  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   502  .  .  .  .  .  .  .  .  .  .  .  .  }
   503  .  .  .  .  .  .  .  .  .  .  .  }
   504  .  .  .  .  .  .  .  .  .  .  }
   505  .  .  .  .  .  .  .  .  .  .  1: *ast.ExprStmt {
   506  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   507  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   508  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   509  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   510  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   511  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   512  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   513  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   514  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   515  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   516  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   517  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   518  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   519  .  .  .  .  .  .  .  .  .  .  .  .  }
   520  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   521  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   522  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   523  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   524  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "try catch"
   525  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   526  .  .  .  .  .  .  .  .  .  .  .  .  }
   527  .  .  .  .  .  .  .  .  .  .  .  }
   528  .  .  .  .  .  .  .  .  .  .  }
   529  .  .  .  .  .  .  .  .  .  }
   530  .  .  .  .  .  .  .  .  }
   531  .  .  .  .  .  .  .  }
   532  .  .  .  .  .  .  }
   533  .  .  .  .  .  }
   534  .  .  .  .  .  2: *ast.ExprStmt {
   535  .  .  .  .  .  .  Position: ast.Position {}
   536  .  .  .  .  .  .  Expr: *ast.CallExpr {
   537  .  .  .  .  .  .  .  Position: ast.Position {}
   538  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   539  .  .  .  .  .  .  .  .  Position: ast.Position {}
   540  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   541  .  .  .  .  .  .  .  .  .  Name: "console"
   542  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   543  .  .  .  .  .  .  .  .  }
   544  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   545  .  .  .  .  .  .  .  .  .  Name: "log"
   546  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   547  .  .  .  .  .  .  .  .  }
   548  .  .  .  .  .  .  .  }
   549  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   550  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   551  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   552  .  .  .  .  .  .  .  .  .  Kind: "string"
   553  .  .  .  .  .  .  .  .  .  Value: "try done"
   554  .  .  .  .  .  .  .  .  }
   555  .  .  .  .  .  .  .  }
   556  .  .  .  .  .  .  }
   557  .  .  .  .  .  }
   558  .  .  .  .  }
   559  .  .  .  }
   560  .  .  }
   561  .  .  3: *ast.FuncDecl {
   562  .  .  .  Position: ast.Position {}
   563  .  .  .  Name: *ast.Ident {
   564  .  .  .  .  Name: "TryStatementWithoutCatch"
   565  .  .  .  .  Position: ast.Position {}
   566  .  .  .  }
   567  .  .  .  Type: *ast.FuncType {
   568  .  .  .  .  Position: ast.Position {}
   569  .  .  .  .  Params: *ast.FieldList {
   570  .  .  .  .  .  Position: ast.Position {}
   571  .  .  .  .  }
   572  .  .  .  }
   573  .  .  .  Body: *ast.BlockStmt {
   574  .  .  .  .  Position: ast.Position {}
   575  .  .  .  .  List: []ast.Stmt (len = 3) {
   576  .  .  .  .  .  0: *ast.ExprStmt {
   577  .  .  .  .  .  .  Position: ast.Position {}
   578  .  .  .  .  .  .  Expr: *ast.CallExpr {
   579  .  .  .  .  .  .  .  Position: ast.Position {}
   580  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   581  .  .  .  .  .  .  .  .  Position: ast.Position {}
   582  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   583  .  .  .  .  .  .  .  .  .  Name: "console"
   584  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   585  .  .  .  .  .  .  .  .  }
   586  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   587  .  .  .  .  .  .  .  .  .  Name: "log"
   588  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   589  .  .  .  .  .  .  .  .  }
   590  .  .  .  .  .  .  .  }
   591  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   592  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   593  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   594  .  .  .  .  .  .  .  .  .  Kind: "string"
   595  .  .  .  .  .  .  .  .  .  Value: "try entry"
   596  .  .  .  .  .  .  .  .  }
   597  .  .  .  .  .  .  .  }
   598  .  .  .  .  .  .  }
   599  .  .  .  .  .  }
   600  .  .  .  .  .  1: *ast.TryStmt {
   601  .  .  .  .  .  .  Position: ast.Position {}
   602  .  .  .  .  .  .  Body: *ast.BlockStmt {
   603  .  .  .  .  .  .  .  Position: ast.Position {}
   604  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
   605  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   606  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   607  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   608  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   609  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   610  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   611  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   612  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   613  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   614  .  .  .  .  .  .  .  .  .  .  .  }
   615  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   616  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   617  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   618  .  .  .  .  .  .  .  .  .  .  .  }
   619  .  .  .  .  .  .  .  .  .  .  }
   620  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   621  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   622  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   623  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   624  .  .  .  .  .  .  .  .  .  .  .  .  Value: "try body"
   625  .  .  .  .  .  .  .  .  .  .  .  }
   626  .  .  .  .  .  .  .  .  .  .  }
   627  .  .  .  .  .  .  .  .  .  }
   628  .  .  .  .  .  .  .  .  }
   629  .  .  .  .  .  .  .  }
   630  .  .  .  .  .  .  }
   631  .  .  .  .  .  .  Finalizer: *ast.BlockStmt {
   632  .  .  .  .  .  .  .  Position: ast.Position {}
   633  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
   634  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   635  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   636  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   637  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   638  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   639  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   640  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   641  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   642  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   643  .  .  .  .  .  .  .  .  .  .  .  }
   644  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   645  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   646  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   647  .  .  .  .  .  .  .  .  .  .  .  }
   648  .  .  .  .  .  .  .  .  .  .  }
   649  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   650  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   651  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   652  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   653  .  .  .  .  .  .  .  .  .  .  .  .  Value: "try finally"
   654  .  .  .  .  .  .  .  .  .  .  .  }
   655  .  .  .  .  .  .  .  .  .  .  }
   656  .  .  .  .  .  .  .  .  .  }
   657  .  .  .  .  .  .  .  .  }
   658  .  .  .  .  .  .  .  }
   659  .  .  .  .  .  .  }
   660  .  .  .  .  .  }
   661  .  .  .  .  .  2: *ast.ExprStmt {
   662  .  .  .  .  .  .  Position: ast.Position {}
   663  .  .  .  .  .  .  Expr: *ast.CallExpr {
   664  .  .  .  .  .  .  .  Position: ast.Position {}
   665  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   666  .  .  .  .  .  .  .  .  Position: ast.Position {}
   667  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   668  .  .  .  .  .  .  .  .  .  Name: "console"
   669  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   670  .  .  .  .  .  .  .  .  }
   671  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   672  .  .  .  .  .  .  .  .  .  Name: "log"
   673  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   674  .  .  .  .  .  .  .  .  }
   675  .  .  .  .  .  .  .  }
   676  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   677  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   678  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   679  .  .  .  .  .  .  .  .  .  Kind: "string"
   680  .  .  .  .  .  .  .  .  .  Value: "try done"
   681  .  .  .  .  .  .  .  .  }
   682  .  .  .  .  .  .  .  }
   683  .  .  .  .  .  .  }
   684  .  .  .  .  .  }
   685  .  .  .  .  }
   686  .  .  .  }
   687  .  .  }
   688  .  .  4: *ast.FuncDecl {
   689  .  .  .  Position: ast.Position {}
   690  .  .  .  Name: *ast.Ident {
   691  .  .  .  .  Name: "WhileStatement"
   692  .  .  .  .  Position: ast.Position {}
   693  .  .  .  }
   694  .  .  .  Type: *ast.FuncType {
   695  .  .  .  .  Position: ast.Position {}
   696  .  .  .  .  Params: *ast.FieldList {
   697  .  .  .  .  .  Position: ast.Position {}
   698  .  .  .  .  }
   699  .  .  .  }
   700  .  .  .  Body: *ast.BlockStmt {
   701  .  .  .  .  Position: ast.Position {}
   702  .  .  .  .  List: []ast.Stmt (len = 2) {
   703  .  .  .  .  .  0: *ast.LabeledStatement {
   704  .  .  .  .  .  .  Position: ast.Position {}
   705  .  .  .  .  .  .  Label: *ast.Ident {
   706  .  .  .  .  .  .  .  Name: "whileStmt"
   707  .  .  .  .  .  .  .  Position: ast.Position {}
   708  .  .  .  .  .  .  }
   709  .  .  .  .  .  .  Body: []ast.Stmt (len = 1) {
   710  .  .  .  .  .  .  .  0: *ast.WhileStmt {
   711  .  .  .  .  .  .  .  .  Position: ast.Position {}
   712  .  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
   713  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   714  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
   715  .  .  .  .  .  .  .  .  .  .  Name: "i"
   716  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   717  .  .  .  .  .  .  .  .  .  }
   718  .  .  .  .  .  .  .  .  .  Op: "<="
   719  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   720  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   721  .  .  .  .  .  .  .  .  .  .  Kind: "number"
   722  .  .  .  .  .  .  .  .  .  .  Value: "5"
   723  .  .  .  .  .  .  .  .  .  }
   724  .  .  .  .  .  .  .  .  }
   725  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
   726  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   727  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 3) {
   728  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   729  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   730  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   731  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   732  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   733  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   734  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   735  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   736  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   737  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   738  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   739  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   740  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   741  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   742  .  .  .  .  .  .  .  .  .  .  .  .  }
   743  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   744  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   745  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   746  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   747  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "test"
   748  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   749  .  .  .  .  .  .  .  .  .  .  .  .  }
   750  .  .  .  .  .  .  .  .  .  .  .  }
   751  .  .  .  .  .  .  .  .  .  .  }
   752  .  .  .  .  .  .  .  .  .  .  1: *ast.IfStmt {
   753  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   754  .  .  .  .  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
   755  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   756  .  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
   757  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
   758  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   759  .  .  .  .  .  .  .  .  .  .  .  .  }
   760  .  .  .  .  .  .  .  .  .  .  .  .  Op: "==="
   761  .  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   762  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   763  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
   764  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "4"
   765  .  .  .  .  .  .  .  .  .  .  .  .  }
   766  .  .  .  .  .  .  .  .  .  .  .  }
   767  .  .  .  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
   768  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   769  .  .  .  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
   770  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   771  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   772  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   773  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   774  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   775  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   776  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   777  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   778  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   779  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   780  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   781  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   782  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   783  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   784  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   785  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   786  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   787  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   788  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   789  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "finish"
   790  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   791  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   792  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   793  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   794  .  .  .  .  .  .  .  .  .  .  .  .  .  1: *ast.BreakStatement {
   795  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   796  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Label: *ast.Ident {
   797  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "whileStmt"
   798  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   799  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   800  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   801  .  .  .  .  .  .  .  .  .  .  .  .  }
   802  .  .  .  .  .  .  .  .  .  .  .  }
   803  .  .  .  .  .  .  .  .  .  .  }
   804  .  .  .  .  .  .  .  .  .  .  2: *ast.IfStmt {
   805  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   806  .  .  .  .  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
   807  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   808  .  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
   809  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
   810  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   811  .  .  .  .  .  .  .  .  .  .  .  .  }
   812  .  .  .  .  .  .  .  .  .  .  .  .  Op: "==="
   813  .  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   814  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   815  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
   816  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "2"
   817  .  .  .  .  .  .  .  .  .  .  .  .  }
   818  .  .  .  .  .  .  .  .  .  .  .  }
   819  .  .  .  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
   820  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   821  .  .  .  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
   822  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   823  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   824  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   825  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   826  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   827  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   828  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   829  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   830  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   831  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   832  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   833  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   834  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   835  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   836  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   837  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   838  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   839  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   840  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   841  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "two"
   842  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   843  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   844  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   845  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   846  .  .  .  .  .  .  .  .  .  .  .  .  .  1: *ast.ContinueStatement {
   847  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   848  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Label: *ast.Ident {
   849  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "whileStmt"
   850  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   851  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   852  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   853  .  .  .  .  .  .  .  .  .  .  .  .  }
   854  .  .  .  .  .  .  .  .  .  .  .  }
   855  .  .  .  .  .  .  .  .  .  .  }
   856  .  .  .  .  .  .  .  .  .  }
   857  .  .  .  .  .  .  .  .  }
   858  .  .  .  .  .  .  .  }
   859  .  .  .  .  .  .  }
   860  .  .  .  .  .  }
   861  .  .  .  .  .  1: *ast.WhileStmt {
   862  .  .  .  .  .  .  Position: ast.Position {}
   863  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
   864  .  .  .  .  .  .  .  Position: ast.Position {}
   865  .  .  .  .  .  .  .  Left: *ast.Ident {
   866  .  .  .  .  .  .  .  .  Name: "i"
   867  .  .  .  .  .  .  .  .  Position: ast.Position {}
   868  .  .  .  .  .  .  .  }
   869  .  .  .  .  .  .  .  Op: "<="
   870  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   871  .  .  .  .  .  .  .  .  Position: ast.Position {}
   872  .  .  .  .  .  .  .  .  Kind: "number"
   873  .  .  .  .  .  .  .  .  Value: "5"
   874  .  .  .  .  .  .  .  }
   875  .  .  .  .  .  .  }
   876  .  .  .  .  .  .  Body: *ast.BlockStmt {
   877  .  .  .  .  .  .  .  Position: ast.Position {}
   878  .  .  .  .  .  .  .  List: []ast.Stmt (len = 3) {
   879  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   880  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   881  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   882  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   883  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   884  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   885  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   886  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   887  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   888  .  .  .  .  .  .  .  .  .  .  .  }
   889  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   890  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   891  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   892  .  .  .  .  .  .  .  .  .  .  .  }
   893  .  .  .  .  .  .  .  .  .  .  }
   894  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   895  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   896  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   897  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   898  .  .  .  .  .  .  .  .  .  .  .  .  Value: "test"
   899  .  .  .  .  .  .  .  .  .  .  .  }
   900  .  .  .  .  .  .  .  .  .  .  }
   901  .  .  .  .  .  .  .  .  .  }
   902  .  .  .  .  .  .  .  .  }
   903  .  .  .  .  .  .  .  .  1: *ast.IfStmt {
   904  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   905  .  .  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
   906  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   907  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
   908  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
   909  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   910  .  .  .  .  .  .  .  .  .  .  }
   911  .  .  .  .  .  .  .  .  .  .  Op: "==="
   912  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   913  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   914  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
   915  .  .  .  .  .  .  .  .  .  .  .  Value: "2"
   916  .  .  .  .  .  .  .  .  .  .  }
   917  .  .  .  .  .  .  .  .  .  }
   918  .  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
   919  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   920  .  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
   921  .  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   922  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   923  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   924  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   925  .  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   926  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   927  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   928  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   929  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   930  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   931  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   932  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   933  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   934  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   935  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   936  .  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   937  .  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   938  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   939  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   940  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "two"
   941  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   942  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   943  .  .  .  .  .  .  .  .  .  .  .  .  }
   944  .  .  .  .  .  .  .  .  .  .  .  }
   945  .  .  .  .  .  .  .  .  .  .  .  1: *ast.ContinueStatement {
   946  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   947  .  .  .  .  .  .  .  .  .  .  .  }
   948  .  .  .  .  .  .  .  .  .  .  }
   949  .  .  .  .  .  .  .  .  .  }
   950  .  .  .  .  .  .  .  .  }
   951  .  .  .  .  .  .  .  .  2: *ast.IfStmt {
   952  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   953  .  .  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
   954  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   955  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
   956  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
   957  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   958  .  .  .  .  .  .  .  .  .  .  }
   959  .  .  .  .  .  .  .  .  .  .  Op: "==="
   960  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   961  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   962  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
   963  .  .  .  .  .  .  .  .  .  .  .  Value: "4"
   964  .  .  .  .  .  .  .  .  .  .  }
   965  .  .  .  .  .  .  .  .  .  }
   966  .  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
   967  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   968  .  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
   969  .  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   970  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   971  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   972  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   973  .  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   974  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   975  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   976  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   977  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   978  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   979  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   980  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   981  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   982  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   983  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   984  .  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   985  .  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   986  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   987  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   988  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "finish"
   989  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   990  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   991  .  .  .  .  .  .  .  .  .  .  .  .  }
   992  .  .  .  .  .  .  .  .  .  .  .  }
   993  .  .  .  .  .  .  .  .  .  .  .  1: *ast.BreakStatement {
   994  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   995  .  .  .  .  .  .  .  .  .  .  .  }
   996  .  .  .  .  .  .  .  .  .  .  }
   997  .  .  .  .  .  .  .  .  .  }
   998  .  .  .  .  .  .  .  .  }
   999  .  .  .  .  .  .  .  }
  1000  .  .  .  .  .  .  }
  1001  .  .  .  .  .  }
  1002  .  .  .  .  }
  1003  .  .  .  }
  1004  .  .  }
  1005  .  .  5: *ast.FuncDecl {
  1006  .  .  .  Position: ast.Position {}
  1007  .  .  .  Name: *ast.Ident {
  1008  .  .  .  .  Name: "SwitchStatement"
  1009  .  .  .  .  Position: ast.Position {}
  1010  .  .  .  }
  1011  .  .  .  Type: *ast.FuncType {
  1012  .  .  .  .  Position: ast.Position {}
  1013  .  .  .  .  Params: *ast.FieldList {
  1014  .  .  .  .  .  Position: ast.Position {}
  1015  .  .  .  .  }
  1016  .  .  .  }
  1017  .  .  .  Body: *ast.BlockStmt {
  1018  .  .  .  .  Position: ast.Position {}
  1019  .  .  .  .  List: []ast.Stmt (len = 2) {
  1020  .  .  .  .  .  0: *ast.AssignStmt {
  1021  .  .  .  .  .  .  Position: ast.Position {}
  1022  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
  1023  .  .  .  .  .  .  .  0: *ast.Ident {
  1024  .  .  .  .  .  .  .  .  Name: "fruits"
  1025  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1026  .  .  .  .  .  .  .  }
  1027  .  .  .  .  .  .  }
  1028  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
  1029  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1030  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1031  .  .  .  .  .  .  .  .  Kind: "string"
  1032  .  .  .  .  .  .  .  .  Value: "Oranges"
  1033  .  .  .  .  .  .  .  }
  1034  .  .  .  .  .  .  }
  1035  .  .  .  .  .  }
  1036  .  .  .  .  .  1: *ast.SwitchStatement {
  1037  .  .  .  .  .  .  Position: ast.Position {}
  1038  .  .  .  .  .  .  Value: *ast.Ident {
  1039  .  .  .  .  .  .  .  Name: "fruits"
  1040  .  .  .  .  .  .  .  Position: ast.Position {}
  1041  .  .  .  .  .  .  }
  1042  .  .  .  .  .  .  Body: *ast.BlockStmt {
  1043  .  .  .  .  .  .  .  Position: ast.Position {}
  1044  .  .  .  .  .  .  .  List: []ast.Stmt (len = 4) {
  1045  .  .  .  .  .  .  .  .  0: *ast.SwitchCase {
  1046  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1047  .  .  .  .  .  .  .  .  .  Cond: *ast.BasicLit {
  1048  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1049  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  1050  .  .  .  .  .  .  .  .  .  .  Value: "Oranges"
  1051  .  .  .  .  .  .  .  .  .  }
  1052  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 2) {
  1053  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
  1054  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1055  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
  1056  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1057  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1058  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1059  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  1060  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
  1061  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1062  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1063  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1064  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
  1065  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1066  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1067  .  .  .  .  .  .  .  .  .  .  .  .  }
  1068  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  1069  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1070  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1071  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  1072  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "Oranges"
  1073  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1074  .  .  .  .  .  .  .  .  .  .  .  .  }
  1075  .  .  .  .  .  .  .  .  .  .  .  }
  1076  .  .  .  .  .  .  .  .  .  .  }
  1077  .  .  .  .  .  .  .  .  .  .  1: *ast.BreakStatement {
  1078  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1079  .  .  .  .  .  .  .  .  .  .  }
  1080  .  .  .  .  .  .  .  .  .  }
  1081  .  .  .  .  .  .  .  .  }
  1082  .  .  .  .  .  .  .  .  1: *ast.SwitchCase {
  1083  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1084  .  .  .  .  .  .  .  .  .  Cond: *ast.BasicLit {
  1085  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1086  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  1087  .  .  .  .  .  .  .  .  .  .  Value: "Mangoes"
  1088  .  .  .  .  .  .  .  .  .  }
  1089  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 2) {
  1090  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
  1091  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1092  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
  1093  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1094  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1095  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1096  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  1097  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
  1098  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1099  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1100  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1101  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
  1102  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1103  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1104  .  .  .  .  .  .  .  .  .  .  .  .  }
  1105  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  1106  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1107  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1108  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  1109  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "Mangoes"
  1110  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1111  .  .  .  .  .  .  .  .  .  .  .  .  }
  1112  .  .  .  .  .  .  .  .  .  .  .  }
  1113  .  .  .  .  .  .  .  .  .  .  }
  1114  .  .  .  .  .  .  .  .  .  .  1: *ast.BreakStatement {
  1115  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1116  .  .  .  .  .  .  .  .  .  .  }
  1117  .  .  .  .  .  .  .  .  .  }
  1118  .  .  .  .  .  .  .  .  }
  1119  .  .  .  .  .  .  .  .  2: *ast.SwitchCase {
  1120  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1121  .  .  .  .  .  .  .  .  .  Cond: *ast.BasicLit {
  1122  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1123  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  1124  .  .  .  .  .  .  .  .  .  .  Value: "Papayas"
  1125  .  .  .  .  .  .  .  .  .  }
  1126  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 2) {
  1127  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
  1128  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1129  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
  1130  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1131  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1132  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1133  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  1134  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
  1135  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1136  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1137  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1138  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
  1139  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1140  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1141  .  .  .  .  .  .  .  .  .  .  .  .  }
  1142  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  1143  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1144  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1145  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  1146  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "Papayas"
  1147  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1148  .  .  .  .  .  .  .  .  .  .  .  .  }
  1149  .  .  .  .  .  .  .  .  .  .  .  }
  1150  .  .  .  .  .  .  .  .  .  .  }
  1151  .  .  .  .  .  .  .  .  .  .  1: *ast.BreakStatement {
  1152  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1153  .  .  .  .  .  .  .  .  .  .  }
  1154  .  .  .  .  .  .  .  .  .  }
  1155  .  .  .  .  .  .  .  .  }
  1156  .  .  .  .  .  .  .  .  3: *ast.SwitchDefault {
  1157  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1158  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 1) {
  1159  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
  1160  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1161  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
  1162  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1163  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1164  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1165  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  1166  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
  1167  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1168  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1169  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1170  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
  1171  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1172  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1173  .  .  .  .  .  .  .  .  .  .  .  .  }
  1174  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  1175  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1176  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1177  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  1178  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "No fruits"
  1179  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1180  .  .  .  .  .  .  .  .  .  .  .  .  }
  1181  .  .  .  .  .  .  .  .  .  .  .  }
  1182  .  .  .  .  .  .  .  .  .  .  }
  1183  .  .  .  .  .  .  .  .  .  }
  1184  .  .  .  .  .  .  .  .  }
  1185  .  .  .  .  .  .  .  }
  1186  .  .  .  .  .  .  }
  1187  .  .  .  .  .  }
  1188  .  .  .  .  }
  1189  .  .  .  }
  1190  .  .  }
  1191  .  .  6: *ast.FuncDecl {
  1192  .  .  .  Position: ast.Position {}
  1193  .  .  .  Name: *ast.Ident {
  1194  .  .  .  .  Name: "ForStatement"
  1195  .  .  .  .  Position: ast.Position {}
  1196  .  .  .  }
  1197  .  .  .  Type: *ast.FuncType {
  1198  .  .  .  .  Position: ast.Position {}
  1199  .  .  .  .  Params: *ast.FieldList {
  1200  .  .  .  .  .  Position: ast.Position {}
  1201  .  .  .  .  }
  1202  .  .  .  }
  1203  .  .  .  Body: *ast.BlockStmt {
  1204  .  .  .  .  Position: ast.Position {}
  1205  .  .  .  .  List: []ast.Stmt (len = 1) {
  1206  .  .  .  .  .  0: *ast.ForStatement {
  1207  .  .  .  .  .  .  Position: ast.Position {}
  1208  .  .  .  .  .  .  VarDecl: *ast.AssignStmt {
  1209  .  .  .  .  .  .  .  Position: ast.Position {}
  1210  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
  1211  .  .  .  .  .  .  .  .  0: *ast.Ident {
  1212  .  .  .  .  .  .  .  .  .  Name: "i"
  1213  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1214  .  .  .  .  .  .  .  .  }
  1215  .  .  .  .  .  .  .  }
  1216  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
  1217  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1218  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1219  .  .  .  .  .  .  .  .  .  Kind: "number"
  1220  .  .  .  .  .  .  .  .  .  Value: "0"
  1221  .  .  .  .  .  .  .  .  }
  1222  .  .  .  .  .  .  .  }
  1223  .  .  .  .  .  .  }
  1224  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
  1225  .  .  .  .  .  .  .  Position: ast.Position {}
  1226  .  .  .  .  .  .  .  Left: *ast.Ident {
  1227  .  .  .  .  .  .  .  .  Name: "i"
  1228  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1229  .  .  .  .  .  .  .  }
  1230  .  .  .  .  .  .  .  Op: "<"
  1231  .  .  .  .  .  .  .  Right: *ast.BasicLit {
  1232  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1233  .  .  .  .  .  .  .  .  Kind: "number"
  1234  .  .  .  .  .  .  .  .  Value: "9"
  1235  .  .  .  .  .  .  .  }
  1236  .  .  .  .  .  .  }
  1237  .  .  .  .  .  .  Increment: *ast.IncExpr {
  1238  .  .  .  .  .  .  .  Position: ast.Position {}
  1239  .  .  .  .  .  .  .  Op: "++"
  1240  .  .  .  .  .  .  .  Arg: *ast.Ident {
  1241  .  .  .  .  .  .  .  .  Name: "i"
  1242  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1243  .  .  .  .  .  .  .  }
  1244  .  .  .  .  .  .  }
  1245  .  .  .  .  .  .  Body: *ast.BlockStmt {
  1246  .  .  .  .  .  .  .  Position: ast.Position {}
  1247  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
  1248  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
  1249  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1250  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
  1251  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1252  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1253  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1254  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  1255  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
  1256  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1257  .  .  .  .  .  .  .  .  .  .  .  }
  1258  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1259  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
  1260  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1261  .  .  .  .  .  .  .  .  .  .  .  }
  1262  .  .  .  .  .  .  .  .  .  .  }
  1263  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  1264  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
  1265  .  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
  1266  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1267  .  .  .  .  .  .  .  .  .  .  .  }
  1268  .  .  .  .  .  .  .  .  .  .  }
  1269  .  .  .  .  .  .  .  .  .  }
  1270  .  .  .  .  .  .  .  .  }
  1271  .  .  .  .  .  .  .  }
  1272  .  .  .  .  .  .  }
  1273  .  .  .  .  .  }
  1274  .  .  .  .  }
  1275  .  .  .  }
  1276  .  .  }
  1277  .  .  7: *ast.FuncDecl {
  1278  .  .  .  Position: ast.Position {}
  1279  .  .  .  Name: *ast.Ident {
  1280  .  .  .  .  Name: "ForStatementIteratingOverList"
  1281  .  .  .  .  Position: ast.Position {}
  1282  .  .  .  }
  1283  .  .  .  Type: *ast.FuncType {
  1284  .  .  .  .  Position: ast.Position {}
  1285  .  .  .  .  Params: *ast.FieldList {
  1286  .  .  .  .  .  Position: ast.Position {}
  1287  .  .  .  .  .  List: []*ast.Field (len = 1) {
  1288  .  .  .  .  .  .  0: *ast.Field {
  1289  .  .  .  .  .  .  .  Position: ast.Position {}
  1290  .  .  .  .  .  .  .  Name: *ast.Ident {
  1291  .  .  .  .  .  .  .  .  Name: "data"
  1292  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1293  .  .  .  .  .  .  .  }
  1294  .  .  .  .  .  .  }
  1295  .  .  .  .  .  }
  1296  .  .  .  .  }
  1297  .  .  .  }
  1298  .  .  .  Body: *ast.BlockStmt {
  1299  .  .  .  .  Position: ast.Position {}
  1300  .  .  .  .  List: []ast.Stmt (len = 3) {
  1301  .  .  .  .  .  0: *ast.AssignStmt {
  1302  .  .  .  .  .  .  Position: ast.Position {}
  1303  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
  1304  .  .  .  .  .  .  .  0: *ast.Ident {
  1305  .  .  .  .  .  .  .  .  Name: "sum"
  1306  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1307  .  .  .  .  .  .  .  }
  1308  .  .  .  .  .  .  }
  1309  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
  1310  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1311  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1312  .  .  .  .  .  .  .  .  Kind: "number"
  1313  .  .  .  .  .  .  .  .  Value: "0"
  1314  .  .  .  .  .  .  .  }
  1315  .  .  .  .  .  .  }
  1316  .  .  .  .  .  }
  1317  .  .  .  .  .  1: *ast.ForStatement {
  1318  .  .  .  .  .  .  Position: ast.Position {}
  1319  .  .  .  .  .  .  VarDecl: *ast.AssignStmt {
  1320  .  .  .  .  .  .  .  Position: ast.Position {}
  1321  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
  1322  .  .  .  .  .  .  .  .  0: *ast.Ident {
  1323  .  .  .  .  .  .  .  .  .  Name: "i"
  1324  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1325  .  .  .  .  .  .  .  .  }
  1326  .  .  .  .  .  .  .  }
  1327  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
  1328  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1329  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1330  .  .  .  .  .  .  .  .  .  Kind: "number"
  1331  .  .  .  .  .  .  .  .  .  Value: "0"
  1332  .  .  .  .  .  .  .  .  }
  1333  .  .  .  .  .  .  .  }
  1334  .  .  .  .  .  .  }
  1335  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
  1336  .  .  .  .  .  .  .  Position: ast.Position {}
  1337  .  .  .  .  .  .  .  Left: *ast.Ident {
  1338  .  .  .  .  .  .  .  .  Name: "i"
  1339  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1340  .  .  .  .  .  .  .  }
  1341  .  .  .  .  .  .  .  Op: "<"
  1342  .  .  .  .  .  .  .  Right: *ast.SelectorExpr {
  1343  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1344  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  1345  .  .  .  .  .  .  .  .  .  Name: "data"
  1346  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1347  .  .  .  .  .  .  .  .  }
  1348  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1349  .  .  .  .  .  .  .  .  .  Name: "length"
  1350  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1351  .  .  .  .  .  .  .  .  }
  1352  .  .  .  .  .  .  .  }
  1353  .  .  .  .  .  .  }
  1354  .  .  .  .  .  .  Increment: *ast.IncExpr {
  1355  .  .  .  .  .  .  .  Position: ast.Position {}
  1356  .  .  .  .  .  .  .  Op: "++"
  1357  .  .  .  .  .  .  .  Arg: *ast.Ident {
  1358  .  .  .  .  .  .  .  .  Name: "i"
  1359  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1360  .  .  .  .  .  .  .  }
  1361  .  .  .  .  .  .  }
  1362  .  .  .  .  .  .  Body: *ast.BlockStmt {
  1363  .  .  .  .  .  .  .  Position: ast.Position {}
  1364  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
  1365  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
  1366  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1367  .  .  .  .  .  .  .  .  .  Expr: *ast.BadNode {
  1368  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1369  .  .  .  .  .  .  .  .  .  .  Comment: "unsupported node type <augmented_assignment_expression>"
  1370  .  .  .  .  .  .  .  .  .  }
  1371  .  .  .  .  .  .  .  .  }
  1372  .  .  .  .  .  .  .  }
  1373  .  .  .  .  .  .  }
  1374  .  .  .  .  .  }
  1375  .  .  .  .  .  2: *ast.ReturnStmt {
  1376  .  .  .  .  .  .  Position: ast.Position {}
  1377  .  .  .  .  .  .  Results: []ast.Expr (len = 1) {
  1378  .  .  .  .  .  .  .  0: *ast.Ident {
  1379  .  .  .  .  .  .  .  .  Name: "sum"
  1380  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1381  .  .  .  .  .  .  .  }
  1382  .  .  .  .  .  .  }
  1383  .  .  .  .  .  }
  1384  .  .  .  .  }
  1385  .  .  .  }
  1386  .  .  }
  1387  .  .  8: *ast.FuncDecl {
  1388  .  .  .  Position: ast.Position {}
  1389  .  .  .  Name: *ast.Ident {
  1390  .  .  .  .  Name: "ForStatementWithoutBinaryExpressionIncremet"
  1391  .  .  .  .  Position: ast.Position {}
  1392  .  .  .  }
  1393  .  .  .  Type: *ast.FuncType {
  1394  .  .  .  .  Position: ast.Position {}
  1395  .  .  .  .  Params: *ast.FieldList {
  1396  .  .  .  .  .  Position: ast.Position {}
  1397  .  .  .  .  }
  1398  .  .  .  }
  1399  .  .  .  Body: *ast.BlockStmt {
  1400  .  .  .  .  Position: ast.Position {}
  1401  .  .  .  .  List: []ast.Stmt (len = 1) {
  1402  .  .  .  .  .  0: *ast.ForStatement {
  1403  .  .  .  .  .  .  Position: ast.Position {}
  1404  .  .  .  .  .  .  VarDecl: *ast.AssignStmt {
  1405  .  .  .  .  .  .  .  Position: ast.Position {}
  1406  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 2) {
  1407  .  .  .  .  .  .  .  .  0: *ast.Ident {
  1408  .  .  .  .  .  .  .  .  .  Name: "a"
  1409  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1410  .  .  .  .  .  .  .  .  }
  1411  .  .  .  .  .  .  .  .  1: *ast.Ident {
  1412  .  .  .  .  .  .  .  .  .  Name: "b"
  1413  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1414  .  .  .  .  .  .  .  .  }
  1415  .  .  .  .  .  .  .  }
  1416  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 0) {}
  1417  .  .  .  .  .  .  }
  1418  .  .  .  .  .  .  Cond: *ast.Ident {
  1419  .  .  .  .  .  .  .  Name: "c"
  1420  .  .  .  .  .  .  .  Position: ast.Position {}
  1421  .  .  .  .  .  .  }
  1422  .  .  .  .  .  .  Increment: *ast.Ident {
  1423  .  .  .  .  .  .  .  Name: "d"
  1424  .  .  .  .  .  .  .  Position: ast.Position {}
  1425  .  .  .  .  .  .  }
  1426  .  .  .  .  .  .  Body: *ast.BlockStmt {
  1427  .  .  .  .  .  .  .  Position: ast.Position {}
  1428  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
  1429  .  .  .  .  .  .  .  .  0: *ast.BadNode {
  1430  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1431  .  .  .  .  .  .  .  .  .  Comment: "unsupported node type <identifier>"
  1432  .  .  .  .  .  .  .  .  }
  1433  .  .  .  .  .  .  .  }
  1434  .  .  .  .  .  .  }
  1435  .  .  .  .  .  }
  1436  .  .  .  .  }
  1437  .  .  .  }
  1438  .  .  }
  1439  .  .  9: *ast.FuncDecl {
  1440  .  .  .  Position: ast.Position {}
  1441  .  .  .  Name: *ast.Ident {
  1442  .  .  .  .  Name: "ForStatementEndlessRecursion"
  1443  .  .  .  .  Position: ast.Position {}
  1444  .  .  .  }
  1445  .  .  .  Type: *ast.FuncType {
  1446  .  .  .  .  Position: ast.Position {}
  1447  .  .  .  .  Params: *ast.FieldList {
  1448  .  .  .  .  .  Position: ast.Position {}
  1449  .  .  .  .  }
  1450  .  .  .  }
  1451  .  .  .  Body: *ast.BlockStmt {
  1452  .  .  .  .  Position: ast.Position {}
  1453  .  .  .  .  List: []ast.Stmt (len = 1) {
  1454  .  .  .  .  .  0: *ast.ForStatement {
  1455  .  .  .  .  .  .  Position: ast.Position {}
  1456  .  .  .  .  .  .  Body: *ast.BlockStmt {
  1457  .  .  .  .  .  .  .  Position: ast.Position {}
  1458  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
  1459  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
  1460  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1461  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
  1462  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1463  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1464  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1465  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  1466  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
  1467  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1468  .  .  .  .  .  .  .  .  .  .  .  }
  1469  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1470  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
  1471  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1472  .  .  .  .  .  .  .  .  .  .  .  }
  1473  .  .  .  .  .  .  .  .  .  .  }
  1474  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  1475  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1476  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1477  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  1478  .  .  .  .  .  .  .  .  .  .  .  .  Value: "endless recursion"
  1479  .  .  .  .  .  .  .  .  .  .  .  }
  1480  .  .  .  .  .  .  .  .  .  .  }
  1481  .  .  .  .  .  .  .  .  .  }
  1482  .  .  .  .  .  .  .  .  }
  1483  .  .  .  .  .  .  .  }
  1484  .  .  .  .  .  .  }
  1485  .  .  .  .  .  }
  1486  .  .  .  .  }
  1487  .  .  .  }
  1488  .  .  }
  1489  .  .  10: *ast.FuncDecl {
  1490  .  .  .  Position: ast.Position {}
  1491  .  .  .  Name: *ast.Ident {
  1492  .  .  .  .  Name: "ForStatementEmptyBody"
  1493  .  .  .  .  Position: ast.Position {}
  1494  .  .  .  }
  1495  .  .  .  Type: *ast.FuncType {
  1496  .  .  .  .  Position: ast.Position {}
  1497  .  .  .  .  Params: *ast.FieldList {
  1498  .  .  .  .  .  Position: ast.Position {}
  1499  .  .  .  .  }
  1500  .  .  .  }
  1501  .  .  .  Body: *ast.BlockStmt {
  1502  .  .  .  .  Position: ast.Position {}
  1503  .  .  .  .  List: []ast.Stmt (len = 1) {
  1504  .  .  .  .  .  0: *ast.ForStatement {
  1505  .  .  .  .  .  .  Position: ast.Position {}
  1506  .  .  .  .  .  .  VarDecl: *ast.AssignStmt {
  1507  .  .  .  .  .  .  .  Position: ast.Position {}
  1508  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
  1509  .  .  .  .  .  .  .  .  0: *ast.Ident {
  1510  .  .  .  .  .  .  .  .  .  Name: "i"
  1511  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1512  .  .  .  .  .  .  .  .  }
  1513  .  .  .  .  .  .  .  }
  1514  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
  1515  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1516  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1517  .  .  .  .  .  .  .  .  .  Kind: "number"
  1518  .  .  .  .  .  .  .  .  .  Value: "0"
  1519  .  .  .  .  .  .  .  .  }
  1520  .  .  .  .  .  .  .  }
  1521  .  .  .  .  .  .  }
  1522  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
  1523  .  .  .  .  .  .  .  Position: ast.Position {}
  1524  .  .  .  .  .  .  .  Left: *ast.Ident {
  1525  .  .  .  .  .  .  .  .  Name: "i"
  1526  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1527  .  .  .  .  .  .  .  }
  1528  .  .  .  .  .  .  .  Op: "<"
  1529  .  .  .  .  .  .  .  Right: *ast.Ident {
  1530  .  .  .  .  .  .  .  .  Name: "l"
  1531  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1532  .  .  .  .  .  .  .  }
  1533  .  .  .  .  .  .  }
  1534  .  .  .  .  .  .  Increment: *ast.IncExpr {
  1535  .  .  .  .  .  .  .  Position: ast.Position {}
  1536  .  .  .  .  .  .  .  Op: "++"
  1537  .  .  .  .  .  .  .  Arg: *ast.Ident {
  1538  .  .  .  .  .  .  .  .  Name: "i"
  1539  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1540  .  .  .  .  .  .  .  }
  1541  .  .  .  .  .  .  }
  1542  .  .  .  .  .  .  Body: *ast.BlockStmt {
  1543  .  .  .  .  .  .  .  Position: ast.Position {}
  1544  .  .  .  .  .  .  .  List: []ast.Stmt (len = 0) {}
  1545  .  .  .  .  .  .  }
  1546  .  .  .  .  .  }
  1547  .  .  .  .  }
  1548  .  .  .  }
  1549  .  .  }
  1550  .  .  11: *ast.FuncDecl {
  1551  .  .  .  Position: ast.Position {}
  1552  .  .  .  Name: *ast.Ident {
  1553  .  .  .  .  Name: "ForInStatement"
  1554  .  .  .  .  Position: ast.Position {}
  1555  .  .  .  }
  1556  .  .  .  Type: *ast.FuncType {
  1557  .  .  .  .  Position: ast.Position {}
  1558  .  .  .  .  Params: *ast.FieldList {
  1559  .  .  .  .  .  Position: ast.Position {}
  1560  .  .  .  .  }
  1561  .  .  .  }
  1562  .  .  .  Body: *ast.BlockStmt {
  1563  .  .  .  .  Position: ast.Position {}
  1564  .  .  .  .  List: []ast.Stmt (len = 2) {
  1565  .  .  .  .  .  0: *ast.AssignStmt {
  1566  .  .  .  .  .  .  Position: ast.Position {}
  1567  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
  1568  .  .  .  .  .  .  .  0: *ast.Ident {
  1569  .  .  .  .  .  .  .  .  Name: "values"
  1570  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1571  .  .  .  .  .  .  .  }
  1572  .  .  .  .  .  .  }
  1573  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
  1574  .  .  .  .  .  .  .  0: *ast.ObjectExpr {
  1575  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1576  .  .  .  .  .  .  .  .  Elts: []ast.Expr (len = 3) {
  1577  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1578  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1579  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  1580  .  .  .  .  .  .  .  .  .  .  Value: "a"
  1581  .  .  .  .  .  .  .  .  .  }
  1582  .  .  .  .  .  .  .  .  .  1: *ast.BasicLit {
  1583  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1584  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  1585  .  .  .  .  .  .  .  .  .  .  Value: "b"
  1586  .  .  .  .  .  .  .  .  .  }
  1587  .  .  .  .  .  .  .  .  .  2: *ast.BasicLit {
  1588  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1589  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  1590  .  .  .  .  .  .  .  .  .  .  Value: "c"
  1591  .  .  .  .  .  .  .  .  .  }
  1592  .  .  .  .  .  .  .  .  }
  1593  .  .  .  .  .  .  .  .  Comment: "array"
  1594  .  .  .  .  .  .  .  }
  1595  .  .  .  .  .  .  }
  1596  .  .  .  .  .  }
  1597  .  .  .  .  .  1: *ast.ForInStatement {
  1598  .  .  .  .  .  .  Position: ast.Position {}
  1599  .  .  .  .  .  .  Left: *ast.Ident {
  1600  .  .  .  .  .  .  .  Name: "value"
  1601  .  .  .  .  .  .  .  Position: ast.Position {}
  1602  .  .  .  .  .  .  }
  1603  .  .  .  .  .  .  Right: *ast.Ident {
  1604  .  .  .  .  .  .  .  Name: "values"
  1605  .  .  .  .  .  .  .  Position: ast.Position {}
  1606  .  .  .  .  .  .  }
  1607  .  .  .  .  .  .  Body: *ast.BlockStmt {
  1608  .  .  .  .  .  .  .  Position: ast.Position {}
  1609  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
  1610  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
  1611  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1612  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
  1613  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1614  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1615  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1616  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  1617  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
  1618  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1619  .  .  .  .  .  .  .  .  .  .  .  }
  1620  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1621  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
  1622  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1623  .  .  .  .  .  .  .  .  .  .  .  }
  1624  .  .  .  .  .  .  .  .  .  .  }
  1625  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  1626  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
  1627  .  .  .  .  .  .  .  .  .  .  .  .  Name: "value"
  1628  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1629  .  .  .  .  .  .  .  .  .  .  .  }
  1630  .  .  .  .  .  .  .  .  .  .  }
  1631  .  .  .  .  .  .  .  .  .  }
  1632  .  .  .  .  .  .  .  .  }
  1633  .  .  .  .  .  .  .  }
  1634  .  .  .  .  .  .  }
  1635  .  .  .  .  .  }
  1636  .  .  .  .  }
  1637  .  .  .  }
  1638  .  .  }
  1639  .  .  12: *ast.FuncDecl {
  1640  .  .  .  Position: ast.Position {}
  1641  .  .  .  Name: *ast.Ident {
  1642  .  .  .  .  Name: "ExportStatement"
  1643  .  .  .  .  Position: ast.Position {}
  1644  .  .  .  }
  1645  .  .  .  Type: *ast.FuncType {
  1646  .  .  .  .  Position: ast.Position {}
  1647  .  .  .  .  Params: *ast.FieldList {
  1648  .  .  .  .  .  Position: ast.Position {}
  1649  .  .  .  .  }
  1650  .  .  .  }
  1651  .  .  .  Body: *ast.BlockStmt {
  1652  .  .  .  .  Position: ast.Position {}
  1653  .  .  .  .  List: []ast.Stmt (len = 1) {
  1654  .  .  .  .  .  0: nil
  1655  .  .  .  .  }
  1656  .  .  .  }
  1657  .  .  }
  1658  .  }
  1659  }
