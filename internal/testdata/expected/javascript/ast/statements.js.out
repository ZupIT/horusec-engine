     0  *ast.File {
     1  .  Position: ast.Position {}
     2  .  Name: *ast.Ident {
     3  .  .  Name: "statements.js"
     4  .  .  Position: ast.Position {}
     5  .  }
     6  .  Decls: []ast.Decl (len = 22) {
     7  .  .  0: *ast.FuncDecl {
     8  .  .  .  Position: ast.Position {}
     9  .  .  .  Name: *ast.Ident {
    10  .  .  .  .  Name: "IfStatement"
    11  .  .  .  .  Position: ast.Position {}
    12  .  .  .  }
    13  .  .  .  Type: *ast.FuncType {
    14  .  .  .  .  Position: ast.Position {}
    15  .  .  .  .  Params: *ast.FieldList {
    16  .  .  .  .  .  Position: ast.Position {}
    17  .  .  .  .  .  List: []*ast.Field (len = 2) {
    18  .  .  .  .  .  .  0: *ast.Field {
    19  .  .  .  .  .  .  .  Position: ast.Position {}
    20  .  .  .  .  .  .  .  Name: *ast.Ident {
    21  .  .  .  .  .  .  .  .  Name: "a"
    22  .  .  .  .  .  .  .  .  Position: ast.Position {}
    23  .  .  .  .  .  .  .  }
    24  .  .  .  .  .  .  }
    25  .  .  .  .  .  .  1: *ast.Field {
    26  .  .  .  .  .  .  .  Position: ast.Position {}
    27  .  .  .  .  .  .  .  Name: *ast.Ident {
    28  .  .  .  .  .  .  .  .  Name: "b"
    29  .  .  .  .  .  .  .  .  Position: ast.Position {}
    30  .  .  .  .  .  .  .  }
    31  .  .  .  .  .  .  }
    32  .  .  .  .  .  }
    33  .  .  .  .  }
    34  .  .  .  }
    35  .  .  .  Body: *ast.BlockStmt {
    36  .  .  .  .  Position: ast.Position {}
    37  .  .  .  .  List: []ast.Stmt (len = 2) {
    38  .  .  .  .  .  0: *ast.IfStmt {
    39  .  .  .  .  .  .  Position: ast.Position {}
    40  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
    41  .  .  .  .  .  .  .  Position: ast.Position {}
    42  .  .  .  .  .  .  .  Left: *ast.Ident {
    43  .  .  .  .  .  .  .  .  Name: "a"
    44  .  .  .  .  .  .  .  .  Position: ast.Position {}
    45  .  .  .  .  .  .  .  }
    46  .  .  .  .  .  .  .  Op: ">="
    47  .  .  .  .  .  .  .  Right: *ast.BasicLit {
    48  .  .  .  .  .  .  .  .  Position: ast.Position {}
    49  .  .  .  .  .  .  .  .  Kind: "number"
    50  .  .  .  .  .  .  .  .  Value: "10"
    51  .  .  .  .  .  .  .  }
    52  .  .  .  .  .  .  }
    53  .  .  .  .  .  .  Body: *ast.BlockStmt {
    54  .  .  .  .  .  .  .  Position: ast.Position {}
    55  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
    56  .  .  .  .  .  .  .  .  0: *ast.AssignStmt {
    57  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    58  .  .  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
    59  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
    60  .  .  .  .  .  .  .  .  .  .  .  Name: "a"
    61  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    62  .  .  .  .  .  .  .  .  .  .  }
    63  .  .  .  .  .  .  .  .  .  }
    64  .  .  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
    65  .  .  .  .  .  .  .  .  .  .  0: *ast.BinaryExpr {
    66  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    67  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
    68  .  .  .  .  .  .  .  .  .  .  .  .  Name: "b"
    69  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    70  .  .  .  .  .  .  .  .  .  .  .  }
    71  .  .  .  .  .  .  .  .  .  .  .  Op: "*"
    72  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
    73  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    74  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
    75  .  .  .  .  .  .  .  .  .  .  .  .  Value: "2"
    76  .  .  .  .  .  .  .  .  .  .  .  }
    77  .  .  .  .  .  .  .  .  .  .  }
    78  .  .  .  .  .  .  .  .  .  }
    79  .  .  .  .  .  .  .  .  }
    80  .  .  .  .  .  .  .  }
    81  .  .  .  .  .  .  }
    82  .  .  .  .  .  .  Else: *ast.IfStmt {
    83  .  .  .  .  .  .  .  Position: ast.Position {}
    84  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
    85  .  .  .  .  .  .  .  .  Position: ast.Position {}
    86  .  .  .  .  .  .  .  .  Left: *ast.Ident {
    87  .  .  .  .  .  .  .  .  .  Name: "a"
    88  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    89  .  .  .  .  .  .  .  .  }
    90  .  .  .  .  .  .  .  .  Op: "<="
    91  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
    92  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    93  .  .  .  .  .  .  .  .  .  Kind: "number"
    94  .  .  .  .  .  .  .  .  .  Value: "5"
    95  .  .  .  .  .  .  .  .  }
    96  .  .  .  .  .  .  .  }
    97  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
    98  .  .  .  .  .  .  .  .  Position: ast.Position {}
    99  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
   100  .  .  .  .  .  .  .  .  .  0: *ast.AssignStmt {
   101  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   102  .  .  .  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
   103  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   104  .  .  .  .  .  .  .  .  .  .  .  .  Name: "a"
   105  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   106  .  .  .  .  .  .  .  .  .  .  .  }
   107  .  .  .  .  .  .  .  .  .  .  }
   108  .  .  .  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
   109  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BinaryExpr {
   110  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   111  .  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
   112  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "b"
   113  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   114  .  .  .  .  .  .  .  .  .  .  .  .  }
   115  .  .  .  .  .  .  .  .  .  .  .  .  Op: "+"
   116  .  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.Ident {
   117  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "a"
   118  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   119  .  .  .  .  .  .  .  .  .  .  .  .  }
   120  .  .  .  .  .  .  .  .  .  .  .  }
   121  .  .  .  .  .  .  .  .  .  .  }
   122  .  .  .  .  .  .  .  .  .  }
   123  .  .  .  .  .  .  .  .  }
   124  .  .  .  .  .  .  .  }
   125  .  .  .  .  .  .  .  Else: *ast.BlockStmt {
   126  .  .  .  .  .  .  .  .  Position: ast.Position {}
   127  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 3) {
   128  .  .  .  .  .  .  .  .  .  0: *ast.AssignStmt {
   129  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   130  .  .  .  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
   131  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   132  .  .  .  .  .  .  .  .  .  .  .  .  Name: "a"
   133  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   134  .  .  .  .  .  .  .  .  .  .  .  }
   135  .  .  .  .  .  .  .  .  .  .  }
   136  .  .  .  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
   137  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BinaryExpr {
   138  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   139  .  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
   140  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "a"
   141  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   142  .  .  .  .  .  .  .  .  .  .  .  .  }
   143  .  .  .  .  .  .  .  .  .  .  .  .  Op: "+"
   144  .  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.Ident {
   145  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "b"
   146  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   147  .  .  .  .  .  .  .  .  .  .  .  .  }
   148  .  .  .  .  .  .  .  .  .  .  .  }
   149  .  .  .  .  .  .  .  .  .  .  }
   150  .  .  .  .  .  .  .  .  .  }
   151  .  .  .  .  .  .  .  .  .  1: *ast.AssignStmt {
   152  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   153  .  .  .  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
   154  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   155  .  .  .  .  .  .  .  .  .  .  .  .  Name: "c"
   156  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   157  .  .  .  .  .  .  .  .  .  .  .  }
   158  .  .  .  .  .  .  .  .  .  .  }
   159  .  .  .  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
   160  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BinaryExpr {
   161  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   162  .  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
   163  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "a"
   164  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   165  .  .  .  .  .  .  .  .  .  .  .  .  }
   166  .  .  .  .  .  .  .  .  .  .  .  .  Op: "*"
   167  .  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   168  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   169  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
   170  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "10"
   171  .  .  .  .  .  .  .  .  .  .  .  .  }
   172  .  .  .  .  .  .  .  .  .  .  .  }
   173  .  .  .  .  .  .  .  .  .  .  }
   174  .  .  .  .  .  .  .  .  .  }
   175  .  .  .  .  .  .  .  .  .  2: *ast.ExprStmt {
   176  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   177  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   178  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   179  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   180  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   181  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   182  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   183  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   184  .  .  .  .  .  .  .  .  .  .  .  .  }
   185  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   186  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   187  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   188  .  .  .  .  .  .  .  .  .  .  .  .  }
   189  .  .  .  .  .  .  .  .  .  .  .  }
   190  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   191  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   192  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "c"
   193  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   194  .  .  .  .  .  .  .  .  .  .  .  .  }
   195  .  .  .  .  .  .  .  .  .  .  .  }
   196  .  .  .  .  .  .  .  .  .  .  }
   197  .  .  .  .  .  .  .  .  .  }
   198  .  .  .  .  .  .  .  .  }
   199  .  .  .  .  .  .  .  }
   200  .  .  .  .  .  .  }
   201  .  .  .  .  .  }
   202  .  .  .  .  .  1: *ast.ReturnStmt {
   203  .  .  .  .  .  .  Position: ast.Position {}
   204  .  .  .  .  .  .  Results: []ast.Expr (len = 1) {
   205  .  .  .  .  .  .  .  0: *ast.Ident {
   206  .  .  .  .  .  .  .  .  Name: "a"
   207  .  .  .  .  .  .  .  .  Position: ast.Position {}
   208  .  .  .  .  .  .  .  }
   209  .  .  .  .  .  .  }
   210  .  .  .  .  .  }
   211  .  .  .  .  }
   212  .  .  .  }
   213  .  .  }
   214  .  .  1: *ast.FuncDecl {
   215  .  .  .  Position: ast.Position {}
   216  .  .  .  Name: *ast.Ident {
   217  .  .  .  .  Name: "TryStatement"
   218  .  .  .  .  Position: ast.Position {}
   219  .  .  .  }
   220  .  .  .  Type: *ast.FuncType {
   221  .  .  .  .  Position: ast.Position {}
   222  .  .  .  .  Params: *ast.FieldList {
   223  .  .  .  .  .  Position: ast.Position {}
   224  .  .  .  .  }
   225  .  .  .  }
   226  .  .  .  Body: *ast.BlockStmt {
   227  .  .  .  .  Position: ast.Position {}
   228  .  .  .  .  List: []ast.Stmt (len = 3) {
   229  .  .  .  .  .  0: *ast.ExprStmt {
   230  .  .  .  .  .  .  Position: ast.Position {}
   231  .  .  .  .  .  .  Expr: *ast.CallExpr {
   232  .  .  .  .  .  .  .  Position: ast.Position {}
   233  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   234  .  .  .  .  .  .  .  .  Position: ast.Position {}
   235  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   236  .  .  .  .  .  .  .  .  .  Name: "console"
   237  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   238  .  .  .  .  .  .  .  .  }
   239  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   240  .  .  .  .  .  .  .  .  .  Name: "log"
   241  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   242  .  .  .  .  .  .  .  .  }
   243  .  .  .  .  .  .  .  }
   244  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   245  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   246  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   247  .  .  .  .  .  .  .  .  .  Kind: "string"
   248  .  .  .  .  .  .  .  .  .  Value: "try entry"
   249  .  .  .  .  .  .  .  .  }
   250  .  .  .  .  .  .  .  }
   251  .  .  .  .  .  .  }
   252  .  .  .  .  .  }
   253  .  .  .  .  .  1: *ast.TryStmt {
   254  .  .  .  .  .  .  Position: ast.Position {}
   255  .  .  .  .  .  .  Body: *ast.BlockStmt {
   256  .  .  .  .  .  .  .  Position: ast.Position {}
   257  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
   258  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   259  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   260  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   261  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   262  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   263  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   264  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   265  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   266  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   267  .  .  .  .  .  .  .  .  .  .  .  }
   268  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   269  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   270  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   271  .  .  .  .  .  .  .  .  .  .  .  }
   272  .  .  .  .  .  .  .  .  .  .  }
   273  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   274  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   275  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   276  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   277  .  .  .  .  .  .  .  .  .  .  .  .  Value: "try body"
   278  .  .  .  .  .  .  .  .  .  .  .  }
   279  .  .  .  .  .  .  .  .  .  .  }
   280  .  .  .  .  .  .  .  .  .  }
   281  .  .  .  .  .  .  .  .  }
   282  .  .  .  .  .  .  .  }
   283  .  .  .  .  .  .  }
   284  .  .  .  .  .  .  CatchClause: []*ast.CatchClause (len = 1) {
   285  .  .  .  .  .  .  .  0: *ast.CatchClause {
   286  .  .  .  .  .  .  .  .  Position: ast.Position {}
   287  .  .  .  .  .  .  .  .  Parameter: *ast.Ident {
   288  .  .  .  .  .  .  .  .  .  Name: "e"
   289  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   290  .  .  .  .  .  .  .  .  }
   291  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
   292  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   293  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
   294  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   295  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   296  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   297  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   298  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   299  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   300  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   301  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   302  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   303  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   304  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   305  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   306  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   307  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   308  .  .  .  .  .  .  .  .  .  .  .  .  }
   309  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   310  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   311  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "e"
   312  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   313  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   314  .  .  .  .  .  .  .  .  .  .  .  .  }
   315  .  .  .  .  .  .  .  .  .  .  .  }
   316  .  .  .  .  .  .  .  .  .  .  }
   317  .  .  .  .  .  .  .  .  .  .  1: *ast.ExprStmt {
   318  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   319  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   320  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   321  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   322  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   323  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   324  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   325  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   326  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   327  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   328  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   329  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   330  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   331  .  .  .  .  .  .  .  .  .  .  .  .  }
   332  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   333  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   334  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   335  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   336  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "try catch"
   337  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   338  .  .  .  .  .  .  .  .  .  .  .  .  }
   339  .  .  .  .  .  .  .  .  .  .  .  }
   340  .  .  .  .  .  .  .  .  .  .  }
   341  .  .  .  .  .  .  .  .  .  }
   342  .  .  .  .  .  .  .  .  }
   343  .  .  .  .  .  .  .  }
   344  .  .  .  .  .  .  }
   345  .  .  .  .  .  .  Finalizer: *ast.BlockStmt {
   346  .  .  .  .  .  .  .  Position: ast.Position {}
   347  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
   348  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   349  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   350  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   351  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   352  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   353  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   354  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   355  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   356  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   357  .  .  .  .  .  .  .  .  .  .  .  }
   358  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   359  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   360  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   361  .  .  .  .  .  .  .  .  .  .  .  }
   362  .  .  .  .  .  .  .  .  .  .  }
   363  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   364  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   365  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   366  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   367  .  .  .  .  .  .  .  .  .  .  .  .  Value: "try finally"
   368  .  .  .  .  .  .  .  .  .  .  .  }
   369  .  .  .  .  .  .  .  .  .  .  }
   370  .  .  .  .  .  .  .  .  .  }
   371  .  .  .  .  .  .  .  .  }
   372  .  .  .  .  .  .  .  }
   373  .  .  .  .  .  .  }
   374  .  .  .  .  .  }
   375  .  .  .  .  .  2: *ast.ExprStmt {
   376  .  .  .  .  .  .  Position: ast.Position {}
   377  .  .  .  .  .  .  Expr: *ast.CallExpr {
   378  .  .  .  .  .  .  .  Position: ast.Position {}
   379  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   380  .  .  .  .  .  .  .  .  Position: ast.Position {}
   381  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   382  .  .  .  .  .  .  .  .  .  Name: "console"
   383  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   384  .  .  .  .  .  .  .  .  }
   385  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   386  .  .  .  .  .  .  .  .  .  Name: "log"
   387  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   388  .  .  .  .  .  .  .  .  }
   389  .  .  .  .  .  .  .  }
   390  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   391  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   392  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   393  .  .  .  .  .  .  .  .  .  Kind: "string"
   394  .  .  .  .  .  .  .  .  .  Value: "try done"
   395  .  .  .  .  .  .  .  .  }
   396  .  .  .  .  .  .  .  }
   397  .  .  .  .  .  .  }
   398  .  .  .  .  .  }
   399  .  .  .  .  }
   400  .  .  .  }
   401  .  .  }
   402  .  .  2: *ast.FuncDecl {
   403  .  .  .  Position: ast.Position {}
   404  .  .  .  Name: *ast.Ident {
   405  .  .  .  .  Name: "TryStatementWithoutFinally"
   406  .  .  .  .  Position: ast.Position {}
   407  .  .  .  }
   408  .  .  .  Type: *ast.FuncType {
   409  .  .  .  .  Position: ast.Position {}
   410  .  .  .  .  Params: *ast.FieldList {
   411  .  .  .  .  .  Position: ast.Position {}
   412  .  .  .  .  }
   413  .  .  .  }
   414  .  .  .  Body: *ast.BlockStmt {
   415  .  .  .  .  Position: ast.Position {}
   416  .  .  .  .  List: []ast.Stmt (len = 3) {
   417  .  .  .  .  .  0: *ast.ExprStmt {
   418  .  .  .  .  .  .  Position: ast.Position {}
   419  .  .  .  .  .  .  Expr: *ast.CallExpr {
   420  .  .  .  .  .  .  .  Position: ast.Position {}
   421  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   422  .  .  .  .  .  .  .  .  Position: ast.Position {}
   423  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   424  .  .  .  .  .  .  .  .  .  Name: "console"
   425  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   426  .  .  .  .  .  .  .  .  }
   427  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   428  .  .  .  .  .  .  .  .  .  Name: "log"
   429  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   430  .  .  .  .  .  .  .  .  }
   431  .  .  .  .  .  .  .  }
   432  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   433  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   434  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   435  .  .  .  .  .  .  .  .  .  Kind: "string"
   436  .  .  .  .  .  .  .  .  .  Value: "try entry"
   437  .  .  .  .  .  .  .  .  }
   438  .  .  .  .  .  .  .  }
   439  .  .  .  .  .  .  }
   440  .  .  .  .  .  }
   441  .  .  .  .  .  1: *ast.TryStmt {
   442  .  .  .  .  .  .  Position: ast.Position {}
   443  .  .  .  .  .  .  Body: *ast.BlockStmt {
   444  .  .  .  .  .  .  .  Position: ast.Position {}
   445  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
   446  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   447  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   448  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   449  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   450  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   451  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   452  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   453  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   454  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   455  .  .  .  .  .  .  .  .  .  .  .  }
   456  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   457  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   458  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   459  .  .  .  .  .  .  .  .  .  .  .  }
   460  .  .  .  .  .  .  .  .  .  .  }
   461  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   462  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   463  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   464  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   465  .  .  .  .  .  .  .  .  .  .  .  .  Value: "try body"
   466  .  .  .  .  .  .  .  .  .  .  .  }
   467  .  .  .  .  .  .  .  .  .  .  }
   468  .  .  .  .  .  .  .  .  .  }
   469  .  .  .  .  .  .  .  .  }
   470  .  .  .  .  .  .  .  }
   471  .  .  .  .  .  .  }
   472  .  .  .  .  .  .  CatchClause: []*ast.CatchClause (len = 1) {
   473  .  .  .  .  .  .  .  0: *ast.CatchClause {
   474  .  .  .  .  .  .  .  .  Position: ast.Position {}
   475  .  .  .  .  .  .  .  .  Parameter: *ast.Ident {
   476  .  .  .  .  .  .  .  .  .  Name: "e"
   477  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   478  .  .  .  .  .  .  .  .  }
   479  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
   480  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   481  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
   482  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   483  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   484  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   485  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   486  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   487  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   488  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   489  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   490  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   491  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   492  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   493  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   494  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   495  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   496  .  .  .  .  .  .  .  .  .  .  .  .  }
   497  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   498  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   499  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "e"
   500  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   501  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   502  .  .  .  .  .  .  .  .  .  .  .  .  }
   503  .  .  .  .  .  .  .  .  .  .  .  }
   504  .  .  .  .  .  .  .  .  .  .  }
   505  .  .  .  .  .  .  .  .  .  .  1: *ast.ExprStmt {
   506  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   507  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   508  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   509  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   510  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   511  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   512  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   513  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   514  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   515  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   516  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   517  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   518  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   519  .  .  .  .  .  .  .  .  .  .  .  .  }
   520  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   521  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   522  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   523  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   524  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "try catch"
   525  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   526  .  .  .  .  .  .  .  .  .  .  .  .  }
   527  .  .  .  .  .  .  .  .  .  .  .  }
   528  .  .  .  .  .  .  .  .  .  .  }
   529  .  .  .  .  .  .  .  .  .  }
   530  .  .  .  .  .  .  .  .  }
   531  .  .  .  .  .  .  .  }
   532  .  .  .  .  .  .  }
   533  .  .  .  .  .  }
   534  .  .  .  .  .  2: *ast.ExprStmt {
   535  .  .  .  .  .  .  Position: ast.Position {}
   536  .  .  .  .  .  .  Expr: *ast.CallExpr {
   537  .  .  .  .  .  .  .  Position: ast.Position {}
   538  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   539  .  .  .  .  .  .  .  .  Position: ast.Position {}
   540  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   541  .  .  .  .  .  .  .  .  .  Name: "console"
   542  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   543  .  .  .  .  .  .  .  .  }
   544  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   545  .  .  .  .  .  .  .  .  .  Name: "log"
   546  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   547  .  .  .  .  .  .  .  .  }
   548  .  .  .  .  .  .  .  }
   549  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   550  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   551  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   552  .  .  .  .  .  .  .  .  .  Kind: "string"
   553  .  .  .  .  .  .  .  .  .  Value: "try done"
   554  .  .  .  .  .  .  .  .  }
   555  .  .  .  .  .  .  .  }
   556  .  .  .  .  .  .  }
   557  .  .  .  .  .  }
   558  .  .  .  .  }
   559  .  .  .  }
   560  .  .  }
   561  .  .  3: *ast.FuncDecl {
   562  .  .  .  Position: ast.Position {}
   563  .  .  .  Name: *ast.Ident {
   564  .  .  .  .  Name: "TryStatementWithoutCatch"
   565  .  .  .  .  Position: ast.Position {}
   566  .  .  .  }
   567  .  .  .  Type: *ast.FuncType {
   568  .  .  .  .  Position: ast.Position {}
   569  .  .  .  .  Params: *ast.FieldList {
   570  .  .  .  .  .  Position: ast.Position {}
   571  .  .  .  .  }
   572  .  .  .  }
   573  .  .  .  Body: *ast.BlockStmt {
   574  .  .  .  .  Position: ast.Position {}
   575  .  .  .  .  List: []ast.Stmt (len = 3) {
   576  .  .  .  .  .  0: *ast.ExprStmt {
   577  .  .  .  .  .  .  Position: ast.Position {}
   578  .  .  .  .  .  .  Expr: *ast.CallExpr {
   579  .  .  .  .  .  .  .  Position: ast.Position {}
   580  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   581  .  .  .  .  .  .  .  .  Position: ast.Position {}
   582  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   583  .  .  .  .  .  .  .  .  .  Name: "console"
   584  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   585  .  .  .  .  .  .  .  .  }
   586  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   587  .  .  .  .  .  .  .  .  .  Name: "log"
   588  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   589  .  .  .  .  .  .  .  .  }
   590  .  .  .  .  .  .  .  }
   591  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   592  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   593  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   594  .  .  .  .  .  .  .  .  .  Kind: "string"
   595  .  .  .  .  .  .  .  .  .  Value: "try entry"
   596  .  .  .  .  .  .  .  .  }
   597  .  .  .  .  .  .  .  }
   598  .  .  .  .  .  .  }
   599  .  .  .  .  .  }
   600  .  .  .  .  .  1: *ast.TryStmt {
   601  .  .  .  .  .  .  Position: ast.Position {}
   602  .  .  .  .  .  .  Body: *ast.BlockStmt {
   603  .  .  .  .  .  .  .  Position: ast.Position {}
   604  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
   605  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   606  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   607  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   608  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   609  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   610  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   611  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   612  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   613  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   614  .  .  .  .  .  .  .  .  .  .  .  }
   615  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   616  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   617  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   618  .  .  .  .  .  .  .  .  .  .  .  }
   619  .  .  .  .  .  .  .  .  .  .  }
   620  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   621  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   622  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   623  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   624  .  .  .  .  .  .  .  .  .  .  .  .  Value: "try body"
   625  .  .  .  .  .  .  .  .  .  .  .  }
   626  .  .  .  .  .  .  .  .  .  .  }
   627  .  .  .  .  .  .  .  .  .  }
   628  .  .  .  .  .  .  .  .  }
   629  .  .  .  .  .  .  .  }
   630  .  .  .  .  .  .  }
   631  .  .  .  .  .  .  Finalizer: *ast.BlockStmt {
   632  .  .  .  .  .  .  .  Position: ast.Position {}
   633  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
   634  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   635  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   636  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   637  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   638  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   639  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   640  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   641  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   642  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   643  .  .  .  .  .  .  .  .  .  .  .  }
   644  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   645  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   646  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   647  .  .  .  .  .  .  .  .  .  .  .  }
   648  .  .  .  .  .  .  .  .  .  .  }
   649  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   650  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   651  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   652  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   653  .  .  .  .  .  .  .  .  .  .  .  .  Value: "try finally"
   654  .  .  .  .  .  .  .  .  .  .  .  }
   655  .  .  .  .  .  .  .  .  .  .  }
   656  .  .  .  .  .  .  .  .  .  }
   657  .  .  .  .  .  .  .  .  }
   658  .  .  .  .  .  .  .  }
   659  .  .  .  .  .  .  }
   660  .  .  .  .  .  }
   661  .  .  .  .  .  2: *ast.ExprStmt {
   662  .  .  .  .  .  .  Position: ast.Position {}
   663  .  .  .  .  .  .  Expr: *ast.CallExpr {
   664  .  .  .  .  .  .  .  Position: ast.Position {}
   665  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   666  .  .  .  .  .  .  .  .  Position: ast.Position {}
   667  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   668  .  .  .  .  .  .  .  .  .  Name: "console"
   669  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   670  .  .  .  .  .  .  .  .  }
   671  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   672  .  .  .  .  .  .  .  .  .  Name: "log"
   673  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   674  .  .  .  .  .  .  .  .  }
   675  .  .  .  .  .  .  .  }
   676  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   677  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   678  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   679  .  .  .  .  .  .  .  .  .  Kind: "string"
   680  .  .  .  .  .  .  .  .  .  Value: "try done"
   681  .  .  .  .  .  .  .  .  }
   682  .  .  .  .  .  .  .  }
   683  .  .  .  .  .  .  }
   684  .  .  .  .  .  }
   685  .  .  .  .  }
   686  .  .  .  }
   687  .  .  }
   688  .  .  4: *ast.FuncDecl {
   689  .  .  .  Position: ast.Position {}
   690  .  .  .  Name: *ast.Ident {
   691  .  .  .  .  Name: "WhileStatement"
   692  .  .  .  .  Position: ast.Position {}
   693  .  .  .  }
   694  .  .  .  Type: *ast.FuncType {
   695  .  .  .  .  Position: ast.Position {}
   696  .  .  .  .  Params: *ast.FieldList {
   697  .  .  .  .  .  Position: ast.Position {}
   698  .  .  .  .  }
   699  .  .  .  }
   700  .  .  .  Body: *ast.BlockStmt {
   701  .  .  .  .  Position: ast.Position {}
   702  .  .  .  .  List: []ast.Stmt (len = 3) {
   703  .  .  .  .  .  0: *ast.AssignStmt {
   704  .  .  .  .  .  .  Position: ast.Position {}
   705  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
   706  .  .  .  .  .  .  .  0: *ast.Ident {
   707  .  .  .  .  .  .  .  .  Name: "i"
   708  .  .  .  .  .  .  .  .  Position: ast.Position {}
   709  .  .  .  .  .  .  .  }
   710  .  .  .  .  .  .  }
   711  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
   712  .  .  .  .  .  .  .  0: *ast.BasicLit {
   713  .  .  .  .  .  .  .  .  Position: ast.Position {}
   714  .  .  .  .  .  .  .  .  Kind: "number"
   715  .  .  .  .  .  .  .  .  Value: "0"
   716  .  .  .  .  .  .  .  }
   717  .  .  .  .  .  .  }
   718  .  .  .  .  .  }
   719  .  .  .  .  .  1: *ast.WhileStmt {
   720  .  .  .  .  .  .  Position: ast.Position {}
   721  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
   722  .  .  .  .  .  .  .  Position: ast.Position {}
   723  .  .  .  .  .  .  .  Left: *ast.Ident {
   724  .  .  .  .  .  .  .  .  Name: "i"
   725  .  .  .  .  .  .  .  .  Position: ast.Position {}
   726  .  .  .  .  .  .  .  }
   727  .  .  .  .  .  .  .  Op: "<="
   728  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   729  .  .  .  .  .  .  .  .  Position: ast.Position {}
   730  .  .  .  .  .  .  .  .  Kind: "number"
   731  .  .  .  .  .  .  .  .  Value: "5"
   732  .  .  .  .  .  .  .  }
   733  .  .  .  .  .  .  }
   734  .  .  .  .  .  .  Body: *ast.BlockStmt {
   735  .  .  .  .  .  .  .  Position: ast.Position {}
   736  .  .  .  .  .  .  .  List: []ast.Stmt (len = 4) {
   737  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   738  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   739  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   740  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   741  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   742  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   743  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   744  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   745  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   746  .  .  .  .  .  .  .  .  .  .  .  }
   747  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   748  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   749  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   750  .  .  .  .  .  .  .  .  .  .  .  }
   751  .  .  .  .  .  .  .  .  .  .  }
   752  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   753  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   754  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   755  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   756  .  .  .  .  .  .  .  .  .  .  .  .  Value: "test"
   757  .  .  .  .  .  .  .  .  .  .  .  }
   758  .  .  .  .  .  .  .  .  .  .  }
   759  .  .  .  .  .  .  .  .  .  }
   760  .  .  .  .  .  .  .  .  }
   761  .  .  .  .  .  .  .  .  1: *ast.IfStmt {
   762  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   763  .  .  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
   764  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   765  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
   766  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
   767  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   768  .  .  .  .  .  .  .  .  .  .  }
   769  .  .  .  .  .  .  .  .  .  .  Op: "==="
   770  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   771  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   772  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
   773  .  .  .  .  .  .  .  .  .  .  .  Value: "2"
   774  .  .  .  .  .  .  .  .  .  .  }
   775  .  .  .  .  .  .  .  .  .  }
   776  .  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
   777  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   778  .  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
   779  .  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   780  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   781  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   782  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   783  .  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   784  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   785  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   786  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   787  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   788  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   789  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   790  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   791  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   792  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   793  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   794  .  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   795  .  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   796  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   797  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   798  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "two"
   799  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   800  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   801  .  .  .  .  .  .  .  .  .  .  .  .  }
   802  .  .  .  .  .  .  .  .  .  .  .  }
   803  .  .  .  .  .  .  .  .  .  .  .  1: *ast.ContinueStatement {
   804  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   805  .  .  .  .  .  .  .  .  .  .  .  }
   806  .  .  .  .  .  .  .  .  .  .  }
   807  .  .  .  .  .  .  .  .  .  }
   808  .  .  .  .  .  .  .  .  }
   809  .  .  .  .  .  .  .  .  2: *ast.IfStmt {
   810  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   811  .  .  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
   812  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   813  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
   814  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
   815  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   816  .  .  .  .  .  .  .  .  .  .  }
   817  .  .  .  .  .  .  .  .  .  .  Op: "==="
   818  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   819  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   820  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
   821  .  .  .  .  .  .  .  .  .  .  .  Value: "4"
   822  .  .  .  .  .  .  .  .  .  .  }
   823  .  .  .  .  .  .  .  .  .  }
   824  .  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
   825  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   826  .  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
   827  .  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   828  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   829  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   830  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   831  .  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   832  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   833  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   834  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   835  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   836  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   837  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   838  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   839  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   840  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   841  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   842  .  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   843  .  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   844  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   845  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   846  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "finish"
   847  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   848  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   849  .  .  .  .  .  .  .  .  .  .  .  .  }
   850  .  .  .  .  .  .  .  .  .  .  .  }
   851  .  .  .  .  .  .  .  .  .  .  .  1: *ast.BreakStatement {
   852  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   853  .  .  .  .  .  .  .  .  .  .  .  }
   854  .  .  .  .  .  .  .  .  .  .  }
   855  .  .  .  .  .  .  .  .  .  }
   856  .  .  .  .  .  .  .  .  }
   857  .  .  .  .  .  .  .  .  3: *ast.ExprStmt {
   858  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   859  .  .  .  .  .  .  .  .  .  Expr: *ast.IncExpr {
   860  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   861  .  .  .  .  .  .  .  .  .  .  Op: "++"
   862  .  .  .  .  .  .  .  .  .  .  Arg: *ast.Ident {
   863  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
   864  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   865  .  .  .  .  .  .  .  .  .  .  }
   866  .  .  .  .  .  .  .  .  .  }
   867  .  .  .  .  .  .  .  .  }
   868  .  .  .  .  .  .  .  }
   869  .  .  .  .  .  .  }
   870  .  .  .  .  .  }
   871  .  .  .  .  .  2: *ast.ExprStmt {
   872  .  .  .  .  .  .  Position: ast.Position {}
   873  .  .  .  .  .  .  Expr: *ast.CallExpr {
   874  .  .  .  .  .  .  .  Position: ast.Position {}
   875  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   876  .  .  .  .  .  .  .  .  Position: ast.Position {}
   877  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   878  .  .  .  .  .  .  .  .  .  Name: "console"
   879  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   880  .  .  .  .  .  .  .  .  }
   881  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   882  .  .  .  .  .  .  .  .  .  Name: "log"
   883  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   884  .  .  .  .  .  .  .  .  }
   885  .  .  .  .  .  .  .  }
   886  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   887  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   888  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   889  .  .  .  .  .  .  .  .  .  Kind: "string"
   890  .  .  .  .  .  .  .  .  .  Value: "finish"
   891  .  .  .  .  .  .  .  .  }
   892  .  .  .  .  .  .  .  }
   893  .  .  .  .  .  .  }
   894  .  .  .  .  .  }
   895  .  .  .  .  }
   896  .  .  .  }
   897  .  .  }
   898  .  .  5: *ast.FuncDecl {
   899  .  .  .  Position: ast.Position {}
   900  .  .  .  Name: *ast.Ident {
   901  .  .  .  .  Name: "LabeledWhileStatement"
   902  .  .  .  .  Position: ast.Position {}
   903  .  .  .  }
   904  .  .  .  Type: *ast.FuncType {
   905  .  .  .  .  Position: ast.Position {}
   906  .  .  .  .  Params: *ast.FieldList {
   907  .  .  .  .  .  Position: ast.Position {}
   908  .  .  .  .  }
   909  .  .  .  }
   910  .  .  .  Body: *ast.BlockStmt {
   911  .  .  .  .  Position: ast.Position {}
   912  .  .  .  .  List: []ast.Stmt (len = 2) {
   913  .  .  .  .  .  0: *ast.AssignStmt {
   914  .  .  .  .  .  .  Position: ast.Position {}
   915  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
   916  .  .  .  .  .  .  .  0: *ast.Ident {
   917  .  .  .  .  .  .  .  .  Name: "x"
   918  .  .  .  .  .  .  .  .  Position: ast.Position {}
   919  .  .  .  .  .  .  .  }
   920  .  .  .  .  .  .  }
   921  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
   922  .  .  .  .  .  .  .  0: *ast.BasicLit {
   923  .  .  .  .  .  .  .  .  Position: ast.Position {}
   924  .  .  .  .  .  .  .  .  Kind: "number"
   925  .  .  .  .  .  .  .  .  Value: "0"
   926  .  .  .  .  .  .  .  }
   927  .  .  .  .  .  .  }
   928  .  .  .  .  .  }
   929  .  .  .  .  .  1: *ast.LabeledStatement {
   930  .  .  .  .  .  .  Position: ast.Position {}
   931  .  .  .  .  .  .  Label: *ast.Ident {
   932  .  .  .  .  .  .  .  Name: "whileStmt"
   933  .  .  .  .  .  .  .  Position: ast.Position {}
   934  .  .  .  .  .  .  }
   935  .  .  .  .  .  .  Body: *ast.WhileStmt {
   936  .  .  .  .  .  .  .  Position: ast.Position {}
   937  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
   938  .  .  .  .  .  .  .  .  Position: ast.Position {}
   939  .  .  .  .  .  .  .  .  Left: *ast.Ident {
   940  .  .  .  .  .  .  .  .  .  Name: "x"
   941  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   942  .  .  .  .  .  .  .  .  }
   943  .  .  .  .  .  .  .  .  Op: "<="
   944  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   945  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   946  .  .  .  .  .  .  .  .  .  Kind: "number"
   947  .  .  .  .  .  .  .  .  .  Value: "5"
   948  .  .  .  .  .  .  .  .  }
   949  .  .  .  .  .  .  .  }
   950  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
   951  .  .  .  .  .  .  .  .  Position: ast.Position {}
   952  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 4) {
   953  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   954  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   955  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   956  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   957  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   958  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   959  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   960  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   961  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   962  .  .  .  .  .  .  .  .  .  .  .  .  }
   963  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   964  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   965  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   966  .  .  .  .  .  .  .  .  .  .  .  .  }
   967  .  .  .  .  .  .  .  .  .  .  .  }
   968  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   969  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   970  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   971  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   972  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "test"
   973  .  .  .  .  .  .  .  .  .  .  .  .  }
   974  .  .  .  .  .  .  .  .  .  .  .  }
   975  .  .  .  .  .  .  .  .  .  .  }
   976  .  .  .  .  .  .  .  .  .  }
   977  .  .  .  .  .  .  .  .  .  1: *ast.IfStmt {
   978  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   979  .  .  .  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
   980  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   981  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
   982  .  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
   983  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   984  .  .  .  .  .  .  .  .  .  .  .  }
   985  .  .  .  .  .  .  .  .  .  .  .  Op: "==="
   986  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   987  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   988  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
   989  .  .  .  .  .  .  .  .  .  .  .  .  Value: "4"
   990  .  .  .  .  .  .  .  .  .  .  .  }
   991  .  .  .  .  .  .  .  .  .  .  }
   992  .  .  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
   993  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   994  .  .  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
   995  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   996  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   997  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   998  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   999  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1000  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1001  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  1002  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
  1003  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1004  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1005  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1006  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
  1007  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1008  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1009  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1010  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  1011  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1012  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1013  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  1014  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "finish"
  1015  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1016  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1017  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1018  .  .  .  .  .  .  .  .  .  .  .  .  }
  1019  .  .  .  .  .  .  .  .  .  .  .  .  1: *ast.BreakStatement {
  1020  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1021  .  .  .  .  .  .  .  .  .  .  .  .  .  Label: *ast.Ident {
  1022  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "whileStmt"
  1023  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1024  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1025  .  .  .  .  .  .  .  .  .  .  .  .  }
  1026  .  .  .  .  .  .  .  .  .  .  .  }
  1027  .  .  .  .  .  .  .  .  .  .  }
  1028  .  .  .  .  .  .  .  .  .  }
  1029  .  .  .  .  .  .  .  .  .  2: *ast.IfStmt {
  1030  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1031  .  .  .  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
  1032  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1033  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
  1034  .  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
  1035  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1036  .  .  .  .  .  .  .  .  .  .  .  }
  1037  .  .  .  .  .  .  .  .  .  .  .  Op: "==="
  1038  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
  1039  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1040  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
  1041  .  .  .  .  .  .  .  .  .  .  .  .  Value: "2"
  1042  .  .  .  .  .  .  .  .  .  .  .  }
  1043  .  .  .  .  .  .  .  .  .  .  }
  1044  .  .  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
  1045  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1046  .  .  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
  1047  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
  1048  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1049  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
  1050  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1051  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1052  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1053  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  1054  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
  1055  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1056  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1057  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1058  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
  1059  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1060  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1061  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1062  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  1063  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1064  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1065  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  1066  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "two"
  1067  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1068  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1069  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1070  .  .  .  .  .  .  .  .  .  .  .  .  }
  1071  .  .  .  .  .  .  .  .  .  .  .  .  1: *ast.ContinueStatement {
  1072  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1073  .  .  .  .  .  .  .  .  .  .  .  .  .  Label: *ast.Ident {
  1074  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "whileStmt"
  1075  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1076  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1077  .  .  .  .  .  .  .  .  .  .  .  .  }
  1078  .  .  .  .  .  .  .  .  .  .  .  }
  1079  .  .  .  .  .  .  .  .  .  .  }
  1080  .  .  .  .  .  .  .  .  .  }
  1081  .  .  .  .  .  .  .  .  .  3: *ast.ExprStmt {
  1082  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1083  .  .  .  .  .  .  .  .  .  .  Expr: *ast.IncExpr {
  1084  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1085  .  .  .  .  .  .  .  .  .  .  .  Op: "++"
  1086  .  .  .  .  .  .  .  .  .  .  .  Arg: *ast.Ident {
  1087  .  .  .  .  .  .  .  .  .  .  .  .  Name: "x"
  1088  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1089  .  .  .  .  .  .  .  .  .  .  .  }
  1090  .  .  .  .  .  .  .  .  .  .  }
  1091  .  .  .  .  .  .  .  .  .  }
  1092  .  .  .  .  .  .  .  .  }
  1093  .  .  .  .  .  .  .  }
  1094  .  .  .  .  .  .  }
  1095  .  .  .  .  .  }
  1096  .  .  .  .  }
  1097  .  .  .  }
  1098  .  .  }
  1099  .  .  6: *ast.FuncDecl {
  1100  .  .  .  Position: ast.Position {}
  1101  .  .  .  Name: *ast.Ident {
  1102  .  .  .  .  Name: "LabeledForStatement"
  1103  .  .  .  .  Position: ast.Position {}
  1104  .  .  .  }
  1105  .  .  .  Type: *ast.FuncType {
  1106  .  .  .  .  Position: ast.Position {}
  1107  .  .  .  .  Params: *ast.FieldList {
  1108  .  .  .  .  .  Position: ast.Position {}
  1109  .  .  .  .  }
  1110  .  .  .  }
  1111  .  .  .  Body: *ast.BlockStmt {
  1112  .  .  .  .  Position: ast.Position {}
  1113  .  .  .  .  List: []ast.Stmt (len = 1) {
  1114  .  .  .  .  .  0: *ast.LabeledStatement {
  1115  .  .  .  .  .  .  Position: ast.Position {}
  1116  .  .  .  .  .  .  Label: *ast.Ident {
  1117  .  .  .  .  .  .  .  Name: "outer"
  1118  .  .  .  .  .  .  .  Position: ast.Position {}
  1119  .  .  .  .  .  .  }
  1120  .  .  .  .  .  .  Body: *ast.ForStatement {
  1121  .  .  .  .  .  .  .  Position: ast.Position {}
  1122  .  .  .  .  .  .  .  VarDecl: *ast.AssignStmt {
  1123  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1124  .  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
  1125  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
  1126  .  .  .  .  .  .  .  .  .  .  Name: "i"
  1127  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1128  .  .  .  .  .  .  .  .  .  }
  1129  .  .  .  .  .  .  .  .  }
  1130  .  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
  1131  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1132  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1133  .  .  .  .  .  .  .  .  .  .  Kind: "number"
  1134  .  .  .  .  .  .  .  .  .  .  Value: "0"
  1135  .  .  .  .  .  .  .  .  .  }
  1136  .  .  .  .  .  .  .  .  }
  1137  .  .  .  .  .  .  .  }
  1138  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
  1139  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1140  .  .  .  .  .  .  .  .  Left: *ast.Ident {
  1141  .  .  .  .  .  .  .  .  .  Name: "i"
  1142  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1143  .  .  .  .  .  .  .  .  }
  1144  .  .  .  .  .  .  .  .  Op: "<"
  1145  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
  1146  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1147  .  .  .  .  .  .  .  .  .  Kind: "number"
  1148  .  .  .  .  .  .  .  .  .  Value: "20"
  1149  .  .  .  .  .  .  .  .  }
  1150  .  .  .  .  .  .  .  }
  1151  .  .  .  .  .  .  .  Increment: *ast.IncExpr {
  1152  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1153  .  .  .  .  .  .  .  .  Op: "++"
  1154  .  .  .  .  .  .  .  .  Arg: *ast.Ident {
  1155  .  .  .  .  .  .  .  .  .  Name: "i"
  1156  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1157  .  .  .  .  .  .  .  .  }
  1158  .  .  .  .  .  .  .  }
  1159  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
  1160  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1161  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
  1162  .  .  .  .  .  .  .  .  .  0: *ast.ForStatement {
  1163  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1164  .  .  .  .  .  .  .  .  .  .  VarDecl: *ast.AssignStmt {
  1165  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1166  .  .  .  .  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
  1167  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
  1168  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "j"
  1169  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1170  .  .  .  .  .  .  .  .  .  .  .  .  }
  1171  .  .  .  .  .  .  .  .  .  .  .  }
  1172  .  .  .  .  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
  1173  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1174  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1175  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
  1176  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "0"
  1177  .  .  .  .  .  .  .  .  .  .  .  .  }
  1178  .  .  .  .  .  .  .  .  .  .  .  }
  1179  .  .  .  .  .  .  .  .  .  .  }
  1180  .  .  .  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
  1181  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1182  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
  1183  .  .  .  .  .  .  .  .  .  .  .  .  Name: "j"
  1184  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1185  .  .  .  .  .  .  .  .  .  .  .  }
  1186  .  .  .  .  .  .  .  .  .  .  .  Op: "<"
  1187  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
  1188  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1189  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
  1190  .  .  .  .  .  .  .  .  .  .  .  .  Value: "10"
  1191  .  .  .  .  .  .  .  .  .  .  .  }
  1192  .  .  .  .  .  .  .  .  .  .  }
  1193  .  .  .  .  .  .  .  .  .  .  Increment: *ast.IncExpr {
  1194  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1195  .  .  .  .  .  .  .  .  .  .  .  Op: "++"
  1196  .  .  .  .  .  .  .  .  .  .  .  Arg: *ast.Ident {
  1197  .  .  .  .  .  .  .  .  .  .  .  .  Name: "j"
  1198  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1199  .  .  .  .  .  .  .  .  .  .  .  }
  1200  .  .  .  .  .  .  .  .  .  .  }
  1201  .  .  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
  1202  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1203  .  .  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
  1204  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.IfStmt {
  1205  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1206  .  .  .  .  .  .  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
  1207  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1208  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
  1209  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "j"
  1210  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1211  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1212  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Op: "=="
  1213  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.Ident {
  1214  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
  1215  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1216  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1217  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1218  .  .  .  .  .  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
  1219  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1220  .  .  .  .  .  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
  1221  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.ContinueStatement {
  1222  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1223  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Label: *ast.Ident {
  1224  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "outer"
  1225  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1226  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1227  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1228  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1229  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1230  .  .  .  .  .  .  .  .  .  .  .  .  }
  1231  .  .  .  .  .  .  .  .  .  .  .  .  1: *ast.IfStmt {
  1232  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1233  .  .  .  .  .  .  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
  1234  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1235  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.BinaryExpr {
  1236  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1237  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
  1238  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "j"
  1239  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1240  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1241  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Op: "/"
  1242  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
  1243  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1244  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
  1245  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "5"
  1246  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1247  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1248  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Op: ">"
  1249  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
  1250  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1251  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
  1252  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "2"
  1253  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1254  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1255  .  .  .  .  .  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
  1256  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1257  .  .  .  .  .  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
  1258  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BreakStatement {
  1259  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1260  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1261  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1262  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1263  .  .  .  .  .  .  .  .  .  .  .  .  }
  1264  .  .  .  .  .  .  .  .  .  .  .  }
  1265  .  .  .  .  .  .  .  .  .  .  }
  1266  .  .  .  .  .  .  .  .  .  }
  1267  .  .  .  .  .  .  .  .  .  1: *ast.IfStmt {
  1268  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1269  .  .  .  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
  1270  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1271  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.BinaryExpr {
  1272  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1273  .  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
  1274  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
  1275  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1276  .  .  .  .  .  .  .  .  .  .  .  .  }
  1277  .  .  .  .  .  .  .  .  .  .  .  .  Op: "%"
  1278  .  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
  1279  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1280  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
  1281  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "2"
  1282  .  .  .  .  .  .  .  .  .  .  .  .  }
  1283  .  .  .  .  .  .  .  .  .  .  .  }
  1284  .  .  .  .  .  .  .  .  .  .  .  Op: "==="
  1285  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
  1286  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1287  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
  1288  .  .  .  .  .  .  .  .  .  .  .  .  Value: "0"
  1289  .  .  .  .  .  .  .  .  .  .  .  }
  1290  .  .  .  .  .  .  .  .  .  .  }
  1291  .  .  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
  1292  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1293  .  .  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
  1294  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BreakStatement {
  1295  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1296  .  .  .  .  .  .  .  .  .  .  .  .  }
  1297  .  .  .  .  .  .  .  .  .  .  .  }
  1298  .  .  .  .  .  .  .  .  .  .  }
  1299  .  .  .  .  .  .  .  .  .  }
  1300  .  .  .  .  .  .  .  .  }
  1301  .  .  .  .  .  .  .  }
  1302  .  .  .  .  .  .  }
  1303  .  .  .  .  .  }
  1304  .  .  .  .  }
  1305  .  .  .  }
  1306  .  .  }
  1307  .  .  7: *ast.FuncDecl {
  1308  .  .  .  Position: ast.Position {}
  1309  .  .  .  Name: *ast.Ident {
  1310  .  .  .  .  Name: "NestedForStatement"
  1311  .  .  .  .  Position: ast.Position {}
  1312  .  .  .  }
  1313  .  .  .  Type: *ast.FuncType {
  1314  .  .  .  .  Position: ast.Position {}
  1315  .  .  .  .  Params: *ast.FieldList {
  1316  .  .  .  .  .  Position: ast.Position {}
  1317  .  .  .  .  }
  1318  .  .  .  }
  1319  .  .  .  Body: *ast.BlockStmt {
  1320  .  .  .  .  Position: ast.Position {}
  1321  .  .  .  .  List: []ast.Stmt (len = 1) {
  1322  .  .  .  .  .  0: *ast.ForStatement {
  1323  .  .  .  .  .  .  Position: ast.Position {}
  1324  .  .  .  .  .  .  VarDecl: *ast.AssignStmt {
  1325  .  .  .  .  .  .  .  Position: ast.Position {}
  1326  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
  1327  .  .  .  .  .  .  .  .  0: *ast.Ident {
  1328  .  .  .  .  .  .  .  .  .  Name: "i"
  1329  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1330  .  .  .  .  .  .  .  .  }
  1331  .  .  .  .  .  .  .  }
  1332  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
  1333  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1334  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1335  .  .  .  .  .  .  .  .  .  Kind: "number"
  1336  .  .  .  .  .  .  .  .  .  Value: "0"
  1337  .  .  .  .  .  .  .  .  }
  1338  .  .  .  .  .  .  .  }
  1339  .  .  .  .  .  .  }
  1340  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
  1341  .  .  .  .  .  .  .  Position: ast.Position {}
  1342  .  .  .  .  .  .  .  Left: *ast.Ident {
  1343  .  .  .  .  .  .  .  .  Name: "i"
  1344  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1345  .  .  .  .  .  .  .  }
  1346  .  .  .  .  .  .  .  Op: "<"
  1347  .  .  .  .  .  .  .  Right: *ast.BasicLit {
  1348  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1349  .  .  .  .  .  .  .  .  Kind: "number"
  1350  .  .  .  .  .  .  .  .  Value: "20"
  1351  .  .  .  .  .  .  .  }
  1352  .  .  .  .  .  .  }
  1353  .  .  .  .  .  .  Increment: *ast.IncExpr {
  1354  .  .  .  .  .  .  .  Position: ast.Position {}
  1355  .  .  .  .  .  .  .  Op: "++"
  1356  .  .  .  .  .  .  .  Arg: *ast.Ident {
  1357  .  .  .  .  .  .  .  .  Name: "i"
  1358  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1359  .  .  .  .  .  .  .  }
  1360  .  .  .  .  .  .  }
  1361  .  .  .  .  .  .  Body: *ast.BlockStmt {
  1362  .  .  .  .  .  .  .  Position: ast.Position {}
  1363  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
  1364  .  .  .  .  .  .  .  .  0: *ast.ForStatement {
  1365  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1366  .  .  .  .  .  .  .  .  .  VarDecl: *ast.AssignStmt {
  1367  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1368  .  .  .  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
  1369  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
  1370  .  .  .  .  .  .  .  .  .  .  .  .  Name: "j"
  1371  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1372  .  .  .  .  .  .  .  .  .  .  .  }
  1373  .  .  .  .  .  .  .  .  .  .  }
  1374  .  .  .  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
  1375  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1376  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1377  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
  1378  .  .  .  .  .  .  .  .  .  .  .  .  Value: "0"
  1379  .  .  .  .  .  .  .  .  .  .  .  }
  1380  .  .  .  .  .  .  .  .  .  .  }
  1381  .  .  .  .  .  .  .  .  .  }
  1382  .  .  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
  1383  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1384  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
  1385  .  .  .  .  .  .  .  .  .  .  .  Name: "j"
  1386  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1387  .  .  .  .  .  .  .  .  .  .  }
  1388  .  .  .  .  .  .  .  .  .  .  Op: "<"
  1389  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
  1390  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1391  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
  1392  .  .  .  .  .  .  .  .  .  .  .  Value: "10"
  1393  .  .  .  .  .  .  .  .  .  .  }
  1394  .  .  .  .  .  .  .  .  .  }
  1395  .  .  .  .  .  .  .  .  .  Increment: *ast.IncExpr {
  1396  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1397  .  .  .  .  .  .  .  .  .  .  Op: "++"
  1398  .  .  .  .  .  .  .  .  .  .  Arg: *ast.Ident {
  1399  .  .  .  .  .  .  .  .  .  .  .  Name: "j"
  1400  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1401  .  .  .  .  .  .  .  .  .  .  }
  1402  .  .  .  .  .  .  .  .  .  }
  1403  .  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
  1404  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1405  .  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
  1406  .  .  .  .  .  .  .  .  .  .  .  0: *ast.IfStmt {
  1407  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1408  .  .  .  .  .  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
  1409  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1410  .  .  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
  1411  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "j"
  1412  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1413  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1414  .  .  .  .  .  .  .  .  .  .  .  .  .  Op: "=="
  1415  .  .  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.Ident {
  1416  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
  1417  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1418  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1419  .  .  .  .  .  .  .  .  .  .  .  .  }
  1420  .  .  .  .  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
  1421  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1422  .  .  .  .  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
  1423  .  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.ContinueStatement {
  1424  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1425  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1426  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1427  .  .  .  .  .  .  .  .  .  .  .  .  }
  1428  .  .  .  .  .  .  .  .  .  .  .  }
  1429  .  .  .  .  .  .  .  .  .  .  .  1: *ast.IfStmt {
  1430  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1431  .  .  .  .  .  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
  1432  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1433  .  .  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.BinaryExpr {
  1434  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1435  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
  1436  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "j"
  1437  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1438  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1439  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Op: "/"
  1440  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
  1441  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1442  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
  1443  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "5"
  1444  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1445  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1446  .  .  .  .  .  .  .  .  .  .  .  .  .  Op: ">"
  1447  .  .  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
  1448  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1449  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
  1450  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "2"
  1451  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1452  .  .  .  .  .  .  .  .  .  .  .  .  }
  1453  .  .  .  .  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
  1454  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1455  .  .  .  .  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
  1456  .  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BreakStatement {
  1457  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1458  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1459  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1460  .  .  .  .  .  .  .  .  .  .  .  .  }
  1461  .  .  .  .  .  .  .  .  .  .  .  }
  1462  .  .  .  .  .  .  .  .  .  .  }
  1463  .  .  .  .  .  .  .  .  .  }
  1464  .  .  .  .  .  .  .  .  }
  1465  .  .  .  .  .  .  .  .  1: *ast.IfStmt {
  1466  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1467  .  .  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
  1468  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1469  .  .  .  .  .  .  .  .  .  .  Left: *ast.BinaryExpr {
  1470  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1471  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
  1472  .  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
  1473  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1474  .  .  .  .  .  .  .  .  .  .  .  }
  1475  .  .  .  .  .  .  .  .  .  .  .  Op: "%"
  1476  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
  1477  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1478  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
  1479  .  .  .  .  .  .  .  .  .  .  .  .  Value: "2"
  1480  .  .  .  .  .  .  .  .  .  .  .  }
  1481  .  .  .  .  .  .  .  .  .  .  }
  1482  .  .  .  .  .  .  .  .  .  .  Op: "==="
  1483  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
  1484  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1485  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
  1486  .  .  .  .  .  .  .  .  .  .  .  Value: "0"
  1487  .  .  .  .  .  .  .  .  .  .  }
  1488  .  .  .  .  .  .  .  .  .  }
  1489  .  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
  1490  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1491  .  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
  1492  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BreakStatement {
  1493  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1494  .  .  .  .  .  .  .  .  .  .  .  }
  1495  .  .  .  .  .  .  .  .  .  .  }
  1496  .  .  .  .  .  .  .  .  .  }
  1497  .  .  .  .  .  .  .  .  }
  1498  .  .  .  .  .  .  .  }
  1499  .  .  .  .  .  .  }
  1500  .  .  .  .  .  }
  1501  .  .  .  .  }
  1502  .  .  .  }
  1503  .  .  }
  1504  .  .  8: *ast.FuncDecl {
  1505  .  .  .  Position: ast.Position {}
  1506  .  .  .  Name: *ast.Ident {
  1507  .  .  .  .  Name: "SwitchStatement"
  1508  .  .  .  .  Position: ast.Position {}
  1509  .  .  .  }
  1510  .  .  .  Type: *ast.FuncType {
  1511  .  .  .  .  Position: ast.Position {}
  1512  .  .  .  .  Params: *ast.FieldList {
  1513  .  .  .  .  .  Position: ast.Position {}
  1514  .  .  .  .  }
  1515  .  .  .  }
  1516  .  .  .  Body: *ast.BlockStmt {
  1517  .  .  .  .  Position: ast.Position {}
  1518  .  .  .  .  List: []ast.Stmt (len = 4) {
  1519  .  .  .  .  .  0: *ast.ExprStmt {
  1520  .  .  .  .  .  .  Position: ast.Position {}
  1521  .  .  .  .  .  .  Expr: *ast.CallExpr {
  1522  .  .  .  .  .  .  .  Position: ast.Position {}
  1523  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1524  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1525  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  1526  .  .  .  .  .  .  .  .  .  Name: "console"
  1527  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1528  .  .  .  .  .  .  .  .  }
  1529  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1530  .  .  .  .  .  .  .  .  .  Name: "log"
  1531  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1532  .  .  .  .  .  .  .  .  }
  1533  .  .  .  .  .  .  .  }
  1534  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  1535  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1536  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1537  .  .  .  .  .  .  .  .  .  Kind: "string"
  1538  .  .  .  .  .  .  .  .  .  Value: "switch entry"
  1539  .  .  .  .  .  .  .  .  }
  1540  .  .  .  .  .  .  .  }
  1541  .  .  .  .  .  .  }
  1542  .  .  .  .  .  }
  1543  .  .  .  .  .  1: *ast.AssignStmt {
  1544  .  .  .  .  .  .  Position: ast.Position {}
  1545  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
  1546  .  .  .  .  .  .  .  0: *ast.Ident {
  1547  .  .  .  .  .  .  .  .  Name: "fruits"
  1548  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1549  .  .  .  .  .  .  .  }
  1550  .  .  .  .  .  .  }
  1551  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
  1552  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1553  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1554  .  .  .  .  .  .  .  .  Kind: "string"
  1555  .  .  .  .  .  .  .  .  Value: "Oranges"
  1556  .  .  .  .  .  .  .  }
  1557  .  .  .  .  .  .  }
  1558  .  .  .  .  .  }
  1559  .  .  .  .  .  2: *ast.SwitchStatement {
  1560  .  .  .  .  .  .  Position: ast.Position {}
  1561  .  .  .  .  .  .  Value: *ast.Ident {
  1562  .  .  .  .  .  .  .  Name: "fruits"
  1563  .  .  .  .  .  .  .  Position: ast.Position {}
  1564  .  .  .  .  .  .  }
  1565  .  .  .  .  .  .  Body: *ast.BlockStmt {
  1566  .  .  .  .  .  .  .  Position: ast.Position {}
  1567  .  .  .  .  .  .  .  List: []ast.Stmt (len = 4) {
  1568  .  .  .  .  .  .  .  .  0: *ast.SwitchCase {
  1569  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1570  .  .  .  .  .  .  .  .  .  Cond: *ast.BasicLit {
  1571  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1572  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  1573  .  .  .  .  .  .  .  .  .  .  Value: "Oranges"
  1574  .  .  .  .  .  .  .  .  .  }
  1575  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 2) {
  1576  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
  1577  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1578  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
  1579  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1580  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1581  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1582  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  1583  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
  1584  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1585  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1586  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1587  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
  1588  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1589  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1590  .  .  .  .  .  .  .  .  .  .  .  .  }
  1591  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  1592  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1593  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1594  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  1595  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "switch case 1"
  1596  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1597  .  .  .  .  .  .  .  .  .  .  .  .  }
  1598  .  .  .  .  .  .  .  .  .  .  .  }
  1599  .  .  .  .  .  .  .  .  .  .  }
  1600  .  .  .  .  .  .  .  .  .  .  1: *ast.BreakStatement {
  1601  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1602  .  .  .  .  .  .  .  .  .  .  }
  1603  .  .  .  .  .  .  .  .  .  }
  1604  .  .  .  .  .  .  .  .  }
  1605  .  .  .  .  .  .  .  .  1: *ast.SwitchCase {
  1606  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1607  .  .  .  .  .  .  .  .  .  Cond: *ast.BasicLit {
  1608  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1609  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  1610  .  .  .  .  .  .  .  .  .  .  Value: "Mangoes"
  1611  .  .  .  .  .  .  .  .  .  }
  1612  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 2) {
  1613  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
  1614  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1615  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
  1616  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1617  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1618  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1619  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  1620  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
  1621  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1622  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1623  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1624  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
  1625  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1626  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1627  .  .  .  .  .  .  .  .  .  .  .  .  }
  1628  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  1629  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1630  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1631  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  1632  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "switch case 2"
  1633  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1634  .  .  .  .  .  .  .  .  .  .  .  .  }
  1635  .  .  .  .  .  .  .  .  .  .  .  }
  1636  .  .  .  .  .  .  .  .  .  .  }
  1637  .  .  .  .  .  .  .  .  .  .  1: *ast.BreakStatement {
  1638  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1639  .  .  .  .  .  .  .  .  .  .  }
  1640  .  .  .  .  .  .  .  .  .  }
  1641  .  .  .  .  .  .  .  .  }
  1642  .  .  .  .  .  .  .  .  2: *ast.SwitchCase {
  1643  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1644  .  .  .  .  .  .  .  .  .  Cond: *ast.BasicLit {
  1645  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1646  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  1647  .  .  .  .  .  .  .  .  .  .  Value: "Papayas"
  1648  .  .  .  .  .  .  .  .  .  }
  1649  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 2) {
  1650  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
  1651  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1652  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
  1653  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1654  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1655  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1656  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  1657  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
  1658  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1659  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1660  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1661  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
  1662  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1663  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1664  .  .  .  .  .  .  .  .  .  .  .  .  }
  1665  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  1666  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1667  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1668  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  1669  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "switch case 3"
  1670  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1671  .  .  .  .  .  .  .  .  .  .  .  .  }
  1672  .  .  .  .  .  .  .  .  .  .  .  }
  1673  .  .  .  .  .  .  .  .  .  .  }
  1674  .  .  .  .  .  .  .  .  .  .  1: *ast.BreakStatement {
  1675  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1676  .  .  .  .  .  .  .  .  .  .  }
  1677  .  .  .  .  .  .  .  .  .  }
  1678  .  .  .  .  .  .  .  .  }
  1679  .  .  .  .  .  .  .  .  3: *ast.SwitchDefault {
  1680  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1681  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 1) {
  1682  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
  1683  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1684  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
  1685  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1686  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1687  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1688  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  1689  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
  1690  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1691  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1692  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1693  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
  1694  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1695  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1696  .  .  .  .  .  .  .  .  .  .  .  .  }
  1697  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  1698  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1699  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1700  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  1701  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "switch case default"
  1702  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1703  .  .  .  .  .  .  .  .  .  .  .  .  }
  1704  .  .  .  .  .  .  .  .  .  .  .  }
  1705  .  .  .  .  .  .  .  .  .  .  }
  1706  .  .  .  .  .  .  .  .  .  }
  1707  .  .  .  .  .  .  .  .  }
  1708  .  .  .  .  .  .  .  }
  1709  .  .  .  .  .  .  }
  1710  .  .  .  .  .  }
  1711  .  .  .  .  .  3: *ast.ExprStmt {
  1712  .  .  .  .  .  .  Position: ast.Position {}
  1713  .  .  .  .  .  .  Expr: *ast.CallExpr {
  1714  .  .  .  .  .  .  .  Position: ast.Position {}
  1715  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1716  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1717  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  1718  .  .  .  .  .  .  .  .  .  Name: "console"
  1719  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1720  .  .  .  .  .  .  .  .  }
  1721  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1722  .  .  .  .  .  .  .  .  .  Name: "log"
  1723  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1724  .  .  .  .  .  .  .  .  }
  1725  .  .  .  .  .  .  .  }
  1726  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  1727  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1728  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1729  .  .  .  .  .  .  .  .  .  Kind: "string"
  1730  .  .  .  .  .  .  .  .  .  Value: "switch done"
  1731  .  .  .  .  .  .  .  .  }
  1732  .  .  .  .  .  .  .  }
  1733  .  .  .  .  .  .  }
  1734  .  .  .  .  .  }
  1735  .  .  .  .  }
  1736  .  .  .  }
  1737  .  .  }
  1738  .  .  9: *ast.FuncDecl {
  1739  .  .  .  Position: ast.Position {}
  1740  .  .  .  Name: *ast.Ident {
  1741  .  .  .  .  Name: "SwitchStatementWithoutDefault"
  1742  .  .  .  .  Position: ast.Position {}
  1743  .  .  .  }
  1744  .  .  .  Type: *ast.FuncType {
  1745  .  .  .  .  Position: ast.Position {}
  1746  .  .  .  .  Params: *ast.FieldList {
  1747  .  .  .  .  .  Position: ast.Position {}
  1748  .  .  .  .  }
  1749  .  .  .  }
  1750  .  .  .  Body: *ast.BlockStmt {
  1751  .  .  .  .  Position: ast.Position {}
  1752  .  .  .  .  List: []ast.Stmt (len = 4) {
  1753  .  .  .  .  .  0: *ast.ExprStmt {
  1754  .  .  .  .  .  .  Position: ast.Position {}
  1755  .  .  .  .  .  .  Expr: *ast.CallExpr {
  1756  .  .  .  .  .  .  .  Position: ast.Position {}
  1757  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1758  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1759  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  1760  .  .  .  .  .  .  .  .  .  Name: "console"
  1761  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1762  .  .  .  .  .  .  .  .  }
  1763  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1764  .  .  .  .  .  .  .  .  .  Name: "log"
  1765  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1766  .  .  .  .  .  .  .  .  }
  1767  .  .  .  .  .  .  .  }
  1768  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  1769  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1770  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1771  .  .  .  .  .  .  .  .  .  Kind: "string"
  1772  .  .  .  .  .  .  .  .  .  Value: "switch entry"
  1773  .  .  .  .  .  .  .  .  }
  1774  .  .  .  .  .  .  .  }
  1775  .  .  .  .  .  .  }
  1776  .  .  .  .  .  }
  1777  .  .  .  .  .  1: *ast.AssignStmt {
  1778  .  .  .  .  .  .  Position: ast.Position {}
  1779  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
  1780  .  .  .  .  .  .  .  0: *ast.Ident {
  1781  .  .  .  .  .  .  .  .  Name: "fruits"
  1782  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1783  .  .  .  .  .  .  .  }
  1784  .  .  .  .  .  .  }
  1785  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
  1786  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1787  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1788  .  .  .  .  .  .  .  .  Kind: "string"
  1789  .  .  .  .  .  .  .  .  Value: "Oranges"
  1790  .  .  .  .  .  .  .  }
  1791  .  .  .  .  .  .  }
  1792  .  .  .  .  .  }
  1793  .  .  .  .  .  2: *ast.SwitchStatement {
  1794  .  .  .  .  .  .  Position: ast.Position {}
  1795  .  .  .  .  .  .  Value: *ast.Ident {
  1796  .  .  .  .  .  .  .  Name: "fruits"
  1797  .  .  .  .  .  .  .  Position: ast.Position {}
  1798  .  .  .  .  .  .  }
  1799  .  .  .  .  .  .  Body: *ast.BlockStmt {
  1800  .  .  .  .  .  .  .  Position: ast.Position {}
  1801  .  .  .  .  .  .  .  List: []ast.Stmt (len = 3) {
  1802  .  .  .  .  .  .  .  .  0: *ast.SwitchCase {
  1803  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1804  .  .  .  .  .  .  .  .  .  Cond: *ast.BasicLit {
  1805  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1806  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  1807  .  .  .  .  .  .  .  .  .  .  Value: "Oranges"
  1808  .  .  .  .  .  .  .  .  .  }
  1809  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 2) {
  1810  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
  1811  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1812  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
  1813  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1814  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1815  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1816  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  1817  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
  1818  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1819  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1820  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1821  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
  1822  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1823  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1824  .  .  .  .  .  .  .  .  .  .  .  .  }
  1825  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  1826  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1827  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1828  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  1829  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "switch case 1"
  1830  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1831  .  .  .  .  .  .  .  .  .  .  .  .  }
  1832  .  .  .  .  .  .  .  .  .  .  .  }
  1833  .  .  .  .  .  .  .  .  .  .  }
  1834  .  .  .  .  .  .  .  .  .  .  1: *ast.BreakStatement {
  1835  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1836  .  .  .  .  .  .  .  .  .  .  }
  1837  .  .  .  .  .  .  .  .  .  }
  1838  .  .  .  .  .  .  .  .  }
  1839  .  .  .  .  .  .  .  .  1: *ast.SwitchCase {
  1840  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1841  .  .  .  .  .  .  .  .  .  Cond: *ast.BasicLit {
  1842  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1843  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  1844  .  .  .  .  .  .  .  .  .  .  Value: "Mangoes"
  1845  .  .  .  .  .  .  .  .  .  }
  1846  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 2) {
  1847  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
  1848  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1849  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
  1850  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1851  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1852  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1853  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  1854  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
  1855  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1856  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1857  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1858  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
  1859  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1860  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1861  .  .  .  .  .  .  .  .  .  .  .  .  }
  1862  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  1863  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1864  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1865  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  1866  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "switch case 2"
  1867  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1868  .  .  .  .  .  .  .  .  .  .  .  .  }
  1869  .  .  .  .  .  .  .  .  .  .  .  }
  1870  .  .  .  .  .  .  .  .  .  .  }
  1871  .  .  .  .  .  .  .  .  .  .  1: *ast.BreakStatement {
  1872  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1873  .  .  .  .  .  .  .  .  .  .  }
  1874  .  .  .  .  .  .  .  .  .  }
  1875  .  .  .  .  .  .  .  .  }
  1876  .  .  .  .  .  .  .  .  2: *ast.SwitchCase {
  1877  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1878  .  .  .  .  .  .  .  .  .  Cond: *ast.BasicLit {
  1879  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1880  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  1881  .  .  .  .  .  .  .  .  .  .  Value: "Papayas"
  1882  .  .  .  .  .  .  .  .  .  }
  1883  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 2) {
  1884  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
  1885  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1886  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
  1887  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1888  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1889  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1890  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  1891  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
  1892  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1893  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1894  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1895  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
  1896  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1897  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1898  .  .  .  .  .  .  .  .  .  .  .  .  }
  1899  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  1900  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1901  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1902  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  1903  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "switch case 3"
  1904  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  1905  .  .  .  .  .  .  .  .  .  .  .  .  }
  1906  .  .  .  .  .  .  .  .  .  .  .  }
  1907  .  .  .  .  .  .  .  .  .  .  }
  1908  .  .  .  .  .  .  .  .  .  .  1: *ast.BreakStatement {
  1909  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1910  .  .  .  .  .  .  .  .  .  .  }
  1911  .  .  .  .  .  .  .  .  .  }
  1912  .  .  .  .  .  .  .  .  }
  1913  .  .  .  .  .  .  .  }
  1914  .  .  .  .  .  .  }
  1915  .  .  .  .  .  }
  1916  .  .  .  .  .  3: *ast.ExprStmt {
  1917  .  .  .  .  .  .  Position: ast.Position {}
  1918  .  .  .  .  .  .  Expr: *ast.CallExpr {
  1919  .  .  .  .  .  .  .  Position: ast.Position {}
  1920  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1921  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1922  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  1923  .  .  .  .  .  .  .  .  .  Name: "console"
  1924  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1925  .  .  .  .  .  .  .  .  }
  1926  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1927  .  .  .  .  .  .  .  .  .  Name: "log"
  1928  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1929  .  .  .  .  .  .  .  .  }
  1930  .  .  .  .  .  .  .  }
  1931  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  1932  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1933  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1934  .  .  .  .  .  .  .  .  .  Kind: "string"
  1935  .  .  .  .  .  .  .  .  .  Value: "switch done"
  1936  .  .  .  .  .  .  .  .  }
  1937  .  .  .  .  .  .  .  }
  1938  .  .  .  .  .  .  }
  1939  .  .  .  .  .  }
  1940  .  .  .  .  }
  1941  .  .  .  }
  1942  .  .  }
  1943  .  .  10: *ast.FuncDecl {
  1944  .  .  .  Position: ast.Position {}
  1945  .  .  .  Name: *ast.Ident {
  1946  .  .  .  .  Name: "SwitchStatementOnlyDefault"
  1947  .  .  .  .  Position: ast.Position {}
  1948  .  .  .  }
  1949  .  .  .  Type: *ast.FuncType {
  1950  .  .  .  .  Position: ast.Position {}
  1951  .  .  .  .  Params: *ast.FieldList {
  1952  .  .  .  .  .  Position: ast.Position {}
  1953  .  .  .  .  }
  1954  .  .  .  }
  1955  .  .  .  Body: *ast.BlockStmt {
  1956  .  .  .  .  Position: ast.Position {}
  1957  .  .  .  .  List: []ast.Stmt (len = 4) {
  1958  .  .  .  .  .  0: *ast.ExprStmt {
  1959  .  .  .  .  .  .  Position: ast.Position {}
  1960  .  .  .  .  .  .  Expr: *ast.CallExpr {
  1961  .  .  .  .  .  .  .  Position: ast.Position {}
  1962  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1963  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1964  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  1965  .  .  .  .  .  .  .  .  .  Name: "console"
  1966  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1967  .  .  .  .  .  .  .  .  }
  1968  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1969  .  .  .  .  .  .  .  .  .  Name: "log"
  1970  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1971  .  .  .  .  .  .  .  .  }
  1972  .  .  .  .  .  .  .  }
  1973  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  1974  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1975  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1976  .  .  .  .  .  .  .  .  .  Kind: "string"
  1977  .  .  .  .  .  .  .  .  .  Value: "switch entry"
  1978  .  .  .  .  .  .  .  .  }
  1979  .  .  .  .  .  .  .  }
  1980  .  .  .  .  .  .  }
  1981  .  .  .  .  .  }
  1982  .  .  .  .  .  1: *ast.AssignStmt {
  1983  .  .  .  .  .  .  Position: ast.Position {}
  1984  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
  1985  .  .  .  .  .  .  .  0: *ast.Ident {
  1986  .  .  .  .  .  .  .  .  Name: "fruits"
  1987  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1988  .  .  .  .  .  .  .  }
  1989  .  .  .  .  .  .  }
  1990  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
  1991  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1992  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1993  .  .  .  .  .  .  .  .  Kind: "string"
  1994  .  .  .  .  .  .  .  .  Value: "Oranges"
  1995  .  .  .  .  .  .  .  }
  1996  .  .  .  .  .  .  }
  1997  .  .  .  .  .  }
  1998  .  .  .  .  .  2: *ast.SwitchStatement {
  1999  .  .  .  .  .  .  Position: ast.Position {}
  2000  .  .  .  .  .  .  Value: *ast.Ident {
  2001  .  .  .  .  .  .  .  Name: "fruits"
  2002  .  .  .  .  .  .  .  Position: ast.Position {}
  2003  .  .  .  .  .  .  }
  2004  .  .  .  .  .  .  Body: *ast.BlockStmt {
  2005  .  .  .  .  .  .  .  Position: ast.Position {}
  2006  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
  2007  .  .  .  .  .  .  .  .  0: *ast.SwitchDefault {
  2008  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2009  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 1) {
  2010  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
  2011  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2012  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
  2013  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2014  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  2015  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2016  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  2017  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
  2018  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2019  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  2020  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2021  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
  2022  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2023  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  2024  .  .  .  .  .  .  .  .  .  .  .  .  }
  2025  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  2026  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  2027  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2028  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  2029  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "switch case default"
  2030  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  2031  .  .  .  .  .  .  .  .  .  .  .  .  }
  2032  .  .  .  .  .  .  .  .  .  .  .  }
  2033  .  .  .  .  .  .  .  .  .  .  }
  2034  .  .  .  .  .  .  .  .  .  }
  2035  .  .  .  .  .  .  .  .  }
  2036  .  .  .  .  .  .  .  }
  2037  .  .  .  .  .  .  }
  2038  .  .  .  .  .  }
  2039  .  .  .  .  .  3: *ast.ExprStmt {
  2040  .  .  .  .  .  .  Position: ast.Position {}
  2041  .  .  .  .  .  .  Expr: *ast.CallExpr {
  2042  .  .  .  .  .  .  .  Position: ast.Position {}
  2043  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  2044  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2045  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  2046  .  .  .  .  .  .  .  .  .  Name: "console"
  2047  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2048  .  .  .  .  .  .  .  .  }
  2049  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2050  .  .  .  .  .  .  .  .  .  Name: "log"
  2051  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2052  .  .  .  .  .  .  .  .  }
  2053  .  .  .  .  .  .  .  }
  2054  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  2055  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  2056  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2057  .  .  .  .  .  .  .  .  .  Kind: "string"
  2058  .  .  .  .  .  .  .  .  .  Value: "switch done"
  2059  .  .  .  .  .  .  .  .  }
  2060  .  .  .  .  .  .  .  }
  2061  .  .  .  .  .  .  }
  2062  .  .  .  .  .  }
  2063  .  .  .  .  }
  2064  .  .  .  }
  2065  .  .  }
  2066  .  .  11: *ast.FuncDecl {
  2067  .  .  .  Position: ast.Position {}
  2068  .  .  .  Name: *ast.Ident {
  2069  .  .  .  .  Name: "SwitchStatementOnlyOneCase"
  2070  .  .  .  .  Position: ast.Position {}
  2071  .  .  .  }
  2072  .  .  .  Type: *ast.FuncType {
  2073  .  .  .  .  Position: ast.Position {}
  2074  .  .  .  .  Params: *ast.FieldList {
  2075  .  .  .  .  .  Position: ast.Position {}
  2076  .  .  .  .  }
  2077  .  .  .  }
  2078  .  .  .  Body: *ast.BlockStmt {
  2079  .  .  .  .  Position: ast.Position {}
  2080  .  .  .  .  List: []ast.Stmt (len = 4) {
  2081  .  .  .  .  .  0: *ast.ExprStmt {
  2082  .  .  .  .  .  .  Position: ast.Position {}
  2083  .  .  .  .  .  .  Expr: *ast.CallExpr {
  2084  .  .  .  .  .  .  .  Position: ast.Position {}
  2085  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  2086  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2087  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  2088  .  .  .  .  .  .  .  .  .  Name: "console"
  2089  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2090  .  .  .  .  .  .  .  .  }
  2091  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2092  .  .  .  .  .  .  .  .  .  Name: "log"
  2093  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2094  .  .  .  .  .  .  .  .  }
  2095  .  .  .  .  .  .  .  }
  2096  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  2097  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  2098  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2099  .  .  .  .  .  .  .  .  .  Kind: "string"
  2100  .  .  .  .  .  .  .  .  .  Value: "switch entry"
  2101  .  .  .  .  .  .  .  .  }
  2102  .  .  .  .  .  .  .  }
  2103  .  .  .  .  .  .  }
  2104  .  .  .  .  .  }
  2105  .  .  .  .  .  1: *ast.AssignStmt {
  2106  .  .  .  .  .  .  Position: ast.Position {}
  2107  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
  2108  .  .  .  .  .  .  .  0: *ast.Ident {
  2109  .  .  .  .  .  .  .  .  Name: "fruits"
  2110  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2111  .  .  .  .  .  .  .  }
  2112  .  .  .  .  .  .  }
  2113  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
  2114  .  .  .  .  .  .  .  0: *ast.BasicLit {
  2115  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2116  .  .  .  .  .  .  .  .  Kind: "string"
  2117  .  .  .  .  .  .  .  .  Value: "Oranges"
  2118  .  .  .  .  .  .  .  }
  2119  .  .  .  .  .  .  }
  2120  .  .  .  .  .  }
  2121  .  .  .  .  .  2: *ast.SwitchStatement {
  2122  .  .  .  .  .  .  Position: ast.Position {}
  2123  .  .  .  .  .  .  Value: *ast.Ident {
  2124  .  .  .  .  .  .  .  Name: "fruits"
  2125  .  .  .  .  .  .  .  Position: ast.Position {}
  2126  .  .  .  .  .  .  }
  2127  .  .  .  .  .  .  Body: *ast.BlockStmt {
  2128  .  .  .  .  .  .  .  Position: ast.Position {}
  2129  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
  2130  .  .  .  .  .  .  .  .  0: *ast.SwitchCase {
  2131  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2132  .  .  .  .  .  .  .  .  .  Cond: *ast.BasicLit {
  2133  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2134  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  2135  .  .  .  .  .  .  .  .  .  .  Value: "Oranges"
  2136  .  .  .  .  .  .  .  .  .  }
  2137  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 2) {
  2138  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
  2139  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2140  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
  2141  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2142  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  2143  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2144  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  2145  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
  2146  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2147  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  2148  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2149  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
  2150  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2151  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  2152  .  .  .  .  .  .  .  .  .  .  .  .  }
  2153  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  2154  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  2155  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2156  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  2157  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "switch case 1"
  2158  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  2159  .  .  .  .  .  .  .  .  .  .  .  .  }
  2160  .  .  .  .  .  .  .  .  .  .  .  }
  2161  .  .  .  .  .  .  .  .  .  .  }
  2162  .  .  .  .  .  .  .  .  .  .  1: *ast.BreakStatement {
  2163  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2164  .  .  .  .  .  .  .  .  .  .  }
  2165  .  .  .  .  .  .  .  .  .  }
  2166  .  .  .  .  .  .  .  .  }
  2167  .  .  .  .  .  .  .  }
  2168  .  .  .  .  .  .  }
  2169  .  .  .  .  .  }
  2170  .  .  .  .  .  3: *ast.ExprStmt {
  2171  .  .  .  .  .  .  Position: ast.Position {}
  2172  .  .  .  .  .  .  Expr: *ast.CallExpr {
  2173  .  .  .  .  .  .  .  Position: ast.Position {}
  2174  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  2175  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2176  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  2177  .  .  .  .  .  .  .  .  .  Name: "console"
  2178  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2179  .  .  .  .  .  .  .  .  }
  2180  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2181  .  .  .  .  .  .  .  .  .  Name: "log"
  2182  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2183  .  .  .  .  .  .  .  .  }
  2184  .  .  .  .  .  .  .  }
  2185  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  2186  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  2187  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2188  .  .  .  .  .  .  .  .  .  Kind: "string"
  2189  .  .  .  .  .  .  .  .  .  Value: "switch done"
  2190  .  .  .  .  .  .  .  .  }
  2191  .  .  .  .  .  .  .  }
  2192  .  .  .  .  .  .  }
  2193  .  .  .  .  .  }
  2194  .  .  .  .  }
  2195  .  .  .  }
  2196  .  .  }
  2197  .  .  12: *ast.FuncDecl {
  2198  .  .  .  Position: ast.Position {}
  2199  .  .  .  Name: *ast.Ident {
  2200  .  .  .  .  Name: "SwitchStatementWithBadNodesAndDefault"
  2201  .  .  .  .  Position: ast.Position {}
  2202  .  .  .  }
  2203  .  .  .  Type: *ast.FuncType {
  2204  .  .  .  .  Position: ast.Position {}
  2205  .  .  .  .  Params: *ast.FieldList {
  2206  .  .  .  .  .  Position: ast.Position {}
  2207  .  .  .  .  }
  2208  .  .  .  }
  2209  .  .  .  Body: *ast.BlockStmt {
  2210  .  .  .  .  Position: ast.Position {}
  2211  .  .  .  .  List: []ast.Stmt (len = 4) {
  2212  .  .  .  .  .  0: *ast.ExprStmt {
  2213  .  .  .  .  .  .  Position: ast.Position {}
  2214  .  .  .  .  .  .  Expr: *ast.CallExpr {
  2215  .  .  .  .  .  .  .  Position: ast.Position {}
  2216  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  2217  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2218  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  2219  .  .  .  .  .  .  .  .  .  Name: "console"
  2220  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2221  .  .  .  .  .  .  .  .  }
  2222  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2223  .  .  .  .  .  .  .  .  .  Name: "log"
  2224  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2225  .  .  .  .  .  .  .  .  }
  2226  .  .  .  .  .  .  .  }
  2227  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  2228  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  2229  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2230  .  .  .  .  .  .  .  .  .  Kind: "string"
  2231  .  .  .  .  .  .  .  .  .  Value: "switch entry"
  2232  .  .  .  .  .  .  .  .  }
  2233  .  .  .  .  .  .  .  }
  2234  .  .  .  .  .  .  }
  2235  .  .  .  .  .  }
  2236  .  .  .  .  .  1: *ast.AssignStmt {
  2237  .  .  .  .  .  .  Position: ast.Position {}
  2238  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
  2239  .  .  .  .  .  .  .  0: *ast.Ident {
  2240  .  .  .  .  .  .  .  .  Name: "fruits"
  2241  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2242  .  .  .  .  .  .  .  }
  2243  .  .  .  .  .  .  }
  2244  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
  2245  .  .  .  .  .  .  .  0: *ast.BasicLit {
  2246  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2247  .  .  .  .  .  .  .  .  Kind: "string"
  2248  .  .  .  .  .  .  .  .  Value: "Oranges"
  2249  .  .  .  .  .  .  .  }
  2250  .  .  .  .  .  .  }
  2251  .  .  .  .  .  }
  2252  .  .  .  .  .  2: *ast.SwitchStatement {
  2253  .  .  .  .  .  .  Position: ast.Position {}
  2254  .  .  .  .  .  .  Value: *ast.Ident {
  2255  .  .  .  .  .  .  .  Name: "fruits"
  2256  .  .  .  .  .  .  .  Position: ast.Position {}
  2257  .  .  .  .  .  .  }
  2258  .  .  .  .  .  .  Body: *ast.BlockStmt {
  2259  .  .  .  .  .  .  .  Position: ast.Position {}
  2260  .  .  .  .  .  .  .  List: []ast.Stmt (len = 4) {
  2261  .  .  .  .  .  .  .  .  0: *ast.BadNode {
  2262  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2263  .  .  .  .  .  .  .  .  .  Comment: "unsupported node type <comment>"
  2264  .  .  .  .  .  .  .  .  }
  2265  .  .  .  .  .  .  .  .  1: *ast.BadNode {
  2266  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2267  .  .  .  .  .  .  .  .  .  Comment: "unsupported node type <comment>"
  2268  .  .  .  .  .  .  .  .  }
  2269  .  .  .  .  .  .  .  .  2: *ast.BadNode {
  2270  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2271  .  .  .  .  .  .  .  .  .  Comment: "unsupported node type <comment>"
  2272  .  .  .  .  .  .  .  .  }
  2273  .  .  .  .  .  .  .  .  3: *ast.SwitchDefault {
  2274  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2275  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 1) {
  2276  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
  2277  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2278  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
  2279  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2280  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  2281  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2282  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  2283  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
  2284  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2285  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  2286  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2287  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
  2288  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2289  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  2290  .  .  .  .  .  .  .  .  .  .  .  .  }
  2291  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  2292  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  2293  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2294  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  2295  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "switch case default"
  2296  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  2297  .  .  .  .  .  .  .  .  .  .  .  .  }
  2298  .  .  .  .  .  .  .  .  .  .  .  }
  2299  .  .  .  .  .  .  .  .  .  .  }
  2300  .  .  .  .  .  .  .  .  .  }
  2301  .  .  .  .  .  .  .  .  }
  2302  .  .  .  .  .  .  .  }
  2303  .  .  .  .  .  .  }
  2304  .  .  .  .  .  }
  2305  .  .  .  .  .  3: *ast.ExprStmt {
  2306  .  .  .  .  .  .  Position: ast.Position {}
  2307  .  .  .  .  .  .  Expr: *ast.CallExpr {
  2308  .  .  .  .  .  .  .  Position: ast.Position {}
  2309  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  2310  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2311  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  2312  .  .  .  .  .  .  .  .  .  Name: "console"
  2313  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2314  .  .  .  .  .  .  .  .  }
  2315  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2316  .  .  .  .  .  .  .  .  .  Name: "log"
  2317  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2318  .  .  .  .  .  .  .  .  }
  2319  .  .  .  .  .  .  .  }
  2320  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  2321  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  2322  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2323  .  .  .  .  .  .  .  .  .  Kind: "string"
  2324  .  .  .  .  .  .  .  .  .  Value: "switch done"
  2325  .  .  .  .  .  .  .  .  }
  2326  .  .  .  .  .  .  .  }
  2327  .  .  .  .  .  .  }
  2328  .  .  .  .  .  }
  2329  .  .  .  .  }
  2330  .  .  .  }
  2331  .  .  }
  2332  .  .  13: *ast.FuncDecl {
  2333  .  .  .  Position: ast.Position {}
  2334  .  .  .  Name: *ast.Ident {
  2335  .  .  .  .  Name: "SwitchStatementWithBadNode"
  2336  .  .  .  .  Position: ast.Position {}
  2337  .  .  .  }
  2338  .  .  .  Type: *ast.FuncType {
  2339  .  .  .  .  Position: ast.Position {}
  2340  .  .  .  .  Params: *ast.FieldList {
  2341  .  .  .  .  .  Position: ast.Position {}
  2342  .  .  .  .  }
  2343  .  .  .  }
  2344  .  .  .  Body: *ast.BlockStmt {
  2345  .  .  .  .  Position: ast.Position {}
  2346  .  .  .  .  List: []ast.Stmt (len = 4) {
  2347  .  .  .  .  .  0: *ast.ExprStmt {
  2348  .  .  .  .  .  .  Position: ast.Position {}
  2349  .  .  .  .  .  .  Expr: *ast.CallExpr {
  2350  .  .  .  .  .  .  .  Position: ast.Position {}
  2351  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  2352  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2353  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  2354  .  .  .  .  .  .  .  .  .  Name: "console"
  2355  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2356  .  .  .  .  .  .  .  .  }
  2357  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2358  .  .  .  .  .  .  .  .  .  Name: "log"
  2359  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2360  .  .  .  .  .  .  .  .  }
  2361  .  .  .  .  .  .  .  }
  2362  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  2363  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  2364  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2365  .  .  .  .  .  .  .  .  .  Kind: "string"
  2366  .  .  .  .  .  .  .  .  .  Value: "switch entry"
  2367  .  .  .  .  .  .  .  .  }
  2368  .  .  .  .  .  .  .  }
  2369  .  .  .  .  .  .  }
  2370  .  .  .  .  .  }
  2371  .  .  .  .  .  1: *ast.AssignStmt {
  2372  .  .  .  .  .  .  Position: ast.Position {}
  2373  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
  2374  .  .  .  .  .  .  .  0: *ast.Ident {
  2375  .  .  .  .  .  .  .  .  Name: "fruits"
  2376  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2377  .  .  .  .  .  .  .  }
  2378  .  .  .  .  .  .  }
  2379  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
  2380  .  .  .  .  .  .  .  0: *ast.BasicLit {
  2381  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2382  .  .  .  .  .  .  .  .  Kind: "string"
  2383  .  .  .  .  .  .  .  .  Value: "Oranges"
  2384  .  .  .  .  .  .  .  }
  2385  .  .  .  .  .  .  }
  2386  .  .  .  .  .  }
  2387  .  .  .  .  .  2: *ast.SwitchStatement {
  2388  .  .  .  .  .  .  Position: ast.Position {}
  2389  .  .  .  .  .  .  Value: *ast.Ident {
  2390  .  .  .  .  .  .  .  Name: "fruits"
  2391  .  .  .  .  .  .  .  Position: ast.Position {}
  2392  .  .  .  .  .  .  }
  2393  .  .  .  .  .  .  Body: *ast.BlockStmt {
  2394  .  .  .  .  .  .  .  Position: ast.Position {}
  2395  .  .  .  .  .  .  .  List: []ast.Stmt (len = 5) {
  2396  .  .  .  .  .  .  .  .  0: *ast.BadNode {
  2397  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2398  .  .  .  .  .  .  .  .  .  Comment: "unsupported node type <comment>"
  2399  .  .  .  .  .  .  .  .  }
  2400  .  .  .  .  .  .  .  .  1: *ast.BadNode {
  2401  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2402  .  .  .  .  .  .  .  .  .  Comment: "unsupported node type <comment>"
  2403  .  .  .  .  .  .  .  .  }
  2404  .  .  .  .  .  .  .  .  2: *ast.BadNode {
  2405  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2406  .  .  .  .  .  .  .  .  .  Comment: "unsupported node type <comment>"
  2407  .  .  .  .  .  .  .  .  }
  2408  .  .  .  .  .  .  .  .  3: *ast.SwitchCase {
  2409  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2410  .  .  .  .  .  .  .  .  .  Cond: *ast.BasicLit {
  2411  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2412  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  2413  .  .  .  .  .  .  .  .  .  .  Value: "Mangoes"
  2414  .  .  .  .  .  .  .  .  .  }
  2415  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 2) {
  2416  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
  2417  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2418  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
  2419  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2420  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  2421  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2422  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  2423  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
  2424  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2425  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  2426  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2427  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
  2428  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2429  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  2430  .  .  .  .  .  .  .  .  .  .  .  .  }
  2431  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  2432  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  2433  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2434  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  2435  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "switch case 2"
  2436  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  2437  .  .  .  .  .  .  .  .  .  .  .  .  }
  2438  .  .  .  .  .  .  .  .  .  .  .  }
  2439  .  .  .  .  .  .  .  .  .  .  }
  2440  .  .  .  .  .  .  .  .  .  .  1: *ast.BreakStatement {
  2441  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2442  .  .  .  .  .  .  .  .  .  .  }
  2443  .  .  .  .  .  .  .  .  .  }
  2444  .  .  .  .  .  .  .  .  }
  2445  .  .  .  .  .  .  .  .  4: *ast.SwitchCase {
  2446  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2447  .  .  .  .  .  .  .  .  .  Cond: *ast.BasicLit {
  2448  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2449  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  2450  .  .  .  .  .  .  .  .  .  .  Value: "Papayas"
  2451  .  .  .  .  .  .  .  .  .  }
  2452  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 2) {
  2453  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
  2454  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2455  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
  2456  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2457  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  2458  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2459  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  2460  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
  2461  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2462  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  2463  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2464  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
  2465  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2466  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  2467  .  .  .  .  .  .  .  .  .  .  .  .  }
  2468  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  2469  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  2470  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2471  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  2472  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "switch case 3"
  2473  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  2474  .  .  .  .  .  .  .  .  .  .  .  .  }
  2475  .  .  .  .  .  .  .  .  .  .  .  }
  2476  .  .  .  .  .  .  .  .  .  .  }
  2477  .  .  .  .  .  .  .  .  .  .  1: *ast.BreakStatement {
  2478  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2479  .  .  .  .  .  .  .  .  .  .  }
  2480  .  .  .  .  .  .  .  .  .  }
  2481  .  .  .  .  .  .  .  .  }
  2482  .  .  .  .  .  .  .  }
  2483  .  .  .  .  .  .  }
  2484  .  .  .  .  .  }
  2485  .  .  .  .  .  3: *ast.ExprStmt {
  2486  .  .  .  .  .  .  Position: ast.Position {}
  2487  .  .  .  .  .  .  Expr: *ast.CallExpr {
  2488  .  .  .  .  .  .  .  Position: ast.Position {}
  2489  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  2490  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2491  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  2492  .  .  .  .  .  .  .  .  .  Name: "console"
  2493  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2494  .  .  .  .  .  .  .  .  }
  2495  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2496  .  .  .  .  .  .  .  .  .  Name: "log"
  2497  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2498  .  .  .  .  .  .  .  .  }
  2499  .  .  .  .  .  .  .  }
  2500  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  2501  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  2502  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2503  .  .  .  .  .  .  .  .  .  Kind: "string"
  2504  .  .  .  .  .  .  .  .  .  Value: "switch done"
  2505  .  .  .  .  .  .  .  .  }
  2506  .  .  .  .  .  .  .  }
  2507  .  .  .  .  .  .  }
  2508  .  .  .  .  .  }
  2509  .  .  .  .  }
  2510  .  .  .  }
  2511  .  .  }
  2512  .  .  14: *ast.FuncDecl {
  2513  .  .  .  Position: ast.Position {}
  2514  .  .  .  Name: *ast.Ident {
  2515  .  .  .  .  Name: "SwitchStatementJustOneCaseAndDefault"
  2516  .  .  .  .  Position: ast.Position {}
  2517  .  .  .  }
  2518  .  .  .  Type: *ast.FuncType {
  2519  .  .  .  .  Position: ast.Position {}
  2520  .  .  .  .  Params: *ast.FieldList {
  2521  .  .  .  .  .  Position: ast.Position {}
  2522  .  .  .  .  }
  2523  .  .  .  }
  2524  .  .  .  Body: *ast.BlockStmt {
  2525  .  .  .  .  Position: ast.Position {}
  2526  .  .  .  .  List: []ast.Stmt (len = 4) {
  2527  .  .  .  .  .  0: *ast.ExprStmt {
  2528  .  .  .  .  .  .  Position: ast.Position {}
  2529  .  .  .  .  .  .  Expr: *ast.CallExpr {
  2530  .  .  .  .  .  .  .  Position: ast.Position {}
  2531  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  2532  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2533  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  2534  .  .  .  .  .  .  .  .  .  Name: "console"
  2535  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2536  .  .  .  .  .  .  .  .  }
  2537  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2538  .  .  .  .  .  .  .  .  .  Name: "log"
  2539  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2540  .  .  .  .  .  .  .  .  }
  2541  .  .  .  .  .  .  .  }
  2542  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  2543  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  2544  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2545  .  .  .  .  .  .  .  .  .  Kind: "string"
  2546  .  .  .  .  .  .  .  .  .  Value: "switch entry"
  2547  .  .  .  .  .  .  .  .  }
  2548  .  .  .  .  .  .  .  }
  2549  .  .  .  .  .  .  }
  2550  .  .  .  .  .  }
  2551  .  .  .  .  .  1: *ast.AssignStmt {
  2552  .  .  .  .  .  .  Position: ast.Position {}
  2553  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
  2554  .  .  .  .  .  .  .  0: *ast.Ident {
  2555  .  .  .  .  .  .  .  .  Name: "foo"
  2556  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2557  .  .  .  .  .  .  .  }
  2558  .  .  .  .  .  .  }
  2559  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
  2560  .  .  .  .  .  .  .  0: *ast.BasicLit {
  2561  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2562  .  .  .  .  .  .  .  .  Kind: "number"
  2563  .  .  .  .  .  .  .  .  Value: "2"
  2564  .  .  .  .  .  .  .  }
  2565  .  .  .  .  .  .  }
  2566  .  .  .  .  .  }
  2567  .  .  .  .  .  2: *ast.SwitchStatement {
  2568  .  .  .  .  .  .  Position: ast.Position {}
  2569  .  .  .  .  .  .  Value: *ast.Ident {
  2570  .  .  .  .  .  .  .  Name: "foo"
  2571  .  .  .  .  .  .  .  Position: ast.Position {}
  2572  .  .  .  .  .  .  }
  2573  .  .  .  .  .  .  Body: *ast.BlockStmt {
  2574  .  .  .  .  .  .  .  Position: ast.Position {}
  2575  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
  2576  .  .  .  .  .  .  .  .  0: *ast.SwitchCase {
  2577  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2578  .  .  .  .  .  .  .  .  .  Cond: *ast.BasicLit {
  2579  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2580  .  .  .  .  .  .  .  .  .  .  Kind: "number"
  2581  .  .  .  .  .  .  .  .  .  .  Value: "1"
  2582  .  .  .  .  .  .  .  .  .  }
  2583  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 1) {
  2584  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
  2585  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2586  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
  2587  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2588  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  2589  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2590  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  2591  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
  2592  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2593  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  2594  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2595  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
  2596  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2597  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  2598  .  .  .  .  .  .  .  .  .  .  .  .  }
  2599  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  2600  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  2601  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2602  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  2603  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "switch case 1"
  2604  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  2605  .  .  .  .  .  .  .  .  .  .  .  .  }
  2606  .  .  .  .  .  .  .  .  .  .  .  }
  2607  .  .  .  .  .  .  .  .  .  .  }
  2608  .  .  .  .  .  .  .  .  .  }
  2609  .  .  .  .  .  .  .  .  }
  2610  .  .  .  .  .  .  .  .  1: *ast.SwitchDefault {
  2611  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2612  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 1) {
  2613  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
  2614  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2615  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
  2616  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2617  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  2618  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2619  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  2620  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
  2621  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2622  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  2623  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2624  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
  2625  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2626  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  2627  .  .  .  .  .  .  .  .  .  .  .  .  }
  2628  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  2629  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  2630  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2631  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  2632  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "switch case default"
  2633  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  2634  .  .  .  .  .  .  .  .  .  .  .  .  }
  2635  .  .  .  .  .  .  .  .  .  .  .  }
  2636  .  .  .  .  .  .  .  .  .  .  }
  2637  .  .  .  .  .  .  .  .  .  }
  2638  .  .  .  .  .  .  .  .  }
  2639  .  .  .  .  .  .  .  }
  2640  .  .  .  .  .  .  }
  2641  .  .  .  .  .  }
  2642  .  .  .  .  .  3: *ast.ExprStmt {
  2643  .  .  .  .  .  .  Position: ast.Position {}
  2644  .  .  .  .  .  .  Expr: *ast.CallExpr {
  2645  .  .  .  .  .  .  .  Position: ast.Position {}
  2646  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  2647  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2648  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  2649  .  .  .  .  .  .  .  .  .  Name: "console"
  2650  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2651  .  .  .  .  .  .  .  .  }
  2652  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2653  .  .  .  .  .  .  .  .  .  Name: "log"
  2654  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2655  .  .  .  .  .  .  .  .  }
  2656  .  .  .  .  .  .  .  }
  2657  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  2658  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  2659  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2660  .  .  .  .  .  .  .  .  .  Kind: "string"
  2661  .  .  .  .  .  .  .  .  .  Value: "switch done"
  2662  .  .  .  .  .  .  .  .  }
  2663  .  .  .  .  .  .  .  }
  2664  .  .  .  .  .  .  }
  2665  .  .  .  .  .  }
  2666  .  .  .  .  }
  2667  .  .  .  }
  2668  .  .  }
  2669  .  .  15: *ast.FuncDecl {
  2670  .  .  .  Position: ast.Position {}
  2671  .  .  .  Name: *ast.Ident {
  2672  .  .  .  .  Name: "ForStatement"
  2673  .  .  .  .  Position: ast.Position {}
  2674  .  .  .  }
  2675  .  .  .  Type: *ast.FuncType {
  2676  .  .  .  .  Position: ast.Position {}
  2677  .  .  .  .  Params: *ast.FieldList {
  2678  .  .  .  .  .  Position: ast.Position {}
  2679  .  .  .  .  }
  2680  .  .  .  }
  2681  .  .  .  Body: *ast.BlockStmt {
  2682  .  .  .  .  Position: ast.Position {}
  2683  .  .  .  .  List: []ast.Stmt (len = 1) {
  2684  .  .  .  .  .  0: *ast.ForStatement {
  2685  .  .  .  .  .  .  Position: ast.Position {}
  2686  .  .  .  .  .  .  VarDecl: *ast.AssignStmt {
  2687  .  .  .  .  .  .  .  Position: ast.Position {}
  2688  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
  2689  .  .  .  .  .  .  .  .  0: *ast.Ident {
  2690  .  .  .  .  .  .  .  .  .  Name: "i"
  2691  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2692  .  .  .  .  .  .  .  .  }
  2693  .  .  .  .  .  .  .  }
  2694  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
  2695  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  2696  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2697  .  .  .  .  .  .  .  .  .  Kind: "number"
  2698  .  .  .  .  .  .  .  .  .  Value: "0"
  2699  .  .  .  .  .  .  .  .  }
  2700  .  .  .  .  .  .  .  }
  2701  .  .  .  .  .  .  }
  2702  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
  2703  .  .  .  .  .  .  .  Position: ast.Position {}
  2704  .  .  .  .  .  .  .  Left: *ast.Ident {
  2705  .  .  .  .  .  .  .  .  Name: "i"
  2706  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2707  .  .  .  .  .  .  .  }
  2708  .  .  .  .  .  .  .  Op: "<"
  2709  .  .  .  .  .  .  .  Right: *ast.BasicLit {
  2710  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2711  .  .  .  .  .  .  .  .  Kind: "number"
  2712  .  .  .  .  .  .  .  .  Value: "9"
  2713  .  .  .  .  .  .  .  }
  2714  .  .  .  .  .  .  }
  2715  .  .  .  .  .  .  Increment: *ast.IncExpr {
  2716  .  .  .  .  .  .  .  Position: ast.Position {}
  2717  .  .  .  .  .  .  .  Op: "++"
  2718  .  .  .  .  .  .  .  Arg: *ast.Ident {
  2719  .  .  .  .  .  .  .  .  Name: "i"
  2720  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2721  .  .  .  .  .  .  .  }
  2722  .  .  .  .  .  .  }
  2723  .  .  .  .  .  .  Body: *ast.BlockStmt {
  2724  .  .  .  .  .  .  .  Position: ast.Position {}
  2725  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
  2726  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
  2727  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2728  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
  2729  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2730  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  2731  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2732  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  2733  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
  2734  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2735  .  .  .  .  .  .  .  .  .  .  .  }
  2736  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2737  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
  2738  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2739  .  .  .  .  .  .  .  .  .  .  .  }
  2740  .  .  .  .  .  .  .  .  .  .  }
  2741  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  2742  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
  2743  .  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
  2744  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2745  .  .  .  .  .  .  .  .  .  .  .  }
  2746  .  .  .  .  .  .  .  .  .  .  }
  2747  .  .  .  .  .  .  .  .  .  }
  2748  .  .  .  .  .  .  .  .  }
  2749  .  .  .  .  .  .  .  }
  2750  .  .  .  .  .  .  }
  2751  .  .  .  .  .  }
  2752  .  .  .  .  }
  2753  .  .  .  }
  2754  .  .  }
  2755  .  .  16: *ast.FuncDecl {
  2756  .  .  .  Position: ast.Position {}
  2757  .  .  .  Name: *ast.Ident {
  2758  .  .  .  .  Name: "ForStatementIteratingOverList"
  2759  .  .  .  .  Position: ast.Position {}
  2760  .  .  .  }
  2761  .  .  .  Type: *ast.FuncType {
  2762  .  .  .  .  Position: ast.Position {}
  2763  .  .  .  .  Params: *ast.FieldList {
  2764  .  .  .  .  .  Position: ast.Position {}
  2765  .  .  .  .  .  List: []*ast.Field (len = 1) {
  2766  .  .  .  .  .  .  0: *ast.Field {
  2767  .  .  .  .  .  .  .  Position: ast.Position {}
  2768  .  .  .  .  .  .  .  Name: *ast.Ident {
  2769  .  .  .  .  .  .  .  .  Name: "data"
  2770  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2771  .  .  .  .  .  .  .  }
  2772  .  .  .  .  .  .  }
  2773  .  .  .  .  .  }
  2774  .  .  .  .  }
  2775  .  .  .  }
  2776  .  .  .  Body: *ast.BlockStmt {
  2777  .  .  .  .  Position: ast.Position {}
  2778  .  .  .  .  List: []ast.Stmt (len = 3) {
  2779  .  .  .  .  .  0: *ast.AssignStmt {
  2780  .  .  .  .  .  .  Position: ast.Position {}
  2781  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
  2782  .  .  .  .  .  .  .  0: *ast.Ident {
  2783  .  .  .  .  .  .  .  .  Name: "sum"
  2784  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2785  .  .  .  .  .  .  .  }
  2786  .  .  .  .  .  .  }
  2787  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
  2788  .  .  .  .  .  .  .  0: *ast.BasicLit {
  2789  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2790  .  .  .  .  .  .  .  .  Kind: "number"
  2791  .  .  .  .  .  .  .  .  Value: "0"
  2792  .  .  .  .  .  .  .  }
  2793  .  .  .  .  .  .  }
  2794  .  .  .  .  .  }
  2795  .  .  .  .  .  1: *ast.ForStatement {
  2796  .  .  .  .  .  .  Position: ast.Position {}
  2797  .  .  .  .  .  .  VarDecl: *ast.AssignStmt {
  2798  .  .  .  .  .  .  .  Position: ast.Position {}
  2799  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
  2800  .  .  .  .  .  .  .  .  0: *ast.Ident {
  2801  .  .  .  .  .  .  .  .  .  Name: "i"
  2802  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2803  .  .  .  .  .  .  .  .  }
  2804  .  .  .  .  .  .  .  }
  2805  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
  2806  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  2807  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2808  .  .  .  .  .  .  .  .  .  Kind: "number"
  2809  .  .  .  .  .  .  .  .  .  Value: "0"
  2810  .  .  .  .  .  .  .  .  }
  2811  .  .  .  .  .  .  .  }
  2812  .  .  .  .  .  .  }
  2813  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
  2814  .  .  .  .  .  .  .  Position: ast.Position {}
  2815  .  .  .  .  .  .  .  Left: *ast.Ident {
  2816  .  .  .  .  .  .  .  .  Name: "i"
  2817  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2818  .  .  .  .  .  .  .  }
  2819  .  .  .  .  .  .  .  Op: "<"
  2820  .  .  .  .  .  .  .  Right: *ast.SelectorExpr {
  2821  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2822  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  2823  .  .  .  .  .  .  .  .  .  Name: "data"
  2824  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2825  .  .  .  .  .  .  .  .  }
  2826  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2827  .  .  .  .  .  .  .  .  .  Name: "length"
  2828  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2829  .  .  .  .  .  .  .  .  }
  2830  .  .  .  .  .  .  .  }
  2831  .  .  .  .  .  .  }
  2832  .  .  .  .  .  .  Increment: *ast.IncExpr {
  2833  .  .  .  .  .  .  .  Position: ast.Position {}
  2834  .  .  .  .  .  .  .  Op: "++"
  2835  .  .  .  .  .  .  .  Arg: *ast.Ident {
  2836  .  .  .  .  .  .  .  .  Name: "i"
  2837  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2838  .  .  .  .  .  .  .  }
  2839  .  .  .  .  .  .  }
  2840  .  .  .  .  .  .  Body: *ast.BlockStmt {
  2841  .  .  .  .  .  .  .  Position: ast.Position {}
  2842  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
  2843  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
  2844  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2845  .  .  .  .  .  .  .  .  .  Expr: *ast.BadNode {
  2846  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2847  .  .  .  .  .  .  .  .  .  .  Comment: "unsupported node type <augmented_assignment_expression>"
  2848  .  .  .  .  .  .  .  .  .  }
  2849  .  .  .  .  .  .  .  .  }
  2850  .  .  .  .  .  .  .  }
  2851  .  .  .  .  .  .  }
  2852  .  .  .  .  .  }
  2853  .  .  .  .  .  2: *ast.ReturnStmt {
  2854  .  .  .  .  .  .  Position: ast.Position {}
  2855  .  .  .  .  .  .  Results: []ast.Expr (len = 1) {
  2856  .  .  .  .  .  .  .  0: *ast.Ident {
  2857  .  .  .  .  .  .  .  .  Name: "sum"
  2858  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2859  .  .  .  .  .  .  .  }
  2860  .  .  .  .  .  .  }
  2861  .  .  .  .  .  }
  2862  .  .  .  .  }
  2863  .  .  .  }
  2864  .  .  }
  2865  .  .  17: *ast.FuncDecl {
  2866  .  .  .  Position: ast.Position {}
  2867  .  .  .  Name: *ast.Ident {
  2868  .  .  .  .  Name: "ForStatementWithoutBinaryExpressionIncremet"
  2869  .  .  .  .  Position: ast.Position {}
  2870  .  .  .  }
  2871  .  .  .  Type: *ast.FuncType {
  2872  .  .  .  .  Position: ast.Position {}
  2873  .  .  .  .  Params: *ast.FieldList {
  2874  .  .  .  .  .  Position: ast.Position {}
  2875  .  .  .  .  }
  2876  .  .  .  }
  2877  .  .  .  Body: *ast.BlockStmt {
  2878  .  .  .  .  Position: ast.Position {}
  2879  .  .  .  .  List: []ast.Stmt (len = 1) {
  2880  .  .  .  .  .  0: *ast.ForStatement {
  2881  .  .  .  .  .  .  Position: ast.Position {}
  2882  .  .  .  .  .  .  VarDecl: *ast.AssignStmt {
  2883  .  .  .  .  .  .  .  Position: ast.Position {}
  2884  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 2) {
  2885  .  .  .  .  .  .  .  .  0: *ast.Ident {
  2886  .  .  .  .  .  .  .  .  .  Name: "a"
  2887  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2888  .  .  .  .  .  .  .  .  }
  2889  .  .  .  .  .  .  .  .  1: *ast.Ident {
  2890  .  .  .  .  .  .  .  .  .  Name: "b"
  2891  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2892  .  .  .  .  .  .  .  .  }
  2893  .  .  .  .  .  .  .  }
  2894  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 0) {}
  2895  .  .  .  .  .  .  }
  2896  .  .  .  .  .  .  Cond: *ast.Ident {
  2897  .  .  .  .  .  .  .  Name: "c"
  2898  .  .  .  .  .  .  .  Position: ast.Position {}
  2899  .  .  .  .  .  .  }
  2900  .  .  .  .  .  .  Increment: *ast.Ident {
  2901  .  .  .  .  .  .  .  Name: "d"
  2902  .  .  .  .  .  .  .  Position: ast.Position {}
  2903  .  .  .  .  .  .  }
  2904  .  .  .  .  .  .  Body: *ast.BlockStmt {
  2905  .  .  .  .  .  .  .  Position: ast.Position {}
  2906  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
  2907  .  .  .  .  .  .  .  .  0: *ast.BadNode {
  2908  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2909  .  .  .  .  .  .  .  .  .  Comment: "unsupported node type <identifier>"
  2910  .  .  .  .  .  .  .  .  }
  2911  .  .  .  .  .  .  .  }
  2912  .  .  .  .  .  .  }
  2913  .  .  .  .  .  }
  2914  .  .  .  .  }
  2915  .  .  .  }
  2916  .  .  }
  2917  .  .  18: *ast.FuncDecl {
  2918  .  .  .  Position: ast.Position {}
  2919  .  .  .  Name: *ast.Ident {
  2920  .  .  .  .  Name: "ForStatementEndlessRecursion"
  2921  .  .  .  .  Position: ast.Position {}
  2922  .  .  .  }
  2923  .  .  .  Type: *ast.FuncType {
  2924  .  .  .  .  Position: ast.Position {}
  2925  .  .  .  .  Params: *ast.FieldList {
  2926  .  .  .  .  .  Position: ast.Position {}
  2927  .  .  .  .  }
  2928  .  .  .  }
  2929  .  .  .  Body: *ast.BlockStmt {
  2930  .  .  .  .  Position: ast.Position {}
  2931  .  .  .  .  List: []ast.Stmt (len = 1) {
  2932  .  .  .  .  .  0: *ast.ForStatement {
  2933  .  .  .  .  .  .  Position: ast.Position {}
  2934  .  .  .  .  .  .  Body: *ast.BlockStmt {
  2935  .  .  .  .  .  .  .  Position: ast.Position {}
  2936  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
  2937  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
  2938  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2939  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
  2940  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2941  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  2942  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2943  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  2944  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
  2945  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2946  .  .  .  .  .  .  .  .  .  .  .  }
  2947  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2948  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
  2949  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2950  .  .  .  .  .  .  .  .  .  .  .  }
  2951  .  .  .  .  .  .  .  .  .  .  }
  2952  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  2953  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  2954  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2955  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  2956  .  .  .  .  .  .  .  .  .  .  .  .  Value: "endless recursion"
  2957  .  .  .  .  .  .  .  .  .  .  .  }
  2958  .  .  .  .  .  .  .  .  .  .  }
  2959  .  .  .  .  .  .  .  .  .  }
  2960  .  .  .  .  .  .  .  .  }
  2961  .  .  .  .  .  .  .  }
  2962  .  .  .  .  .  .  }
  2963  .  .  .  .  .  }
  2964  .  .  .  .  }
  2965  .  .  .  }
  2966  .  .  }
  2967  .  .  19: *ast.FuncDecl {
  2968  .  .  .  Position: ast.Position {}
  2969  .  .  .  Name: *ast.Ident {
  2970  .  .  .  .  Name: "ForStatementEmptyBody"
  2971  .  .  .  .  Position: ast.Position {}
  2972  .  .  .  }
  2973  .  .  .  Type: *ast.FuncType {
  2974  .  .  .  .  Position: ast.Position {}
  2975  .  .  .  .  Params: *ast.FieldList {
  2976  .  .  .  .  .  Position: ast.Position {}
  2977  .  .  .  .  }
  2978  .  .  .  }
  2979  .  .  .  Body: *ast.BlockStmt {
  2980  .  .  .  .  Position: ast.Position {}
  2981  .  .  .  .  List: []ast.Stmt (len = 1) {
  2982  .  .  .  .  .  0: *ast.ForStatement {
  2983  .  .  .  .  .  .  Position: ast.Position {}
  2984  .  .  .  .  .  .  VarDecl: *ast.AssignStmt {
  2985  .  .  .  .  .  .  .  Position: ast.Position {}
  2986  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
  2987  .  .  .  .  .  .  .  .  0: *ast.Ident {
  2988  .  .  .  .  .  .  .  .  .  Name: "i"
  2989  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2990  .  .  .  .  .  .  .  .  }
  2991  .  .  .  .  .  .  .  }
  2992  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
  2993  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  2994  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  2995  .  .  .  .  .  .  .  .  .  Kind: "number"
  2996  .  .  .  .  .  .  .  .  .  Value: "0"
  2997  .  .  .  .  .  .  .  .  }
  2998  .  .  .  .  .  .  .  }
  2999  .  .  .  .  .  .  }
  3000  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
  3001  .  .  .  .  .  .  .  Position: ast.Position {}
  3002  .  .  .  .  .  .  .  Left: *ast.Ident {
  3003  .  .  .  .  .  .  .  .  Name: "i"
  3004  .  .  .  .  .  .  .  .  Position: ast.Position {}
  3005  .  .  .  .  .  .  .  }
  3006  .  .  .  .  .  .  .  Op: "<"
  3007  .  .  .  .  .  .  .  Right: *ast.Ident {
  3008  .  .  .  .  .  .  .  .  Name: "l"
  3009  .  .  .  .  .  .  .  .  Position: ast.Position {}
  3010  .  .  .  .  .  .  .  }
  3011  .  .  .  .  .  .  }
  3012  .  .  .  .  .  .  Increment: *ast.IncExpr {
  3013  .  .  .  .  .  .  .  Position: ast.Position {}
  3014  .  .  .  .  .  .  .  Op: "++"
  3015  .  .  .  .  .  .  .  Arg: *ast.Ident {
  3016  .  .  .  .  .  .  .  .  Name: "i"
  3017  .  .  .  .  .  .  .  .  Position: ast.Position {}
  3018  .  .  .  .  .  .  .  }
  3019  .  .  .  .  .  .  }
  3020  .  .  .  .  .  .  Body: *ast.BlockStmt {
  3021  .  .  .  .  .  .  .  Position: ast.Position {}
  3022  .  .  .  .  .  .  .  List: []ast.Stmt (len = 0) {}
  3023  .  .  .  .  .  .  }
  3024  .  .  .  .  .  }
  3025  .  .  .  .  }
  3026  .  .  .  }
  3027  .  .  }
  3028  .  .  20: *ast.FuncDecl {
  3029  .  .  .  Position: ast.Position {}
  3030  .  .  .  Name: *ast.Ident {
  3031  .  .  .  .  Name: "ForInStatement"
  3032  .  .  .  .  Position: ast.Position {}
  3033  .  .  .  }
  3034  .  .  .  Type: *ast.FuncType {
  3035  .  .  .  .  Position: ast.Position {}
  3036  .  .  .  .  Params: *ast.FieldList {
  3037  .  .  .  .  .  Position: ast.Position {}
  3038  .  .  .  .  }
  3039  .  .  .  }
  3040  .  .  .  Body: *ast.BlockStmt {
  3041  .  .  .  .  Position: ast.Position {}
  3042  .  .  .  .  List: []ast.Stmt (len = 2) {
  3043  .  .  .  .  .  0: *ast.AssignStmt {
  3044  .  .  .  .  .  .  Position: ast.Position {}
  3045  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
  3046  .  .  .  .  .  .  .  0: *ast.Ident {
  3047  .  .  .  .  .  .  .  .  Name: "values"
  3048  .  .  .  .  .  .  .  .  Position: ast.Position {}
  3049  .  .  .  .  .  .  .  }
  3050  .  .  .  .  .  .  }
  3051  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
  3052  .  .  .  .  .  .  .  0: *ast.ObjectExpr {
  3053  .  .  .  .  .  .  .  .  Position: ast.Position {}
  3054  .  .  .  .  .  .  .  .  Elts: []ast.Expr (len = 3) {
  3055  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  3056  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  3057  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  3058  .  .  .  .  .  .  .  .  .  .  Value: "a"
  3059  .  .  .  .  .  .  .  .  .  }
  3060  .  .  .  .  .  .  .  .  .  1: *ast.BasicLit {
  3061  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  3062  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  3063  .  .  .  .  .  .  .  .  .  .  Value: "b"
  3064  .  .  .  .  .  .  .  .  .  }
  3065  .  .  .  .  .  .  .  .  .  2: *ast.BasicLit {
  3066  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  3067  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  3068  .  .  .  .  .  .  .  .  .  .  Value: "c"
  3069  .  .  .  .  .  .  .  .  .  }
  3070  .  .  .  .  .  .  .  .  }
  3071  .  .  .  .  .  .  .  .  Comment: "array"
  3072  .  .  .  .  .  .  .  }
  3073  .  .  .  .  .  .  }
  3074  .  .  .  .  .  }
  3075  .  .  .  .  .  1: *ast.ForInStatement {
  3076  .  .  .  .  .  .  Position: ast.Position {}
  3077  .  .  .  .  .  .  Left: *ast.Ident {
  3078  .  .  .  .  .  .  .  Name: "value"
  3079  .  .  .  .  .  .  .  Position: ast.Position {}
  3080  .  .  .  .  .  .  }
  3081  .  .  .  .  .  .  Right: *ast.Ident {
  3082  .  .  .  .  .  .  .  Name: "values"
  3083  .  .  .  .  .  .  .  Position: ast.Position {}
  3084  .  .  .  .  .  .  }
  3085  .  .  .  .  .  .  Body: *ast.BlockStmt {
  3086  .  .  .  .  .  .  .  Position: ast.Position {}
  3087  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
  3088  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
  3089  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  3090  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
  3091  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  3092  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  3093  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  3094  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  3095  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
  3096  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  3097  .  .  .  .  .  .  .  .  .  .  .  }
  3098  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  3099  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
  3100  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  3101  .  .  .  .  .  .  .  .  .  .  .  }
  3102  .  .  .  .  .  .  .  .  .  .  }
  3103  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  3104  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
  3105  .  .  .  .  .  .  .  .  .  .  .  .  Name: "value"
  3106  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  3107  .  .  .  .  .  .  .  .  .  .  .  }
  3108  .  .  .  .  .  .  .  .  .  .  }
  3109  .  .  .  .  .  .  .  .  .  }
  3110  .  .  .  .  .  .  .  .  }
  3111  .  .  .  .  .  .  .  }
  3112  .  .  .  .  .  .  }
  3113  .  .  .  .  .  }
  3114  .  .  .  .  }
  3115  .  .  .  }
  3116  .  .  }
  3117  .  .  21: *ast.FuncDecl {
  3118  .  .  .  Position: ast.Position {}
  3119  .  .  .  Name: *ast.Ident {
  3120  .  .  .  .  Name: "ExportStatement"
  3121  .  .  .  .  Position: ast.Position {}
  3122  .  .  .  }
  3123  .  .  .  Type: *ast.FuncType {
  3124  .  .  .  .  Position: ast.Position {}
  3125  .  .  .  .  Params: *ast.FieldList {
  3126  .  .  .  .  .  Position: ast.Position {}
  3127  .  .  .  .  }
  3128  .  .  .  }
  3129  .  .  .  Body: *ast.BlockStmt {
  3130  .  .  .  .  Position: ast.Position {}
  3131  .  .  .  .  List: []ast.Stmt (len = 1) {
  3132  .  .  .  .  .  0: nil
  3133  .  .  .  .  }
  3134  .  .  .  }
  3135  .  .  }
  3136  .  }
  3137  }
