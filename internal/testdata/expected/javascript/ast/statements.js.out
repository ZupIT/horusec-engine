     0  *ast.File {
     1  .  Position: ast.Position {}
     2  .  Name: *ast.Ident {
     3  .  .  Name: "statements.js"
     4  .  .  Position: ast.Position {}
     5  .  }
     6  .  Decls: []ast.Decl (len = 11) {
     7  .  .  0: *ast.FuncDecl {
     8  .  .  .  Position: ast.Position {}
     9  .  .  .  Name: *ast.Ident {
    10  .  .  .  .  Name: "IfStatement"
    11  .  .  .  .  Position: ast.Position {}
    12  .  .  .  }
    13  .  .  .  Type: *ast.FuncType {
    14  .  .  .  .  Position: ast.Position {}
    15  .  .  .  .  Params: *ast.FieldList {
    16  .  .  .  .  .  Position: ast.Position {}
    17  .  .  .  .  .  List: []*ast.Field (len = 2) {
    18  .  .  .  .  .  .  0: *ast.Field {
    19  .  .  .  .  .  .  .  Position: ast.Position {}
    20  .  .  .  .  .  .  .  Name: *ast.Ident {
    21  .  .  .  .  .  .  .  .  Name: "a"
    22  .  .  .  .  .  .  .  .  Position: ast.Position {}
    23  .  .  .  .  .  .  .  }
    24  .  .  .  .  .  .  }
    25  .  .  .  .  .  .  1: *ast.Field {
    26  .  .  .  .  .  .  .  Position: ast.Position {}
    27  .  .  .  .  .  .  .  Name: *ast.Ident {
    28  .  .  .  .  .  .  .  .  Name: "b"
    29  .  .  .  .  .  .  .  .  Position: ast.Position {}
    30  .  .  .  .  .  .  .  }
    31  .  .  .  .  .  .  }
    32  .  .  .  .  .  }
    33  .  .  .  .  }
    34  .  .  .  }
    35  .  .  .  Body: *ast.BlockStmt {
    36  .  .  .  .  Position: ast.Position {}
    37  .  .  .  .  List: []ast.Stmt (len = 2) {
    38  .  .  .  .  .  0: *ast.IfStmt {
    39  .  .  .  .  .  .  Position: ast.Position {}
    40  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
    41  .  .  .  .  .  .  .  Position: ast.Position {}
    42  .  .  .  .  .  .  .  Left: *ast.Ident {
    43  .  .  .  .  .  .  .  .  Name: "a"
    44  .  .  .  .  .  .  .  .  Position: ast.Position {}
    45  .  .  .  .  .  .  .  }
    46  .  .  .  .  .  .  .  Op: ">="
    47  .  .  .  .  .  .  .  Right: *ast.BasicLit {
    48  .  .  .  .  .  .  .  .  Position: ast.Position {}
    49  .  .  .  .  .  .  .  .  Kind: "number"
    50  .  .  .  .  .  .  .  .  Value: "10"
    51  .  .  .  .  .  .  .  }
    52  .  .  .  .  .  .  }
    53  .  .  .  .  .  .  Body: *ast.BlockStmt {
    54  .  .  .  .  .  .  .  Position: ast.Position {}
    55  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
    56  .  .  .  .  .  .  .  .  0: *ast.AssignStmt {
    57  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    58  .  .  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
    59  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
    60  .  .  .  .  .  .  .  .  .  .  .  Name: "a"
    61  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    62  .  .  .  .  .  .  .  .  .  .  }
    63  .  .  .  .  .  .  .  .  .  }
    64  .  .  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
    65  .  .  .  .  .  .  .  .  .  .  0: *ast.BinaryExpr {
    66  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    67  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
    68  .  .  .  .  .  .  .  .  .  .  .  .  Name: "b"
    69  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    70  .  .  .  .  .  .  .  .  .  .  .  }
    71  .  .  .  .  .  .  .  .  .  .  .  Op: "*"
    72  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
    73  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    74  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
    75  .  .  .  .  .  .  .  .  .  .  .  .  Value: "2"
    76  .  .  .  .  .  .  .  .  .  .  .  }
    77  .  .  .  .  .  .  .  .  .  .  }
    78  .  .  .  .  .  .  .  .  .  }
    79  .  .  .  .  .  .  .  .  }
    80  .  .  .  .  .  .  .  }
    81  .  .  .  .  .  .  }
    82  .  .  .  .  .  .  Else: *ast.IfStmt {
    83  .  .  .  .  .  .  .  Position: ast.Position {}
    84  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
    85  .  .  .  .  .  .  .  .  Position: ast.Position {}
    86  .  .  .  .  .  .  .  .  Left: *ast.Ident {
    87  .  .  .  .  .  .  .  .  .  Name: "a"
    88  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    89  .  .  .  .  .  .  .  .  }
    90  .  .  .  .  .  .  .  .  Op: "<="
    91  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
    92  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    93  .  .  .  .  .  .  .  .  .  Kind: "number"
    94  .  .  .  .  .  .  .  .  .  Value: "5"
    95  .  .  .  .  .  .  .  .  }
    96  .  .  .  .  .  .  .  }
    97  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
    98  .  .  .  .  .  .  .  .  Position: ast.Position {}
    99  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
   100  .  .  .  .  .  .  .  .  .  0: *ast.AssignStmt {
   101  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   102  .  .  .  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
   103  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   104  .  .  .  .  .  .  .  .  .  .  .  .  Name: "a"
   105  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   106  .  .  .  .  .  .  .  .  .  .  .  }
   107  .  .  .  .  .  .  .  .  .  .  }
   108  .  .  .  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
   109  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BinaryExpr {
   110  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   111  .  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
   112  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "b"
   113  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   114  .  .  .  .  .  .  .  .  .  .  .  .  }
   115  .  .  .  .  .  .  .  .  .  .  .  .  Op: "+"
   116  .  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.Ident {
   117  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "a"
   118  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   119  .  .  .  .  .  .  .  .  .  .  .  .  }
   120  .  .  .  .  .  .  .  .  .  .  .  }
   121  .  .  .  .  .  .  .  .  .  .  }
   122  .  .  .  .  .  .  .  .  .  }
   123  .  .  .  .  .  .  .  .  }
   124  .  .  .  .  .  .  .  }
   125  .  .  .  .  .  .  .  Else: *ast.BlockStmt {
   126  .  .  .  .  .  .  .  .  Position: ast.Position {}
   127  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 3) {
   128  .  .  .  .  .  .  .  .  .  0: *ast.AssignStmt {
   129  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   130  .  .  .  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
   131  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   132  .  .  .  .  .  .  .  .  .  .  .  .  Name: "a"
   133  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   134  .  .  .  .  .  .  .  .  .  .  .  }
   135  .  .  .  .  .  .  .  .  .  .  }
   136  .  .  .  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
   137  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BinaryExpr {
   138  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   139  .  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
   140  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "a"
   141  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   142  .  .  .  .  .  .  .  .  .  .  .  .  }
   143  .  .  .  .  .  .  .  .  .  .  .  .  Op: "+"
   144  .  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.Ident {
   145  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "b"
   146  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   147  .  .  .  .  .  .  .  .  .  .  .  .  }
   148  .  .  .  .  .  .  .  .  .  .  .  }
   149  .  .  .  .  .  .  .  .  .  .  }
   150  .  .  .  .  .  .  .  .  .  }
   151  .  .  .  .  .  .  .  .  .  1: *ast.AssignStmt {
   152  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   153  .  .  .  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
   154  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   155  .  .  .  .  .  .  .  .  .  .  .  .  Name: "c"
   156  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   157  .  .  .  .  .  .  .  .  .  .  .  }
   158  .  .  .  .  .  .  .  .  .  .  }
   159  .  .  .  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
   160  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BinaryExpr {
   161  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   162  .  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
   163  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "a"
   164  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   165  .  .  .  .  .  .  .  .  .  .  .  .  }
   166  .  .  .  .  .  .  .  .  .  .  .  .  Op: "*"
   167  .  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   168  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   169  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
   170  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "10"
   171  .  .  .  .  .  .  .  .  .  .  .  .  }
   172  .  .  .  .  .  .  .  .  .  .  .  }
   173  .  .  .  .  .  .  .  .  .  .  }
   174  .  .  .  .  .  .  .  .  .  }
   175  .  .  .  .  .  .  .  .  .  2: *ast.ExprStmt {
   176  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   177  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   178  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   179  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   180  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   181  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   182  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   183  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   184  .  .  .  .  .  .  .  .  .  .  .  .  }
   185  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   186  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   187  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   188  .  .  .  .  .  .  .  .  .  .  .  .  }
   189  .  .  .  .  .  .  .  .  .  .  .  }
   190  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   191  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   192  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "c"
   193  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   194  .  .  .  .  .  .  .  .  .  .  .  .  }
   195  .  .  .  .  .  .  .  .  .  .  .  }
   196  .  .  .  .  .  .  .  .  .  .  }
   197  .  .  .  .  .  .  .  .  .  }
   198  .  .  .  .  .  .  .  .  }
   199  .  .  .  .  .  .  .  }
   200  .  .  .  .  .  .  }
   201  .  .  .  .  .  }
   202  .  .  .  .  .  1: *ast.ReturnStmt {
   203  .  .  .  .  .  .  Position: ast.Position {}
   204  .  .  .  .  .  .  Results: []ast.Expr (len = 1) {
   205  .  .  .  .  .  .  .  0: *ast.Ident {
   206  .  .  .  .  .  .  .  .  Name: "a"
   207  .  .  .  .  .  .  .  .  Position: ast.Position {}
   208  .  .  .  .  .  .  .  }
   209  .  .  .  .  .  .  }
   210  .  .  .  .  .  }
   211  .  .  .  .  }
   212  .  .  .  }
   213  .  .  }
   214  .  .  1: *ast.FuncDecl {
   215  .  .  .  Position: ast.Position {}
   216  .  .  .  Name: *ast.Ident {
   217  .  .  .  .  Name: "TryStatement"
   218  .  .  .  .  Position: ast.Position {}
   219  .  .  .  }
   220  .  .  .  Type: *ast.FuncType {
   221  .  .  .  .  Position: ast.Position {}
   222  .  .  .  .  Params: *ast.FieldList {
   223  .  .  .  .  .  Position: ast.Position {}
   224  .  .  .  .  }
   225  .  .  .  }
   226  .  .  .  Body: *ast.BlockStmt {
   227  .  .  .  .  Position: ast.Position {}
   228  .  .  .  .  List: []ast.Stmt (len = 1) {
   229  .  .  .  .  .  0: *ast.TryStmt {
   230  .  .  .  .  .  .  Position: ast.Position {}
   231  .  .  .  .  .  .  Body: *ast.BlockStmt {
   232  .  .  .  .  .  .  .  Position: ast.Position {}
   233  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
   234  .  .  .  .  .  .  .  .  0: *ast.AssignStmt {
   235  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   236  .  .  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
   237  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   238  .  .  .  .  .  .  .  .  .  .  .  Name: "value"
   239  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   240  .  .  .  .  .  .  .  .  .  .  }
   241  .  .  .  .  .  .  .  .  .  }
   242  .  .  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
   243  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   244  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   245  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   246  .  .  .  .  .  .  .  .  .  .  .  Value: "test"
   247  .  .  .  .  .  .  .  .  .  .  }
   248  .  .  .  .  .  .  .  .  .  }
   249  .  .  .  .  .  .  .  .  }
   250  .  .  .  .  .  .  .  .  1: *ast.ExprStmt {
   251  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   252  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   253  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   254  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   255  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   256  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   257  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   258  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   259  .  .  .  .  .  .  .  .  .  .  .  }
   260  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   261  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   262  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   263  .  .  .  .  .  .  .  .  .  .  .  }
   264  .  .  .  .  .  .  .  .  .  .  }
   265  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   266  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   267  .  .  .  .  .  .  .  .  .  .  .  .  Name: "value"
   268  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   269  .  .  .  .  .  .  .  .  .  .  .  }
   270  .  .  .  .  .  .  .  .  .  .  }
   271  .  .  .  .  .  .  .  .  .  }
   272  .  .  .  .  .  .  .  .  }
   273  .  .  .  .  .  .  .  }
   274  .  .  .  .  .  .  }
   275  .  .  .  .  .  .  CatchClause: []*ast.CatchClause (len = 1) {
   276  .  .  .  .  .  .  .  0: *ast.CatchClause {
   277  .  .  .  .  .  .  .  .  Position: ast.Position {}
   278  .  .  .  .  .  .  .  .  Parameter: *ast.Ident {
   279  .  .  .  .  .  .  .  .  .  Name: "err"
   280  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   281  .  .  .  .  .  .  .  .  }
   282  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
   283  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   284  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
   285  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   286  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   287  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   288  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   289  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   290  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   291  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   292  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   293  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   294  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   295  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   296  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "error"
   297  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   298  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   299  .  .  .  .  .  .  .  .  .  .  .  .  }
   300  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   301  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   302  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "err"
   303  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   304  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   305  .  .  .  .  .  .  .  .  .  .  .  .  }
   306  .  .  .  .  .  .  .  .  .  .  .  }
   307  .  .  .  .  .  .  .  .  .  .  }
   308  .  .  .  .  .  .  .  .  .  }
   309  .  .  .  .  .  .  .  .  }
   310  .  .  .  .  .  .  .  }
   311  .  .  .  .  .  .  }
   312  .  .  .  .  .  .  Finalizer: *ast.BlockStmt {
   313  .  .  .  .  .  .  .  Position: ast.Position {}
   314  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
   315  .  .  .  .  .  .  .  .  0: *ast.AssignStmt {
   316  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   317  .  .  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
   318  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   319  .  .  .  .  .  .  .  .  .  .  .  Name: "sum"
   320  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   321  .  .  .  .  .  .  .  .  .  .  }
   322  .  .  .  .  .  .  .  .  .  }
   323  .  .  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
   324  .  .  .  .  .  .  .  .  .  .  0: *ast.BinaryExpr {
   325  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   326  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.BasicLit {
   327  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   328  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
   329  .  .  .  .  .  .  .  .  .  .  .  .  Value: "1"
   330  .  .  .  .  .  .  .  .  .  .  .  }
   331  .  .  .  .  .  .  .  .  .  .  .  Op: "+"
   332  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   333  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   334  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
   335  .  .  .  .  .  .  .  .  .  .  .  .  Value: "1"
   336  .  .  .  .  .  .  .  .  .  .  .  }
   337  .  .  .  .  .  .  .  .  .  .  }
   338  .  .  .  .  .  .  .  .  .  }
   339  .  .  .  .  .  .  .  .  }
   340  .  .  .  .  .  .  .  .  1: *ast.ExprStmt {
   341  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   342  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   343  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   344  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   345  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   346  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   347  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   348  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   349  .  .  .  .  .  .  .  .  .  .  .  }
   350  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   351  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   352  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   353  .  .  .  .  .  .  .  .  .  .  .  }
   354  .  .  .  .  .  .  .  .  .  .  }
   355  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   356  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   357  .  .  .  .  .  .  .  .  .  .  .  .  Name: "sum"
   358  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   359  .  .  .  .  .  .  .  .  .  .  .  }
   360  .  .  .  .  .  .  .  .  .  .  }
   361  .  .  .  .  .  .  .  .  .  }
   362  .  .  .  .  .  .  .  .  }
   363  .  .  .  .  .  .  .  }
   364  .  .  .  .  .  .  }
   365  .  .  .  .  .  }
   366  .  .  .  .  }
   367  .  .  .  }
   368  .  .  }
   369  .  .  2: *ast.FuncDecl {
   370  .  .  .  Position: ast.Position {}
   371  .  .  .  Name: *ast.Ident {
   372  .  .  .  .  Name: "WhileStatement"
   373  .  .  .  .  Position: ast.Position {}
   374  .  .  .  }
   375  .  .  .  Type: *ast.FuncType {
   376  .  .  .  .  Position: ast.Position {}
   377  .  .  .  .  Params: *ast.FieldList {
   378  .  .  .  .  .  Position: ast.Position {}
   379  .  .  .  .  }
   380  .  .  .  }
   381  .  .  .  Body: *ast.BlockStmt {
   382  .  .  .  .  Position: ast.Position {}
   383  .  .  .  .  List: []ast.Stmt (len = 2) {
   384  .  .  .  .  .  0: *ast.LabeledStatement {
   385  .  .  .  .  .  .  Position: ast.Position {}
   386  .  .  .  .  .  .  Label: *ast.Ident {
   387  .  .  .  .  .  .  .  Name: "whileStmt"
   388  .  .  .  .  .  .  .  Position: ast.Position {}
   389  .  .  .  .  .  .  }
   390  .  .  .  .  .  .  Body: []ast.Stmt (len = 1) {
   391  .  .  .  .  .  .  .  0: *ast.WhileStmt {
   392  .  .  .  .  .  .  .  .  Position: ast.Position {}
   393  .  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
   394  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   395  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
   396  .  .  .  .  .  .  .  .  .  .  Name: "i"
   397  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   398  .  .  .  .  .  .  .  .  .  }
   399  .  .  .  .  .  .  .  .  .  Op: "<="
   400  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   401  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   402  .  .  .  .  .  .  .  .  .  .  Kind: "number"
   403  .  .  .  .  .  .  .  .  .  .  Value: "5"
   404  .  .  .  .  .  .  .  .  .  }
   405  .  .  .  .  .  .  .  .  }
   406  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
   407  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   408  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 3) {
   409  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   410  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   411  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   412  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   413  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   414  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   415  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   416  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   417  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   418  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   419  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   420  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   421  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   422  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   423  .  .  .  .  .  .  .  .  .  .  .  .  }
   424  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   425  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   426  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   427  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   428  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "test"
   429  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   430  .  .  .  .  .  .  .  .  .  .  .  .  }
   431  .  .  .  .  .  .  .  .  .  .  .  }
   432  .  .  .  .  .  .  .  .  .  .  }
   433  .  .  .  .  .  .  .  .  .  .  1: *ast.IfStmt {
   434  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   435  .  .  .  .  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
   436  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   437  .  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
   438  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
   439  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   440  .  .  .  .  .  .  .  .  .  .  .  .  }
   441  .  .  .  .  .  .  .  .  .  .  .  .  Op: "==="
   442  .  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   443  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   444  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
   445  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "4"
   446  .  .  .  .  .  .  .  .  .  .  .  .  }
   447  .  .  .  .  .  .  .  .  .  .  .  }
   448  .  .  .  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
   449  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   450  .  .  .  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
   451  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   452  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   453  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   454  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   455  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   456  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   457  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   458  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   459  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   460  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   461  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   462  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   463  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   464  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   465  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   466  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   467  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   468  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   469  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   470  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "finish"
   471  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   472  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   473  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   474  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   475  .  .  .  .  .  .  .  .  .  .  .  .  .  1: *ast.BreakStatement {
   476  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   477  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Label: *ast.Ident {
   478  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "whileStmt"
   479  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   480  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   481  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   482  .  .  .  .  .  .  .  .  .  .  .  .  }
   483  .  .  .  .  .  .  .  .  .  .  .  }
   484  .  .  .  .  .  .  .  .  .  .  }
   485  .  .  .  .  .  .  .  .  .  .  2: *ast.IfStmt {
   486  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   487  .  .  .  .  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
   488  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   489  .  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
   490  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
   491  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   492  .  .  .  .  .  .  .  .  .  .  .  .  }
   493  .  .  .  .  .  .  .  .  .  .  .  .  Op: "==="
   494  .  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   495  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   496  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
   497  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "2"
   498  .  .  .  .  .  .  .  .  .  .  .  .  }
   499  .  .  .  .  .  .  .  .  .  .  .  }
   500  .  .  .  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
   501  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   502  .  .  .  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
   503  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   504  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   505  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   506  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   507  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   508  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   509  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   510  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   511  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   512  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   513  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   514  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   515  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   516  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   517  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   518  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   519  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   520  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   521  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   522  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "two"
   523  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   524  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   525  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   526  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   527  .  .  .  .  .  .  .  .  .  .  .  .  .  1: *ast.ContinueStatement {
   528  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   529  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Label: *ast.Ident {
   530  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "whileStmt"
   531  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   532  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   533  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   534  .  .  .  .  .  .  .  .  .  .  .  .  }
   535  .  .  .  .  .  .  .  .  .  .  .  }
   536  .  .  .  .  .  .  .  .  .  .  }
   537  .  .  .  .  .  .  .  .  .  }
   538  .  .  .  .  .  .  .  .  }
   539  .  .  .  .  .  .  .  }
   540  .  .  .  .  .  .  }
   541  .  .  .  .  .  }
   542  .  .  .  .  .  1: *ast.WhileStmt {
   543  .  .  .  .  .  .  Position: ast.Position {}
   544  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
   545  .  .  .  .  .  .  .  Position: ast.Position {}
   546  .  .  .  .  .  .  .  Left: *ast.Ident {
   547  .  .  .  .  .  .  .  .  Name: "i"
   548  .  .  .  .  .  .  .  .  Position: ast.Position {}
   549  .  .  .  .  .  .  .  }
   550  .  .  .  .  .  .  .  Op: "<="
   551  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   552  .  .  .  .  .  .  .  .  Position: ast.Position {}
   553  .  .  .  .  .  .  .  .  Kind: "number"
   554  .  .  .  .  .  .  .  .  Value: "5"
   555  .  .  .  .  .  .  .  }
   556  .  .  .  .  .  .  }
   557  .  .  .  .  .  .  Body: *ast.BlockStmt {
   558  .  .  .  .  .  .  .  Position: ast.Position {}
   559  .  .  .  .  .  .  .  List: []ast.Stmt (len = 3) {
   560  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   561  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   562  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   563  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   564  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   565  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   566  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   567  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   568  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   569  .  .  .  .  .  .  .  .  .  .  .  }
   570  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   571  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   572  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   573  .  .  .  .  .  .  .  .  .  .  .  }
   574  .  .  .  .  .  .  .  .  .  .  }
   575  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   576  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   577  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   578  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   579  .  .  .  .  .  .  .  .  .  .  .  .  Value: "test"
   580  .  .  .  .  .  .  .  .  .  .  .  }
   581  .  .  .  .  .  .  .  .  .  .  }
   582  .  .  .  .  .  .  .  .  .  }
   583  .  .  .  .  .  .  .  .  }
   584  .  .  .  .  .  .  .  .  1: *ast.IfStmt {
   585  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   586  .  .  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
   587  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   588  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
   589  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
   590  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   591  .  .  .  .  .  .  .  .  .  .  }
   592  .  .  .  .  .  .  .  .  .  .  Op: "==="
   593  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   594  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   595  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
   596  .  .  .  .  .  .  .  .  .  .  .  Value: "2"
   597  .  .  .  .  .  .  .  .  .  .  }
   598  .  .  .  .  .  .  .  .  .  }
   599  .  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
   600  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   601  .  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
   602  .  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   603  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   604  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   605  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   606  .  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   607  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   608  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   609  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   610  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   611  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   612  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   613  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   614  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   615  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   616  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   617  .  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   618  .  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   619  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   620  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   621  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "two"
   622  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   623  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   624  .  .  .  .  .  .  .  .  .  .  .  .  }
   625  .  .  .  .  .  .  .  .  .  .  .  }
   626  .  .  .  .  .  .  .  .  .  .  .  1: *ast.ContinueStatement {
   627  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   628  .  .  .  .  .  .  .  .  .  .  .  }
   629  .  .  .  .  .  .  .  .  .  .  }
   630  .  .  .  .  .  .  .  .  .  }
   631  .  .  .  .  .  .  .  .  }
   632  .  .  .  .  .  .  .  .  2: *ast.IfStmt {
   633  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   634  .  .  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
   635  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   636  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
   637  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
   638  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   639  .  .  .  .  .  .  .  .  .  .  }
   640  .  .  .  .  .  .  .  .  .  .  Op: "==="
   641  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   642  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   643  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
   644  .  .  .  .  .  .  .  .  .  .  .  Value: "4"
   645  .  .  .  .  .  .  .  .  .  .  }
   646  .  .  .  .  .  .  .  .  .  }
   647  .  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
   648  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   649  .  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
   650  .  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   651  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   652  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   653  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   654  .  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   655  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   656  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   657  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   658  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   659  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   660  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   661  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   662  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   663  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   664  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   665  .  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   666  .  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   667  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   668  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   669  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "finish"
   670  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   671  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   672  .  .  .  .  .  .  .  .  .  .  .  .  }
   673  .  .  .  .  .  .  .  .  .  .  .  }
   674  .  .  .  .  .  .  .  .  .  .  .  1: *ast.BreakStatement {
   675  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   676  .  .  .  .  .  .  .  .  .  .  .  }
   677  .  .  .  .  .  .  .  .  .  .  }
   678  .  .  .  .  .  .  .  .  .  }
   679  .  .  .  .  .  .  .  .  }
   680  .  .  .  .  .  .  .  }
   681  .  .  .  .  .  .  }
   682  .  .  .  .  .  }
   683  .  .  .  .  }
   684  .  .  .  }
   685  .  .  }
   686  .  .  3: *ast.FuncDecl {
   687  .  .  .  Position: ast.Position {}
   688  .  .  .  Name: *ast.Ident {
   689  .  .  .  .  Name: "SwitchStatement"
   690  .  .  .  .  Position: ast.Position {}
   691  .  .  .  }
   692  .  .  .  Type: *ast.FuncType {
   693  .  .  .  .  Position: ast.Position {}
   694  .  .  .  .  Params: *ast.FieldList {
   695  .  .  .  .  .  Position: ast.Position {}
   696  .  .  .  .  }
   697  .  .  .  }
   698  .  .  .  Body: *ast.BlockStmt {
   699  .  .  .  .  Position: ast.Position {}
   700  .  .  .  .  List: []ast.Stmt (len = 2) {
   701  .  .  .  .  .  0: *ast.AssignStmt {
   702  .  .  .  .  .  .  Position: ast.Position {}
   703  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
   704  .  .  .  .  .  .  .  0: *ast.Ident {
   705  .  .  .  .  .  .  .  .  Name: "fruits"
   706  .  .  .  .  .  .  .  .  Position: ast.Position {}
   707  .  .  .  .  .  .  .  }
   708  .  .  .  .  .  .  }
   709  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
   710  .  .  .  .  .  .  .  0: *ast.BasicLit {
   711  .  .  .  .  .  .  .  .  Position: ast.Position {}
   712  .  .  .  .  .  .  .  .  Kind: "string"
   713  .  .  .  .  .  .  .  .  Value: "Oranges"
   714  .  .  .  .  .  .  .  }
   715  .  .  .  .  .  .  }
   716  .  .  .  .  .  }
   717  .  .  .  .  .  1: *ast.SwitchStatement {
   718  .  .  .  .  .  .  Position: ast.Position {}
   719  .  .  .  .  .  .  Value: *ast.Ident {
   720  .  .  .  .  .  .  .  Name: "fruits"
   721  .  .  .  .  .  .  .  Position: ast.Position {}
   722  .  .  .  .  .  .  }
   723  .  .  .  .  .  .  Body: *ast.BlockStmt {
   724  .  .  .  .  .  .  .  Position: ast.Position {}
   725  .  .  .  .  .  .  .  List: []ast.Stmt (len = 4) {
   726  .  .  .  .  .  .  .  .  0: *ast.SwitchCase {
   727  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   728  .  .  .  .  .  .  .  .  .  Cond: *ast.BasicLit {
   729  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   730  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   731  .  .  .  .  .  .  .  .  .  .  Value: "Oranges"
   732  .  .  .  .  .  .  .  .  .  }
   733  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 2) {
   734  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   735  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   736  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   737  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   738  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   739  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   740  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   741  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   742  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   743  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   744  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   745  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   746  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   747  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   748  .  .  .  .  .  .  .  .  .  .  .  .  }
   749  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   750  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   751  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   752  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   753  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "Oranges"
   754  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   755  .  .  .  .  .  .  .  .  .  .  .  .  }
   756  .  .  .  .  .  .  .  .  .  .  .  }
   757  .  .  .  .  .  .  .  .  .  .  }
   758  .  .  .  .  .  .  .  .  .  .  1: *ast.BreakStatement {
   759  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   760  .  .  .  .  .  .  .  .  .  .  }
   761  .  .  .  .  .  .  .  .  .  }
   762  .  .  .  .  .  .  .  .  }
   763  .  .  .  .  .  .  .  .  1: *ast.SwitchCase {
   764  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   765  .  .  .  .  .  .  .  .  .  Cond: *ast.BasicLit {
   766  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   767  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   768  .  .  .  .  .  .  .  .  .  .  Value: "Mangoes"
   769  .  .  .  .  .  .  .  .  .  }
   770  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 2) {
   771  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   772  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   773  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   774  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   775  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   776  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   777  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   778  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   779  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   780  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   781  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   782  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   783  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   784  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   785  .  .  .  .  .  .  .  .  .  .  .  .  }
   786  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   787  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   788  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   789  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   790  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "Mangoes"
   791  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   792  .  .  .  .  .  .  .  .  .  .  .  .  }
   793  .  .  .  .  .  .  .  .  .  .  .  }
   794  .  .  .  .  .  .  .  .  .  .  }
   795  .  .  .  .  .  .  .  .  .  .  1: *ast.BreakStatement {
   796  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   797  .  .  .  .  .  .  .  .  .  .  }
   798  .  .  .  .  .  .  .  .  .  }
   799  .  .  .  .  .  .  .  .  }
   800  .  .  .  .  .  .  .  .  2: *ast.SwitchCase {
   801  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   802  .  .  .  .  .  .  .  .  .  Cond: *ast.BasicLit {
   803  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   804  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   805  .  .  .  .  .  .  .  .  .  .  Value: "Papayas"
   806  .  .  .  .  .  .  .  .  .  }
   807  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 2) {
   808  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   809  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   810  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   811  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   812  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   813  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   814  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   815  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   816  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   817  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   818  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   819  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   820  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   821  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   822  .  .  .  .  .  .  .  .  .  .  .  .  }
   823  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   824  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   825  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   826  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   827  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "Papayas"
   828  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   829  .  .  .  .  .  .  .  .  .  .  .  .  }
   830  .  .  .  .  .  .  .  .  .  .  .  }
   831  .  .  .  .  .  .  .  .  .  .  }
   832  .  .  .  .  .  .  .  .  .  .  1: *ast.BreakStatement {
   833  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   834  .  .  .  .  .  .  .  .  .  .  }
   835  .  .  .  .  .  .  .  .  .  }
   836  .  .  .  .  .  .  .  .  }
   837  .  .  .  .  .  .  .  .  3: *ast.SwitchDefault {
   838  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   839  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 1) {
   840  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   841  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   842  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   843  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   844  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   845  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   846  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   847  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   848  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   849  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   850  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   851  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   852  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   853  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   854  .  .  .  .  .  .  .  .  .  .  .  .  }
   855  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   856  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   857  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   858  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   859  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "No fruits"
   860  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   861  .  .  .  .  .  .  .  .  .  .  .  .  }
   862  .  .  .  .  .  .  .  .  .  .  .  }
   863  .  .  .  .  .  .  .  .  .  .  }
   864  .  .  .  .  .  .  .  .  .  }
   865  .  .  .  .  .  .  .  .  }
   866  .  .  .  .  .  .  .  }
   867  .  .  .  .  .  .  }
   868  .  .  .  .  .  }
   869  .  .  .  .  }
   870  .  .  .  }
   871  .  .  }
   872  .  .  4: *ast.FuncDecl {
   873  .  .  .  Position: ast.Position {}
   874  .  .  .  Name: *ast.Ident {
   875  .  .  .  .  Name: "ForStatement"
   876  .  .  .  .  Position: ast.Position {}
   877  .  .  .  }
   878  .  .  .  Type: *ast.FuncType {
   879  .  .  .  .  Position: ast.Position {}
   880  .  .  .  .  Params: *ast.FieldList {
   881  .  .  .  .  .  Position: ast.Position {}
   882  .  .  .  .  }
   883  .  .  .  }
   884  .  .  .  Body: *ast.BlockStmt {
   885  .  .  .  .  Position: ast.Position {}
   886  .  .  .  .  List: []ast.Stmt (len = 1) {
   887  .  .  .  .  .  0: *ast.ForStatement {
   888  .  .  .  .  .  .  Position: ast.Position {}
   889  .  .  .  .  .  .  VarDecl: *ast.AssignStmt {
   890  .  .  .  .  .  .  .  Position: ast.Position {}
   891  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
   892  .  .  .  .  .  .  .  .  0: *ast.Ident {
   893  .  .  .  .  .  .  .  .  .  Name: "i"
   894  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   895  .  .  .  .  .  .  .  .  }
   896  .  .  .  .  .  .  .  }
   897  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
   898  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   899  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   900  .  .  .  .  .  .  .  .  .  Kind: "number"
   901  .  .  .  .  .  .  .  .  .  Value: "0"
   902  .  .  .  .  .  .  .  .  }
   903  .  .  .  .  .  .  .  }
   904  .  .  .  .  .  .  }
   905  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
   906  .  .  .  .  .  .  .  Position: ast.Position {}
   907  .  .  .  .  .  .  .  Left: *ast.Ident {
   908  .  .  .  .  .  .  .  .  Name: "i"
   909  .  .  .  .  .  .  .  .  Position: ast.Position {}
   910  .  .  .  .  .  .  .  }
   911  .  .  .  .  .  .  .  Op: "<"
   912  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   913  .  .  .  .  .  .  .  .  Position: ast.Position {}
   914  .  .  .  .  .  .  .  .  Kind: "number"
   915  .  .  .  .  .  .  .  .  Value: "9"
   916  .  .  .  .  .  .  .  }
   917  .  .  .  .  .  .  }
   918  .  .  .  .  .  .  Increment: *ast.IncExpr {
   919  .  .  .  .  .  .  .  Position: ast.Position {}
   920  .  .  .  .  .  .  .  Op: "++"
   921  .  .  .  .  .  .  .  Arg: *ast.Ident {
   922  .  .  .  .  .  .  .  .  Name: "i"
   923  .  .  .  .  .  .  .  .  Position: ast.Position {}
   924  .  .  .  .  .  .  .  }
   925  .  .  .  .  .  .  }
   926  .  .  .  .  .  .  Body: *ast.BlockStmt {
   927  .  .  .  .  .  .  .  Position: ast.Position {}
   928  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
   929  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   930  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   931  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   932  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   933  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   934  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   935  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   936  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   937  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   938  .  .  .  .  .  .  .  .  .  .  .  }
   939  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   940  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   941  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   942  .  .  .  .  .  .  .  .  .  .  .  }
   943  .  .  .  .  .  .  .  .  .  .  }
   944  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   945  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   946  .  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
   947  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   948  .  .  .  .  .  .  .  .  .  .  .  }
   949  .  .  .  .  .  .  .  .  .  .  }
   950  .  .  .  .  .  .  .  .  .  }
   951  .  .  .  .  .  .  .  .  }
   952  .  .  .  .  .  .  .  }
   953  .  .  .  .  .  .  }
   954  .  .  .  .  .  }
   955  .  .  .  .  }
   956  .  .  .  }
   957  .  .  }
   958  .  .  5: *ast.FuncDecl {
   959  .  .  .  Position: ast.Position {}
   960  .  .  .  Name: *ast.Ident {
   961  .  .  .  .  Name: "ForStatementIteratingOverList"
   962  .  .  .  .  Position: ast.Position {}
   963  .  .  .  }
   964  .  .  .  Type: *ast.FuncType {
   965  .  .  .  .  Position: ast.Position {}
   966  .  .  .  .  Params: *ast.FieldList {
   967  .  .  .  .  .  Position: ast.Position {}
   968  .  .  .  .  .  List: []*ast.Field (len = 1) {
   969  .  .  .  .  .  .  0: *ast.Field {
   970  .  .  .  .  .  .  .  Position: ast.Position {}
   971  .  .  .  .  .  .  .  Name: *ast.Ident {
   972  .  .  .  .  .  .  .  .  Name: "data"
   973  .  .  .  .  .  .  .  .  Position: ast.Position {}
   974  .  .  .  .  .  .  .  }
   975  .  .  .  .  .  .  }
   976  .  .  .  .  .  }
   977  .  .  .  .  }
   978  .  .  .  }
   979  .  .  .  Body: *ast.BlockStmt {
   980  .  .  .  .  Position: ast.Position {}
   981  .  .  .  .  List: []ast.Stmt (len = 3) {
   982  .  .  .  .  .  0: *ast.AssignStmt {
   983  .  .  .  .  .  .  Position: ast.Position {}
   984  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
   985  .  .  .  .  .  .  .  0: *ast.Ident {
   986  .  .  .  .  .  .  .  .  Name: "sum"
   987  .  .  .  .  .  .  .  .  Position: ast.Position {}
   988  .  .  .  .  .  .  .  }
   989  .  .  .  .  .  .  }
   990  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
   991  .  .  .  .  .  .  .  0: *ast.BasicLit {
   992  .  .  .  .  .  .  .  .  Position: ast.Position {}
   993  .  .  .  .  .  .  .  .  Kind: "number"
   994  .  .  .  .  .  .  .  .  Value: "0"
   995  .  .  .  .  .  .  .  }
   996  .  .  .  .  .  .  }
   997  .  .  .  .  .  }
   998  .  .  .  .  .  1: *ast.ForStatement {
   999  .  .  .  .  .  .  Position: ast.Position {}
  1000  .  .  .  .  .  .  VarDecl: *ast.AssignStmt {
  1001  .  .  .  .  .  .  .  Position: ast.Position {}
  1002  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
  1003  .  .  .  .  .  .  .  .  0: *ast.Ident {
  1004  .  .  .  .  .  .  .  .  .  Name: "i"
  1005  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1006  .  .  .  .  .  .  .  .  }
  1007  .  .  .  .  .  .  .  }
  1008  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
  1009  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1010  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1011  .  .  .  .  .  .  .  .  .  Kind: "number"
  1012  .  .  .  .  .  .  .  .  .  Value: "0"
  1013  .  .  .  .  .  .  .  .  }
  1014  .  .  .  .  .  .  .  }
  1015  .  .  .  .  .  .  }
  1016  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
  1017  .  .  .  .  .  .  .  Position: ast.Position {}
  1018  .  .  .  .  .  .  .  Left: *ast.Ident {
  1019  .  .  .  .  .  .  .  .  Name: "i"
  1020  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1021  .  .  .  .  .  .  .  }
  1022  .  .  .  .  .  .  .  Op: "<"
  1023  .  .  .  .  .  .  .  Right: *ast.SelectorExpr {
  1024  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1025  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  1026  .  .  .  .  .  .  .  .  .  Name: "data"
  1027  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1028  .  .  .  .  .  .  .  .  }
  1029  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1030  .  .  .  .  .  .  .  .  .  Name: "length"
  1031  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1032  .  .  .  .  .  .  .  .  }
  1033  .  .  .  .  .  .  .  }
  1034  .  .  .  .  .  .  }
  1035  .  .  .  .  .  .  Increment: *ast.IncExpr {
  1036  .  .  .  .  .  .  .  Position: ast.Position {}
  1037  .  .  .  .  .  .  .  Op: "++"
  1038  .  .  .  .  .  .  .  Arg: *ast.Ident {
  1039  .  .  .  .  .  .  .  .  Name: "i"
  1040  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1041  .  .  .  .  .  .  .  }
  1042  .  .  .  .  .  .  }
  1043  .  .  .  .  .  .  Body: *ast.BlockStmt {
  1044  .  .  .  .  .  .  .  Position: ast.Position {}
  1045  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
  1046  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
  1047  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1048  .  .  .  .  .  .  .  .  .  Expr: *ast.BadNode {
  1049  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1050  .  .  .  .  .  .  .  .  .  .  Comment: "unsupported node type <augmented_assignment_expression>"
  1051  .  .  .  .  .  .  .  .  .  }
  1052  .  .  .  .  .  .  .  .  }
  1053  .  .  .  .  .  .  .  }
  1054  .  .  .  .  .  .  }
  1055  .  .  .  .  .  }
  1056  .  .  .  .  .  2: *ast.ReturnStmt {
  1057  .  .  .  .  .  .  Position: ast.Position {}
  1058  .  .  .  .  .  .  Results: []ast.Expr (len = 1) {
  1059  .  .  .  .  .  .  .  0: *ast.Ident {
  1060  .  .  .  .  .  .  .  .  Name: "sum"
  1061  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1062  .  .  .  .  .  .  .  }
  1063  .  .  .  .  .  .  }
  1064  .  .  .  .  .  }
  1065  .  .  .  .  }
  1066  .  .  .  }
  1067  .  .  }
  1068  .  .  6: *ast.FuncDecl {
  1069  .  .  .  Position: ast.Position {}
  1070  .  .  .  Name: *ast.Ident {
  1071  .  .  .  .  Name: "ForStatementWithoutBinaryExpressionIncremet"
  1072  .  .  .  .  Position: ast.Position {}
  1073  .  .  .  }
  1074  .  .  .  Type: *ast.FuncType {
  1075  .  .  .  .  Position: ast.Position {}
  1076  .  .  .  .  Params: *ast.FieldList {
  1077  .  .  .  .  .  Position: ast.Position {}
  1078  .  .  .  .  }
  1079  .  .  .  }
  1080  .  .  .  Body: *ast.BlockStmt {
  1081  .  .  .  .  Position: ast.Position {}
  1082  .  .  .  .  List: []ast.Stmt (len = 1) {
  1083  .  .  .  .  .  0: *ast.ForStatement {
  1084  .  .  .  .  .  .  Position: ast.Position {}
  1085  .  .  .  .  .  .  VarDecl: *ast.AssignStmt {
  1086  .  .  .  .  .  .  .  Position: ast.Position {}
  1087  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 2) {
  1088  .  .  .  .  .  .  .  .  0: *ast.Ident {
  1089  .  .  .  .  .  .  .  .  .  Name: "a"
  1090  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1091  .  .  .  .  .  .  .  .  }
  1092  .  .  .  .  .  .  .  .  1: *ast.Ident {
  1093  .  .  .  .  .  .  .  .  .  Name: "b"
  1094  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1095  .  .  .  .  .  .  .  .  }
  1096  .  .  .  .  .  .  .  }
  1097  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 0) {}
  1098  .  .  .  .  .  .  }
  1099  .  .  .  .  .  .  Cond: *ast.Ident {
  1100  .  .  .  .  .  .  .  Name: "c"
  1101  .  .  .  .  .  .  .  Position: ast.Position {}
  1102  .  .  .  .  .  .  }
  1103  .  .  .  .  .  .  Increment: *ast.Ident {
  1104  .  .  .  .  .  .  .  Name: "d"
  1105  .  .  .  .  .  .  .  Position: ast.Position {}
  1106  .  .  .  .  .  .  }
  1107  .  .  .  .  .  .  Body: *ast.BlockStmt {
  1108  .  .  .  .  .  .  .  Position: ast.Position {}
  1109  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
  1110  .  .  .  .  .  .  .  .  0: *ast.BadNode {
  1111  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1112  .  .  .  .  .  .  .  .  .  Comment: "unsupported node type <identifier>"
  1113  .  .  .  .  .  .  .  .  }
  1114  .  .  .  .  .  .  .  }
  1115  .  .  .  .  .  .  }
  1116  .  .  .  .  .  }
  1117  .  .  .  .  }
  1118  .  .  .  }
  1119  .  .  }
  1120  .  .  7: *ast.FuncDecl {
  1121  .  .  .  Position: ast.Position {}
  1122  .  .  .  Name: *ast.Ident {
  1123  .  .  .  .  Name: "ForStatementEndlessRecursion"
  1124  .  .  .  .  Position: ast.Position {}
  1125  .  .  .  }
  1126  .  .  .  Type: *ast.FuncType {
  1127  .  .  .  .  Position: ast.Position {}
  1128  .  .  .  .  Params: *ast.FieldList {
  1129  .  .  .  .  .  Position: ast.Position {}
  1130  .  .  .  .  }
  1131  .  .  .  }
  1132  .  .  .  Body: *ast.BlockStmt {
  1133  .  .  .  .  Position: ast.Position {}
  1134  .  .  .  .  List: []ast.Stmt (len = 1) {
  1135  .  .  .  .  .  0: *ast.ForStatement {
  1136  .  .  .  .  .  .  Position: ast.Position {}
  1137  .  .  .  .  .  .  Body: *ast.BlockStmt {
  1138  .  .  .  .  .  .  .  Position: ast.Position {}
  1139  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
  1140  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
  1141  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1142  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
  1143  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1144  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1145  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1146  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  1147  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
  1148  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1149  .  .  .  .  .  .  .  .  .  .  .  }
  1150  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1151  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
  1152  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1153  .  .  .  .  .  .  .  .  .  .  .  }
  1154  .  .  .  .  .  .  .  .  .  .  }
  1155  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  1156  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1157  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1158  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  1159  .  .  .  .  .  .  .  .  .  .  .  .  Value: "endless recursion"
  1160  .  .  .  .  .  .  .  .  .  .  .  }
  1161  .  .  .  .  .  .  .  .  .  .  }
  1162  .  .  .  .  .  .  .  .  .  }
  1163  .  .  .  .  .  .  .  .  }
  1164  .  .  .  .  .  .  .  }
  1165  .  .  .  .  .  .  }
  1166  .  .  .  .  .  }
  1167  .  .  .  .  }
  1168  .  .  .  }
  1169  .  .  }
  1170  .  .  8: *ast.FuncDecl {
  1171  .  .  .  Position: ast.Position {}
  1172  .  .  .  Name: *ast.Ident {
  1173  .  .  .  .  Name: "ForStatementEmptyBody"
  1174  .  .  .  .  Position: ast.Position {}
  1175  .  .  .  }
  1176  .  .  .  Type: *ast.FuncType {
  1177  .  .  .  .  Position: ast.Position {}
  1178  .  .  .  .  Params: *ast.FieldList {
  1179  .  .  .  .  .  Position: ast.Position {}
  1180  .  .  .  .  }
  1181  .  .  .  }
  1182  .  .  .  Body: *ast.BlockStmt {
  1183  .  .  .  .  Position: ast.Position {}
  1184  .  .  .  .  List: []ast.Stmt (len = 1) {
  1185  .  .  .  .  .  0: *ast.ForStatement {
  1186  .  .  .  .  .  .  Position: ast.Position {}
  1187  .  .  .  .  .  .  VarDecl: *ast.AssignStmt {
  1188  .  .  .  .  .  .  .  Position: ast.Position {}
  1189  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
  1190  .  .  .  .  .  .  .  .  0: *ast.Ident {
  1191  .  .  .  .  .  .  .  .  .  Name: "i"
  1192  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1193  .  .  .  .  .  .  .  .  }
  1194  .  .  .  .  .  .  .  }
  1195  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
  1196  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1197  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1198  .  .  .  .  .  .  .  .  .  Kind: "number"
  1199  .  .  .  .  .  .  .  .  .  Value: "0"
  1200  .  .  .  .  .  .  .  .  }
  1201  .  .  .  .  .  .  .  }
  1202  .  .  .  .  .  .  }
  1203  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
  1204  .  .  .  .  .  .  .  Position: ast.Position {}
  1205  .  .  .  .  .  .  .  Left: *ast.Ident {
  1206  .  .  .  .  .  .  .  .  Name: "i"
  1207  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1208  .  .  .  .  .  .  .  }
  1209  .  .  .  .  .  .  .  Op: "<"
  1210  .  .  .  .  .  .  .  Right: *ast.Ident {
  1211  .  .  .  .  .  .  .  .  Name: "l"
  1212  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1213  .  .  .  .  .  .  .  }
  1214  .  .  .  .  .  .  }
  1215  .  .  .  .  .  .  Increment: *ast.IncExpr {
  1216  .  .  .  .  .  .  .  Position: ast.Position {}
  1217  .  .  .  .  .  .  .  Op: "++"
  1218  .  .  .  .  .  .  .  Arg: *ast.Ident {
  1219  .  .  .  .  .  .  .  .  Name: "i"
  1220  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1221  .  .  .  .  .  .  .  }
  1222  .  .  .  .  .  .  }
  1223  .  .  .  .  .  .  Body: *ast.BlockStmt {
  1224  .  .  .  .  .  .  .  Position: ast.Position {}
  1225  .  .  .  .  .  .  .  List: []ast.Stmt (len = 0) {}
  1226  .  .  .  .  .  .  }
  1227  .  .  .  .  .  }
  1228  .  .  .  .  }
  1229  .  .  .  }
  1230  .  .  }
  1231  .  .  9: *ast.FuncDecl {
  1232  .  .  .  Position: ast.Position {}
  1233  .  .  .  Name: *ast.Ident {
  1234  .  .  .  .  Name: "ForInStatement"
  1235  .  .  .  .  Position: ast.Position {}
  1236  .  .  .  }
  1237  .  .  .  Type: *ast.FuncType {
  1238  .  .  .  .  Position: ast.Position {}
  1239  .  .  .  .  Params: *ast.FieldList {
  1240  .  .  .  .  .  Position: ast.Position {}
  1241  .  .  .  .  }
  1242  .  .  .  }
  1243  .  .  .  Body: *ast.BlockStmt {
  1244  .  .  .  .  Position: ast.Position {}
  1245  .  .  .  .  List: []ast.Stmt (len = 2) {
  1246  .  .  .  .  .  0: *ast.AssignStmt {
  1247  .  .  .  .  .  .  Position: ast.Position {}
  1248  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
  1249  .  .  .  .  .  .  .  0: *ast.Ident {
  1250  .  .  .  .  .  .  .  .  Name: "values"
  1251  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1252  .  .  .  .  .  .  .  }
  1253  .  .  .  .  .  .  }
  1254  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
  1255  .  .  .  .  .  .  .  0: *ast.ObjectExpr {
  1256  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1257  .  .  .  .  .  .  .  .  Elts: []ast.Expr (len = 3) {
  1258  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1259  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1260  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  1261  .  .  .  .  .  .  .  .  .  .  Value: "a"
  1262  .  .  .  .  .  .  .  .  .  }
  1263  .  .  .  .  .  .  .  .  .  1: *ast.BasicLit {
  1264  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1265  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  1266  .  .  .  .  .  .  .  .  .  .  Value: "b"
  1267  .  .  .  .  .  .  .  .  .  }
  1268  .  .  .  .  .  .  .  .  .  2: *ast.BasicLit {
  1269  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1270  .  .  .  .  .  .  .  .  .  .  Kind: "string"
  1271  .  .  .  .  .  .  .  .  .  .  Value: "c"
  1272  .  .  .  .  .  .  .  .  .  }
  1273  .  .  .  .  .  .  .  .  }
  1274  .  .  .  .  .  .  .  .  Comment: "array"
  1275  .  .  .  .  .  .  .  }
  1276  .  .  .  .  .  .  }
  1277  .  .  .  .  .  }
  1278  .  .  .  .  .  1: *ast.ForInStatement {
  1279  .  .  .  .  .  .  Position: ast.Position {}
  1280  .  .  .  .  .  .  Left: *ast.Ident {
  1281  .  .  .  .  .  .  .  Name: "value"
  1282  .  .  .  .  .  .  .  Position: ast.Position {}
  1283  .  .  .  .  .  .  }
  1284  .  .  .  .  .  .  Right: *ast.Ident {
  1285  .  .  .  .  .  .  .  Name: "values"
  1286  .  .  .  .  .  .  .  Position: ast.Position {}
  1287  .  .  .  .  .  .  }
  1288  .  .  .  .  .  .  Body: *ast.BlockStmt {
  1289  .  .  .  .  .  .  .  Position: ast.Position {}
  1290  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
  1291  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
  1292  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1293  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
  1294  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1295  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1296  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1297  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
  1298  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
  1299  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1300  .  .  .  .  .  .  .  .  .  .  .  }
  1301  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1302  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
  1303  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1304  .  .  .  .  .  .  .  .  .  .  .  }
  1305  .  .  .  .  .  .  .  .  .  .  }
  1306  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  1307  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
  1308  .  .  .  .  .  .  .  .  .  .  .  .  Name: "value"
  1309  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
  1310  .  .  .  .  .  .  .  .  .  .  .  }
  1311  .  .  .  .  .  .  .  .  .  .  }
  1312  .  .  .  .  .  .  .  .  .  }
  1313  .  .  .  .  .  .  .  .  }
  1314  .  .  .  .  .  .  .  }
  1315  .  .  .  .  .  .  }
  1316  .  .  .  .  .  }
  1317  .  .  .  .  }
  1318  .  .  .  }
  1319  .  .  }
  1320  .  .  10: *ast.FuncDecl {
  1321  .  .  .  Position: ast.Position {}
  1322  .  .  .  Name: *ast.Ident {
  1323  .  .  .  .  Name: "ExportStatement"
  1324  .  .  .  .  Position: ast.Position {}
  1325  .  .  .  }
  1326  .  .  .  Type: *ast.FuncType {
  1327  .  .  .  .  Position: ast.Position {}
  1328  .  .  .  .  Params: *ast.FieldList {
  1329  .  .  .  .  .  Position: ast.Position {}
  1330  .  .  .  .  }
  1331  .  .  .  }
  1332  .  .  .  Body: *ast.BlockStmt {
  1333  .  .  .  .  Position: ast.Position {}
  1334  .  .  .  .  List: []ast.Stmt (len = 1) {
  1335  .  .  .  .  .  0: nil
  1336  .  .  .  .  }
  1337  .  .  .  }
  1338  .  .  }
  1339  .  }
  1340  }
